package helper

import (
	"fmt"
	"strings"

	"github.com/iancoleman/strcase"
	"github.com/tableauio/tableau/proto/tableaupb"
	"google.golang.org/protobuf/compiler/protogen"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoreflect"
	"google.golang.org/protobuf/types/descriptorpb"
)

func GenerateFileHeader(gen *protogen.Plugin, file *protogen.File, g *protogen.GeneratedFile, version string) {
	GenerateCommonHeader(gen, g, version)
	if file.Proto.GetOptions().GetDeprecated() {
		g.P("// ", file.Desc.Path(), " is a deprecated file.")
	} else {
		g.P("// source: ", file.Desc.Path())
	}
}

func GenerateCommonHeader(gen *protogen.Plugin, g *protogen.GeneratedFile, version string) {
	g.P("// Code generated by protoc-gen-csharp-tableau-loader. DO NOT EDIT.")
	g.P("// versions:")
	g.P("// - protoc-gen-csharp-tableau-loader v", version)
	g.P("// - protoc                           ", protocVersion(gen))
}

func protocVersion(gen *protogen.Plugin) string {
	v := gen.Request.GetCompilerVersion()
	if v == nil {
		return "(unknown)"
	}
	var suffix string
	if s := v.GetSuffix(); s != "" {
		suffix = "-" + s
	}
	return fmt.Sprintf("v%d.%d.%d%s", v.GetMajor(), v.GetMinor(), v.GetPatch(), suffix)
}

func ParseIndexFieldName(fd protoreflect.FieldDescriptor) string {
	return strcase.ToCamel(string(fd.Name()))
}

func ParseIndexFieldNameAsKeyStructFieldName(fd protoreflect.FieldDescriptor) string {
	if fd.IsList() {
		opts := fd.Options().(*descriptorpb.FieldOptions)
		fdOpts := proto.GetExtension(opts, tableaupb.E_Field).(*tableaupb.FieldOptions)
		return strcase.ToCamel(fdOpts.GetName())
	}
	return ParseIndexFieldName(fd)
}

func ParseIndexFieldNameAsFuncParam(fd protoreflect.FieldDescriptor) string {
	return ParseIndexFieldNameAsKeyStructFieldName(fd)
}

// ParseCsharpType converts a FieldDescriptor to C# type string.
func ParseCsharpType(fd protoreflect.FieldDescriptor) string {
	switch fd.Kind() {
	case protoreflect.BoolKind:
		return "bool"
	case protoreflect.EnumKind:
		fullname := string(fd.Enum().FullName())
		seps := strings.Split(fullname, ".")
		seps[0] = strcase.ToCamel(seps[0])
		for i := 2; i < len(seps); i++ {
			seps[i] = "Types." + seps[i]
		}
		return strings.Join(seps, ".")
	case protoreflect.Int32Kind, protoreflect.Sint32Kind, protoreflect.Sfixed32Kind:
		return "int"
	case protoreflect.Uint32Kind, protoreflect.Fixed32Kind:
		return "uint"
	case protoreflect.Int64Kind, protoreflect.Sint64Kind, protoreflect.Sfixed64Kind:
		return "long"
	case protoreflect.Uint64Kind, protoreflect.Fixed64Kind:
		return "ulong"
	case protoreflect.FloatKind:
		return "float"
	case protoreflect.DoubleKind:
		return "double"
	case protoreflect.StringKind, protoreflect.BytesKind:
		return "string"
	case protoreflect.MessageKind:
		return ParseCsharpClassType(fd.Message())
	// case protoreflect.GroupKind:
	// 	return "group"
	default:
		return fmt.Sprintf("<unknown:%d>", fd.Kind())
	}
}

func ParseCsharpClassType(md protoreflect.MessageDescriptor) string {
	fullname := string(md.FullName())
	seps := strings.Split(fullname, ".")
	seps[0] = strcase.ToCamel(seps[0])
	for i := 2; i < len(seps); i++ {
		seps[i] = "Types." + seps[i]
	}
	return strings.Join(seps, ".")
}

func GetTypeEmptyValue(fd protoreflect.FieldDescriptor) string {
	switch fd.Kind() {
	case protoreflect.BoolKind:
		return "false"
	case protoreflect.Int32Kind, protoreflect.Sint32Kind, protoreflect.Sfixed32Kind,
		protoreflect.Uint32Kind, protoreflect.Fixed32Kind,
		protoreflect.Int64Kind, protoreflect.Sint64Kind, protoreflect.Sfixed64Kind,
		protoreflect.Uint64Kind, protoreflect.Fixed64Kind, protoreflect.EnumKind:
		return "0"
	case protoreflect.FloatKind, protoreflect.DoubleKind:
		return "0.0"
	case protoreflect.StringKind:
		return `""`
	case protoreflect.BytesKind, protoreflect.MessageKind:
		return "null"
	// case protoreflect.GroupKind:
	// 	return "group"
	default:
		return fmt.Sprintf("<unknown:%d>", fd.Kind())
	}
}

type MapKey struct {
	Type string
	Name string
}

func AddMapKey(gen *protogen.Plugin, fd protoreflect.FieldDescriptor, keys []MapKey) []MapKey {
	opts := fd.Options().(*descriptorpb.FieldOptions)
	fdOpts := proto.GetExtension(opts, tableaupb.E_Field).(*tableaupb.FieldOptions)
	name := fdOpts.GetKey()
	if fd.MapValue().Kind() == protoreflect.MessageKind {
		valueFd := fd.MapValue().Message().Fields().Get(0)
		name = string(valueFd.Name())
	}
	name = escapeIdentifier(name)
	if name == "" {
		name = fmt.Sprintf("key%d", len(keys)+1)
	} else {
		for _, key := range keys {
			if key.Name == name {
				// rewrite to avoid name confict
				name = fmt.Sprintf("%s%d", name, len(keys)+1)
				break
			}
		}
	}
	keys = append(keys, MapKey{ParseCsharpType(fd.MapKey()), name})
	return keys
}

// GenGetParams generates function parameters, which are the names listed in the function's definition.
func GenGetParams(keys []MapKey) string {
	var params string
	for i, key := range keys {
		params += key.Type + " " + key.Name
		if i != len(keys)-1 {
			params += ", "
		}
	}
	return params
}

// GenGetArguments generates function arguments, which are the real values passed to the function.
func GenGetArguments(keys []MapKey) string {
	var params string
	for i, key := range keys {
		params += key.Name
		if i != len(keys)-1 {
			params += ", "
		}
	}
	return params
}

func Indent(depth int) string {
	return strings.Repeat("    ", depth)
}
