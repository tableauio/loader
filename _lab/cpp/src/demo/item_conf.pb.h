// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: item_conf.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_item_5fconf_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_item_5fconf_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/duration.pb.h>
#include <google/protobuf/timestamp.pb.h>
#include "tableau/protobuf/tableau.pb.h"
#include "common_conf.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_item_5fconf_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_item_5fconf_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_item_5fconf_2eproto;
namespace protoconf {
class ItemConf;
struct ItemConfDefaultTypeInternal;
extern ItemConfDefaultTypeInternal _ItemConf_default_instance_;
class ItemConf_Item;
struct ItemConf_ItemDefaultTypeInternal;
extern ItemConf_ItemDefaultTypeInternal _ItemConf_Item_default_instance_;
class ItemConf_ItemMapEntry_DoNotUse;
struct ItemConf_ItemMapEntry_DoNotUseDefaultTypeInternal;
extern ItemConf_ItemMapEntry_DoNotUseDefaultTypeInternal _ItemConf_ItemMapEntry_DoNotUse_default_instance_;
class Path;
struct PathDefaultTypeInternal;
extern PathDefaultTypeInternal _Path_default_instance_;
}  // namespace protoconf
PROTOBUF_NAMESPACE_OPEN
template<> ::protoconf::ItemConf* Arena::CreateMaybeMessage<::protoconf::ItemConf>(Arena*);
template<> ::protoconf::ItemConf_Item* Arena::CreateMaybeMessage<::protoconf::ItemConf_Item>(Arena*);
template<> ::protoconf::ItemConf_ItemMapEntry_DoNotUse* Arena::CreateMaybeMessage<::protoconf::ItemConf_ItemMapEntry_DoNotUse>(Arena*);
template<> ::protoconf::Path* Arena::CreateMaybeMessage<::protoconf::Path>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace protoconf {

// ===================================================================

class ItemConf_ItemMapEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ItemConf_ItemMapEntry_DoNotUse, 
    uint32_t, ::protoconf::ItemConf_Item,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ItemConf_ItemMapEntry_DoNotUse, 
    uint32_t, ::protoconf::ItemConf_Item,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  ItemConf_ItemMapEntry_DoNotUse();
  explicit constexpr ItemConf_ItemMapEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit ItemConf_ItemMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const ItemConf_ItemMapEntry_DoNotUse& other);
  static const ItemConf_ItemMapEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const ItemConf_ItemMapEntry_DoNotUse*>(&_ItemConf_ItemMapEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class ItemConf_Item final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protoconf.ItemConf.Item) */ {
 public:
  inline ItemConf_Item() : ItemConf_Item(nullptr) {}
  ~ItemConf_Item() override;
  explicit constexpr ItemConf_Item(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ItemConf_Item(const ItemConf_Item& from);
  ItemConf_Item(ItemConf_Item&& from) noexcept
    : ItemConf_Item() {
    *this = ::std::move(from);
  }

  inline ItemConf_Item& operator=(const ItemConf_Item& from) {
    CopyFrom(from);
    return *this;
  }
  inline ItemConf_Item& operator=(ItemConf_Item&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ItemConf_Item& default_instance() {
    return *internal_default_instance();
  }
  static inline const ItemConf_Item* internal_default_instance() {
    return reinterpret_cast<const ItemConf_Item*>(
               &_ItemConf_Item_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ItemConf_Item& a, ItemConf_Item& b) {
    a.Swap(&b);
  }
  inline void Swap(ItemConf_Item* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ItemConf_Item* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ItemConf_Item* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ItemConf_Item>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ItemConf_Item& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ItemConf_Item& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ItemConf_Item* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protoconf.ItemConf.Item";
  }
  protected:
  explicit ItemConf_Item(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParamListFieldNumber = 8,
    kExtTypeListFieldNumber = 9,
    kNameFieldNumber = 2,
    kPathFieldNumber = 4,
    kExpiryFieldNumber = 5,
    kDurationFieldNumber = 6,
    kIdFieldNumber = 1,
    kTypeFieldNumber = 7,
  };
  // repeated int32 param_list = 8 [(.tableau.field) = {
  int param_list_size() const;
  private:
  int _internal_param_list_size() const;
  public:
  void clear_param_list();
  private:
  int32_t _internal_param_list(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_param_list() const;
  void _internal_add_param_list(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_param_list();
  public:
  int32_t param_list(int index) const;
  void set_param_list(int index, int32_t value);
  void add_param_list(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      param_list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_param_list();

  // repeated .protoconf.FruitType ext_type_list = 9 [(.tableau.field) = {
  int ext_type_list_size() const;
  private:
  int _internal_ext_type_list_size() const;
  public:
  void clear_ext_type_list();
  private:
  ::protoconf::FruitType _internal_ext_type_list(int index) const;
  void _internal_add_ext_type_list(::protoconf::FruitType value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_ext_type_list();
  public:
  ::protoconf::FruitType ext_type_list(int index) const;
  void set_ext_type_list(int index, ::protoconf::FruitType value);
  void add_ext_type_list(::protoconf::FruitType value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& ext_type_list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_ext_type_list();

  // string name = 2 [(.tableau.field) = {
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // .protoconf.Path path = 4 [(.tableau.field) = {
  bool has_path() const;
  private:
  bool _internal_has_path() const;
  public:
  void clear_path();
  const ::protoconf::Path& path() const;
  PROTOBUF_NODISCARD ::protoconf::Path* release_path();
  ::protoconf::Path* mutable_path();
  void set_allocated_path(::protoconf::Path* path);
  private:
  const ::protoconf::Path& _internal_path() const;
  ::protoconf::Path* _internal_mutable_path();
  public:
  void unsafe_arena_set_allocated_path(
      ::protoconf::Path* path);
  ::protoconf::Path* unsafe_arena_release_path();

  // .google.protobuf.Timestamp expiry = 5 [(.tableau.field) = {
  bool has_expiry() const;
  private:
  bool _internal_has_expiry() const;
  public:
  void clear_expiry();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& expiry() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_expiry();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_expiry();
  void set_allocated_expiry(::PROTOBUF_NAMESPACE_ID::Timestamp* expiry);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_expiry() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_expiry();
  public:
  void unsafe_arena_set_allocated_expiry(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* expiry);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_expiry();

  // .google.protobuf.Duration duration = 6 [(.tableau.field) = {
  bool has_duration() const;
  private:
  bool _internal_has_duration() const;
  public:
  void clear_duration();
  const ::PROTOBUF_NAMESPACE_ID::Duration& duration() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Duration* release_duration();
  ::PROTOBUF_NAMESPACE_ID::Duration* mutable_duration();
  void set_allocated_duration(::PROTOBUF_NAMESPACE_ID::Duration* duration);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Duration& _internal_duration() const;
  ::PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_duration();
  public:
  void unsafe_arena_set_allocated_duration(
      ::PROTOBUF_NAMESPACE_ID::Duration* duration);
  ::PROTOBUF_NAMESPACE_ID::Duration* unsafe_arena_release_duration();

  // uint32 id = 1 [(.tableau.field) = {
  void clear_id();
  uint32_t id() const;
  void set_id(uint32_t value);
  private:
  uint32_t _internal_id() const;
  void _internal_set_id(uint32_t value);
  public:

  // .protoconf.FruitType type = 7 [(.tableau.field) = {
  void clear_type();
  ::protoconf::FruitType type() const;
  void set_type(::protoconf::FruitType value);
  private:
  ::protoconf::FruitType _internal_type() const;
  void _internal_set_type(::protoconf::FruitType value);
  public:

  // @@protoc_insertion_point(class_scope:protoconf.ItemConf.Item)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > param_list_;
  mutable std::atomic<int> _param_list_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> ext_type_list_;
  mutable std::atomic<int> _ext_type_list_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::protoconf::Path* path_;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* expiry_;
  ::PROTOBUF_NAMESPACE_ID::Duration* duration_;
  uint32_t id_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_item_5fconf_2eproto;
};
// -------------------------------------------------------------------

class ItemConf final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protoconf.ItemConf) */ {
 public:
  inline ItemConf() : ItemConf(nullptr) {}
  ~ItemConf() override;
  explicit constexpr ItemConf(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ItemConf(const ItemConf& from);
  ItemConf(ItemConf&& from) noexcept
    : ItemConf() {
    *this = ::std::move(from);
  }

  inline ItemConf& operator=(const ItemConf& from) {
    CopyFrom(from);
    return *this;
  }
  inline ItemConf& operator=(ItemConf&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ItemConf& default_instance() {
    return *internal_default_instance();
  }
  static inline const ItemConf* internal_default_instance() {
    return reinterpret_cast<const ItemConf*>(
               &_ItemConf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ItemConf& a, ItemConf& b) {
    a.Swap(&b);
  }
  inline void Swap(ItemConf* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ItemConf* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ItemConf* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ItemConf>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ItemConf& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ItemConf& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ItemConf* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protoconf.ItemConf";
  }
  protected:
  explicit ItemConf(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ItemConf_Item Item;

  // accessors -------------------------------------------------------

  enum : int {
    kItemMapFieldNumber = 1,
  };
  // map<uint32, .protoconf.ItemConf.Item> item_map = 1 [(.tableau.field) = {
  int item_map_size() const;
  private:
  int _internal_item_map_size() const;
  public:
  void clear_item_map();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::protoconf::ItemConf_Item >&
      _internal_item_map() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::protoconf::ItemConf_Item >*
      _internal_mutable_item_map();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::protoconf::ItemConf_Item >&
      item_map() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::protoconf::ItemConf_Item >*
      mutable_item_map();

  // @@protoc_insertion_point(class_scope:protoconf.ItemConf)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      ItemConf_ItemMapEntry_DoNotUse,
      uint32_t, ::protoconf::ItemConf_Item,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> item_map_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_item_5fconf_2eproto;
};
// -------------------------------------------------------------------

class Path final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protoconf.Path) */ {
 public:
  inline Path() : Path(nullptr) {}
  ~Path() override;
  explicit constexpr Path(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Path(const Path& from);
  Path(Path&& from) noexcept
    : Path() {
    *this = ::std::move(from);
  }

  inline Path& operator=(const Path& from) {
    CopyFrom(from);
    return *this;
  }
  inline Path& operator=(Path&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Path& default_instance() {
    return *internal_default_instance();
  }
  static inline const Path* internal_default_instance() {
    return reinterpret_cast<const Path*>(
               &_Path_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Path& a, Path& b) {
    a.Swap(&b);
  }
  inline void Swap(Path* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Path* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Path* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Path>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Path& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Path& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Path* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protoconf.Path";
  }
  protected:
  explicit Path(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDirFieldNumber = 1,
    kNameFieldNumber = 2,
  };
  // string dir = 1;
  void clear_dir();
  const std::string& dir() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_dir(ArgT0&& arg0, ArgT... args);
  std::string* mutable_dir();
  PROTOBUF_NODISCARD std::string* release_dir();
  void set_allocated_dir(std::string* dir);
  private:
  const std::string& _internal_dir() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_dir(const std::string& value);
  std::string* _internal_mutable_dir();
  public:

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:protoconf.Path)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dir_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_item_5fconf_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// ItemConf_Item

// uint32 id = 1 [(.tableau.field) = {
inline void ItemConf_Item::clear_id() {
  id_ = 0u;
}
inline uint32_t ItemConf_Item::_internal_id() const {
  return id_;
}
inline uint32_t ItemConf_Item::id() const {
  // @@protoc_insertion_point(field_get:protoconf.ItemConf.Item.id)
  return _internal_id();
}
inline void ItemConf_Item::_internal_set_id(uint32_t value) {
  
  id_ = value;
}
inline void ItemConf_Item::set_id(uint32_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:protoconf.ItemConf.Item.id)
}

// string name = 2 [(.tableau.field) = {
inline void ItemConf_Item::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& ItemConf_Item::name() const {
  // @@protoc_insertion_point(field_get:protoconf.ItemConf.Item.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ItemConf_Item::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protoconf.ItemConf.Item.name)
}
inline std::string* ItemConf_Item::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:protoconf.ItemConf.Item.name)
  return _s;
}
inline const std::string& ItemConf_Item::_internal_name() const {
  return name_.Get();
}
inline void ItemConf_Item::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ItemConf_Item::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ItemConf_Item::release_name() {
  // @@protoc_insertion_point(field_release:protoconf.ItemConf.Item.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ItemConf_Item::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protoconf.ItemConf.Item.name)
}

// .protoconf.Path path = 4 [(.tableau.field) = {
inline bool ItemConf_Item::_internal_has_path() const {
  return this != internal_default_instance() && path_ != nullptr;
}
inline bool ItemConf_Item::has_path() const {
  return _internal_has_path();
}
inline void ItemConf_Item::clear_path() {
  if (GetArenaForAllocation() == nullptr && path_ != nullptr) {
    delete path_;
  }
  path_ = nullptr;
}
inline const ::protoconf::Path& ItemConf_Item::_internal_path() const {
  const ::protoconf::Path* p = path_;
  return p != nullptr ? *p : reinterpret_cast<const ::protoconf::Path&>(
      ::protoconf::_Path_default_instance_);
}
inline const ::protoconf::Path& ItemConf_Item::path() const {
  // @@protoc_insertion_point(field_get:protoconf.ItemConf.Item.path)
  return _internal_path();
}
inline void ItemConf_Item::unsafe_arena_set_allocated_path(
    ::protoconf::Path* path) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(path_);
  }
  path_ = path;
  if (path) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protoconf.ItemConf.Item.path)
}
inline ::protoconf::Path* ItemConf_Item::release_path() {
  
  ::protoconf::Path* temp = path_;
  path_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protoconf::Path* ItemConf_Item::unsafe_arena_release_path() {
  // @@protoc_insertion_point(field_release:protoconf.ItemConf.Item.path)
  
  ::protoconf::Path* temp = path_;
  path_ = nullptr;
  return temp;
}
inline ::protoconf::Path* ItemConf_Item::_internal_mutable_path() {
  
  if (path_ == nullptr) {
    auto* p = CreateMaybeMessage<::protoconf::Path>(GetArenaForAllocation());
    path_ = p;
  }
  return path_;
}
inline ::protoconf::Path* ItemConf_Item::mutable_path() {
  ::protoconf::Path* _msg = _internal_mutable_path();
  // @@protoc_insertion_point(field_mutable:protoconf.ItemConf.Item.path)
  return _msg;
}
inline void ItemConf_Item::set_allocated_path(::protoconf::Path* path) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete path_;
  }
  if (path) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::protoconf::Path>::GetOwningArena(path);
    if (message_arena != submessage_arena) {
      path = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, path, submessage_arena);
    }
    
  } else {
    
  }
  path_ = path;
  // @@protoc_insertion_point(field_set_allocated:protoconf.ItemConf.Item.path)
}

// .google.protobuf.Timestamp expiry = 5 [(.tableau.field) = {
inline bool ItemConf_Item::_internal_has_expiry() const {
  return this != internal_default_instance() && expiry_ != nullptr;
}
inline bool ItemConf_Item::has_expiry() const {
  return _internal_has_expiry();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& ItemConf_Item::_internal_expiry() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = expiry_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& ItemConf_Item::expiry() const {
  // @@protoc_insertion_point(field_get:protoconf.ItemConf.Item.expiry)
  return _internal_expiry();
}
inline void ItemConf_Item::unsafe_arena_set_allocated_expiry(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* expiry) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(expiry_);
  }
  expiry_ = expiry;
  if (expiry) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protoconf.ItemConf.Item.expiry)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ItemConf_Item::release_expiry() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = expiry_;
  expiry_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ItemConf_Item::unsafe_arena_release_expiry() {
  // @@protoc_insertion_point(field_release:protoconf.ItemConf.Item.expiry)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = expiry_;
  expiry_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ItemConf_Item::_internal_mutable_expiry() {
  
  if (expiry_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    expiry_ = p;
  }
  return expiry_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* ItemConf_Item::mutable_expiry() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_expiry();
  // @@protoc_insertion_point(field_mutable:protoconf.ItemConf.Item.expiry)
  return _msg;
}
inline void ItemConf_Item::set_allocated_expiry(::PROTOBUF_NAMESPACE_ID::Timestamp* expiry) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(expiry_);
  }
  if (expiry) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(expiry));
    if (message_arena != submessage_arena) {
      expiry = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, expiry, submessage_arena);
    }
    
  } else {
    
  }
  expiry_ = expiry;
  // @@protoc_insertion_point(field_set_allocated:protoconf.ItemConf.Item.expiry)
}

// .google.protobuf.Duration duration = 6 [(.tableau.field) = {
inline bool ItemConf_Item::_internal_has_duration() const {
  return this != internal_default_instance() && duration_ != nullptr;
}
inline bool ItemConf_Item::has_duration() const {
  return _internal_has_duration();
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& ItemConf_Item::_internal_duration() const {
  const ::PROTOBUF_NAMESPACE_ID::Duration* p = duration_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Duration&>(
      ::PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& ItemConf_Item::duration() const {
  // @@protoc_insertion_point(field_get:protoconf.ItemConf.Item.duration)
  return _internal_duration();
}
inline void ItemConf_Item::unsafe_arena_set_allocated_duration(
    ::PROTOBUF_NAMESPACE_ID::Duration* duration) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(duration_);
  }
  duration_ = duration;
  if (duration) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protoconf.ItemConf.Item.duration)
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* ItemConf_Item::release_duration() {
  
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = duration_;
  duration_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* ItemConf_Item::unsafe_arena_release_duration() {
  // @@protoc_insertion_point(field_release:protoconf.ItemConf.Item.duration)
  
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = duration_;
  duration_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* ItemConf_Item::_internal_mutable_duration() {
  
  if (duration_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Duration>(GetArenaForAllocation());
    duration_ = p;
  }
  return duration_;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* ItemConf_Item::mutable_duration() {
  ::PROTOBUF_NAMESPACE_ID::Duration* _msg = _internal_mutable_duration();
  // @@protoc_insertion_point(field_mutable:protoconf.ItemConf.Item.duration)
  return _msg;
}
inline void ItemConf_Item::set_allocated_duration(::PROTOBUF_NAMESPACE_ID::Duration* duration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(duration_);
  }
  if (duration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<
            ::PROTOBUF_NAMESPACE_ID::MessageLite>::GetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(duration));
    if (message_arena != submessage_arena) {
      duration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, duration, submessage_arena);
    }
    
  } else {
    
  }
  duration_ = duration;
  // @@protoc_insertion_point(field_set_allocated:protoconf.ItemConf.Item.duration)
}

// .protoconf.FruitType type = 7 [(.tableau.field) = {
inline void ItemConf_Item::clear_type() {
  type_ = 0;
}
inline ::protoconf::FruitType ItemConf_Item::_internal_type() const {
  return static_cast< ::protoconf::FruitType >(type_);
}
inline ::protoconf::FruitType ItemConf_Item::type() const {
  // @@protoc_insertion_point(field_get:protoconf.ItemConf.Item.type)
  return _internal_type();
}
inline void ItemConf_Item::_internal_set_type(::protoconf::FruitType value) {
  
  type_ = value;
}
inline void ItemConf_Item::set_type(::protoconf::FruitType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:protoconf.ItemConf.Item.type)
}

// repeated int32 param_list = 8 [(.tableau.field) = {
inline int ItemConf_Item::_internal_param_list_size() const {
  return param_list_.size();
}
inline int ItemConf_Item::param_list_size() const {
  return _internal_param_list_size();
}
inline void ItemConf_Item::clear_param_list() {
  param_list_.Clear();
}
inline int32_t ItemConf_Item::_internal_param_list(int index) const {
  return param_list_.Get(index);
}
inline int32_t ItemConf_Item::param_list(int index) const {
  // @@protoc_insertion_point(field_get:protoconf.ItemConf.Item.param_list)
  return _internal_param_list(index);
}
inline void ItemConf_Item::set_param_list(int index, int32_t value) {
  param_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:protoconf.ItemConf.Item.param_list)
}
inline void ItemConf_Item::_internal_add_param_list(int32_t value) {
  param_list_.Add(value);
}
inline void ItemConf_Item::add_param_list(int32_t value) {
  _internal_add_param_list(value);
  // @@protoc_insertion_point(field_add:protoconf.ItemConf.Item.param_list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
ItemConf_Item::_internal_param_list() const {
  return param_list_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
ItemConf_Item::param_list() const {
  // @@protoc_insertion_point(field_list:protoconf.ItemConf.Item.param_list)
  return _internal_param_list();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
ItemConf_Item::_internal_mutable_param_list() {
  return &param_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
ItemConf_Item::mutable_param_list() {
  // @@protoc_insertion_point(field_mutable_list:protoconf.ItemConf.Item.param_list)
  return _internal_mutable_param_list();
}

// repeated .protoconf.FruitType ext_type_list = 9 [(.tableau.field) = {
inline int ItemConf_Item::_internal_ext_type_list_size() const {
  return ext_type_list_.size();
}
inline int ItemConf_Item::ext_type_list_size() const {
  return _internal_ext_type_list_size();
}
inline void ItemConf_Item::clear_ext_type_list() {
  ext_type_list_.Clear();
}
inline ::protoconf::FruitType ItemConf_Item::_internal_ext_type_list(int index) const {
  return static_cast< ::protoconf::FruitType >(ext_type_list_.Get(index));
}
inline ::protoconf::FruitType ItemConf_Item::ext_type_list(int index) const {
  // @@protoc_insertion_point(field_get:protoconf.ItemConf.Item.ext_type_list)
  return _internal_ext_type_list(index);
}
inline void ItemConf_Item::set_ext_type_list(int index, ::protoconf::FruitType value) {
  ext_type_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:protoconf.ItemConf.Item.ext_type_list)
}
inline void ItemConf_Item::_internal_add_ext_type_list(::protoconf::FruitType value) {
  ext_type_list_.Add(value);
}
inline void ItemConf_Item::add_ext_type_list(::protoconf::FruitType value) {
  _internal_add_ext_type_list(value);
  // @@protoc_insertion_point(field_add:protoconf.ItemConf.Item.ext_type_list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
ItemConf_Item::ext_type_list() const {
  // @@protoc_insertion_point(field_list:protoconf.ItemConf.Item.ext_type_list)
  return ext_type_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
ItemConf_Item::_internal_mutable_ext_type_list() {
  return &ext_type_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
ItemConf_Item::mutable_ext_type_list() {
  // @@protoc_insertion_point(field_mutable_list:protoconf.ItemConf.Item.ext_type_list)
  return _internal_mutable_ext_type_list();
}

// -------------------------------------------------------------------

// ItemConf

// map<uint32, .protoconf.ItemConf.Item> item_map = 1 [(.tableau.field) = {
inline int ItemConf::_internal_item_map_size() const {
  return item_map_.size();
}
inline int ItemConf::item_map_size() const {
  return _internal_item_map_size();
}
inline void ItemConf::clear_item_map() {
  item_map_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::protoconf::ItemConf_Item >&
ItemConf::_internal_item_map() const {
  return item_map_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::protoconf::ItemConf_Item >&
ItemConf::item_map() const {
  // @@protoc_insertion_point(field_map:protoconf.ItemConf.item_map)
  return _internal_item_map();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::protoconf::ItemConf_Item >*
ItemConf::_internal_mutable_item_map() {
  return item_map_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::protoconf::ItemConf_Item >*
ItemConf::mutable_item_map() {
  // @@protoc_insertion_point(field_mutable_map:protoconf.ItemConf.item_map)
  return _internal_mutable_item_map();
}

// -------------------------------------------------------------------

// Path

// string dir = 1;
inline void Path::clear_dir() {
  dir_.ClearToEmpty();
}
inline const std::string& Path::dir() const {
  // @@protoc_insertion_point(field_get:protoconf.Path.dir)
  return _internal_dir();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Path::set_dir(ArgT0&& arg0, ArgT... args) {
 
 dir_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protoconf.Path.dir)
}
inline std::string* Path::mutable_dir() {
  std::string* _s = _internal_mutable_dir();
  // @@protoc_insertion_point(field_mutable:protoconf.Path.dir)
  return _s;
}
inline const std::string& Path::_internal_dir() const {
  return dir_.Get();
}
inline void Path::_internal_set_dir(const std::string& value) {
  
  dir_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Path::_internal_mutable_dir() {
  
  return dir_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Path::release_dir() {
  // @@protoc_insertion_point(field_release:protoconf.Path.dir)
  return dir_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Path::set_allocated_dir(std::string* dir) {
  if (dir != nullptr) {
    
  } else {
    
  }
  dir_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dir,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (dir_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    dir_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protoconf.Path.dir)
}

// string name = 2;
inline void Path::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& Path::name() const {
  // @@protoc_insertion_point(field_get:protoconf.Path.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Path::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protoconf.Path.name)
}
inline std::string* Path::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:protoconf.Path.name)
  return _s;
}
inline const std::string& Path::_internal_name() const {
  return name_.Get();
}
inline void Path::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Path::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Path::release_name() {
  // @@protoc_insertion_point(field_release:protoconf.Path.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Path::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protoconf.Path.name)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protoconf

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_item_5fconf_2eproto
