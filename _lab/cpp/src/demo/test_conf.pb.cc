// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: test_conf.proto

#include "test_conf.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace protoconf {
constexpr ActivityConf_ActivityMapEntry_DoNotUse::ActivityConf_ActivityMapEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct ActivityConf_ActivityMapEntry_DoNotUseDefaultTypeInternal {
  constexpr ActivityConf_ActivityMapEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ActivityConf_ActivityMapEntry_DoNotUseDefaultTypeInternal() {}
  union {
    ActivityConf_ActivityMapEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ActivityConf_ActivityMapEntry_DoNotUseDefaultTypeInternal _ActivityConf_ActivityMapEntry_DoNotUse_default_instance_;
constexpr ActivityConf_Activity_ChapterMapEntry_DoNotUse::ActivityConf_Activity_ChapterMapEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct ActivityConf_Activity_ChapterMapEntry_DoNotUseDefaultTypeInternal {
  constexpr ActivityConf_Activity_ChapterMapEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ActivityConf_Activity_ChapterMapEntry_DoNotUseDefaultTypeInternal() {}
  union {
    ActivityConf_Activity_ChapterMapEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ActivityConf_Activity_ChapterMapEntry_DoNotUseDefaultTypeInternal _ActivityConf_Activity_ChapterMapEntry_DoNotUse_default_instance_;
constexpr ActivityConf_Activity_Chapter_SectionMapEntry_DoNotUse::ActivityConf_Activity_Chapter_SectionMapEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct ActivityConf_Activity_Chapter_SectionMapEntry_DoNotUseDefaultTypeInternal {
  constexpr ActivityConf_Activity_Chapter_SectionMapEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ActivityConf_Activity_Chapter_SectionMapEntry_DoNotUseDefaultTypeInternal() {}
  union {
    ActivityConf_Activity_Chapter_SectionMapEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ActivityConf_Activity_Chapter_SectionMapEntry_DoNotUseDefaultTypeInternal _ActivityConf_Activity_Chapter_SectionMapEntry_DoNotUse_default_instance_;
constexpr ActivityConf_Activity_Chapter::ActivityConf_Activity_Chapter(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : section_map_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , chapter_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , chapter_id_(0u)
  , award_id_(0u){}
struct ActivityConf_Activity_ChapterDefaultTypeInternal {
  constexpr ActivityConf_Activity_ChapterDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ActivityConf_Activity_ChapterDefaultTypeInternal() {}
  union {
    ActivityConf_Activity_Chapter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ActivityConf_Activity_ChapterDefaultTypeInternal _ActivityConf_Activity_Chapter_default_instance_;
constexpr ActivityConf_Activity::ActivityConf_Activity(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : chapter_map_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , activity_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , activity_id_(uint64_t{0u}){}
struct ActivityConf_ActivityDefaultTypeInternal {
  constexpr ActivityConf_ActivityDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ActivityConf_ActivityDefaultTypeInternal() {}
  union {
    ActivityConf_Activity _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ActivityConf_ActivityDefaultTypeInternal _ActivityConf_Activity_default_instance_;
constexpr ActivityConf_BonusMapEntry_DoNotUse::ActivityConf_BonusMapEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct ActivityConf_BonusMapEntry_DoNotUseDefaultTypeInternal {
  constexpr ActivityConf_BonusMapEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ActivityConf_BonusMapEntry_DoNotUseDefaultTypeInternal() {}
  union {
    ActivityConf_BonusMapEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ActivityConf_BonusMapEntry_DoNotUseDefaultTypeInternal _ActivityConf_BonusMapEntry_DoNotUse_default_instance_;
constexpr ActivityConf::ActivityConf(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : activity_map_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , bonus_map_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , theme_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , cost_item_id_(0){}
struct ActivityConfDefaultTypeInternal {
  constexpr ActivityConfDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ActivityConfDefaultTypeInternal() {}
  union {
    ActivityConf _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ActivityConfDefaultTypeInternal _ActivityConf_default_instance_;
constexpr Section_SectionRankMapEntry_DoNotUse::Section_SectionRankMapEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct Section_SectionRankMapEntry_DoNotUseDefaultTypeInternal {
  constexpr Section_SectionRankMapEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~Section_SectionRankMapEntry_DoNotUseDefaultTypeInternal() {}
  union {
    Section_SectionRankMapEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT Section_SectionRankMapEntry_DoNotUseDefaultTypeInternal _Section_SectionRankMapEntry_DoNotUse_default_instance_;
constexpr Section::Section(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : section_item_list_()
  , section_rank_map_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , section_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , section_id_(0u){}
struct SectionDefaultTypeInternal {
  constexpr SectionDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SectionDefaultTypeInternal() {}
  union {
    Section _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SectionDefaultTypeInternal _Section_default_instance_;
constexpr ChapterConf_ChapterMapEntry_DoNotUse::ChapterConf_ChapterMapEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct ChapterConf_ChapterMapEntry_DoNotUseDefaultTypeInternal {
  constexpr ChapterConf_ChapterMapEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ChapterConf_ChapterMapEntry_DoNotUseDefaultTypeInternal() {}
  union {
    ChapterConf_ChapterMapEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ChapterConf_ChapterMapEntry_DoNotUseDefaultTypeInternal _ChapterConf_ChapterMapEntry_DoNotUse_default_instance_;
constexpr ChapterConf_Chapter::ChapterConf_Chapter(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , id_(uint64_t{0u}){}
struct ChapterConf_ChapterDefaultTypeInternal {
  constexpr ChapterConf_ChapterDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ChapterConf_ChapterDefaultTypeInternal() {}
  union {
    ChapterConf_Chapter _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ChapterConf_ChapterDefaultTypeInternal _ChapterConf_Chapter_default_instance_;
constexpr ChapterConf::ChapterConf(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : chapter_map_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}){}
struct ChapterConfDefaultTypeInternal {
  constexpr ChapterConfDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ChapterConfDefaultTypeInternal() {}
  union {
    ChapterConf _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ChapterConfDefaultTypeInternal _ChapterConf_default_instance_;
constexpr ThemeConf_ThemeMapEntry_DoNotUse::ThemeConf_ThemeMapEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct ThemeConf_ThemeMapEntry_DoNotUseDefaultTypeInternal {
  constexpr ThemeConf_ThemeMapEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ThemeConf_ThemeMapEntry_DoNotUseDefaultTypeInternal() {}
  union {
    ThemeConf_ThemeMapEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ThemeConf_ThemeMapEntry_DoNotUseDefaultTypeInternal _ThemeConf_ThemeMapEntry_DoNotUse_default_instance_;
constexpr ThemeConf_Theme::ThemeConf_Theme(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , value_(uint64_t{0u}){}
struct ThemeConf_ThemeDefaultTypeInternal {
  constexpr ThemeConf_ThemeDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ThemeConf_ThemeDefaultTypeInternal() {}
  union {
    ThemeConf_Theme _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ThemeConf_ThemeDefaultTypeInternal _ThemeConf_Theme_default_instance_;
constexpr ThemeConf::ThemeConf(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : theme_map_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}){}
struct ThemeConfDefaultTypeInternal {
  constexpr ThemeConfDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ThemeConfDefaultTypeInternal() {}
  union {
    ThemeConf _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ThemeConfDefaultTypeInternal _ThemeConf_default_instance_;
}  // namespace protoconf
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_test_5fconf_2eproto[15];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_test_5fconf_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_test_5fconf_2eproto = nullptr;

const uint32_t TableStruct_test_5fconf_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::protoconf::ActivityConf_ActivityMapEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protoconf::ActivityConf_ActivityMapEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protoconf::ActivityConf_ActivityMapEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::protoconf::ActivityConf_ActivityMapEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::protoconf::ActivityConf_Activity_ChapterMapEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protoconf::ActivityConf_Activity_ChapterMapEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protoconf::ActivityConf_Activity_ChapterMapEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::protoconf::ActivityConf_Activity_ChapterMapEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::protoconf::ActivityConf_Activity_Chapter_SectionMapEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protoconf::ActivityConf_Activity_Chapter_SectionMapEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protoconf::ActivityConf_Activity_Chapter_SectionMapEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::protoconf::ActivityConf_Activity_Chapter_SectionMapEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protoconf::ActivityConf_Activity_Chapter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protoconf::ActivityConf_Activity_Chapter, chapter_id_),
  PROTOBUF_FIELD_OFFSET(::protoconf::ActivityConf_Activity_Chapter, chapter_name_),
  PROTOBUF_FIELD_OFFSET(::protoconf::ActivityConf_Activity_Chapter, award_id_),
  PROTOBUF_FIELD_OFFSET(::protoconf::ActivityConf_Activity_Chapter, section_map_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protoconf::ActivityConf_Activity, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protoconf::ActivityConf_Activity, activity_id_),
  PROTOBUF_FIELD_OFFSET(::protoconf::ActivityConf_Activity, activity_name_),
  PROTOBUF_FIELD_OFFSET(::protoconf::ActivityConf_Activity, chapter_map_),
  PROTOBUF_FIELD_OFFSET(::protoconf::ActivityConf_BonusMapEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protoconf::ActivityConf_BonusMapEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protoconf::ActivityConf_BonusMapEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::protoconf::ActivityConf_BonusMapEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protoconf::ActivityConf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protoconf::ActivityConf, activity_map_),
  PROTOBUF_FIELD_OFFSET(::protoconf::ActivityConf, bonus_map_),
  PROTOBUF_FIELD_OFFSET(::protoconf::ActivityConf, theme_name_),
  PROTOBUF_FIELD_OFFSET(::protoconf::ActivityConf, cost_item_id_),
  PROTOBUF_FIELD_OFFSET(::protoconf::Section_SectionRankMapEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protoconf::Section_SectionRankMapEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protoconf::Section_SectionRankMapEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::protoconf::Section_SectionRankMapEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protoconf::Section, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protoconf::Section, section_id_),
  PROTOBUF_FIELD_OFFSET(::protoconf::Section, section_name_),
  PROTOBUF_FIELD_OFFSET(::protoconf::Section, section_item_list_),
  PROTOBUF_FIELD_OFFSET(::protoconf::Section, section_rank_map_),
  PROTOBUF_FIELD_OFFSET(::protoconf::ChapterConf_ChapterMapEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protoconf::ChapterConf_ChapterMapEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protoconf::ChapterConf_ChapterMapEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::protoconf::ChapterConf_ChapterMapEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protoconf::ChapterConf_Chapter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protoconf::ChapterConf_Chapter, id_),
  PROTOBUF_FIELD_OFFSET(::protoconf::ChapterConf_Chapter, name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protoconf::ChapterConf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protoconf::ChapterConf, chapter_map_),
  PROTOBUF_FIELD_OFFSET(::protoconf::ThemeConf_ThemeMapEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protoconf::ThemeConf_ThemeMapEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protoconf::ThemeConf_ThemeMapEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::protoconf::ThemeConf_ThemeMapEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protoconf::ThemeConf_Theme, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protoconf::ThemeConf_Theme, name_),
  PROTOBUF_FIELD_OFFSET(::protoconf::ThemeConf_Theme, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protoconf::ThemeConf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protoconf::ThemeConf, theme_map_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, -1, sizeof(::protoconf::ActivityConf_ActivityMapEntry_DoNotUse)},
  { 10, 18, -1, sizeof(::protoconf::ActivityConf_Activity_ChapterMapEntry_DoNotUse)},
  { 20, 28, -1, sizeof(::protoconf::ActivityConf_Activity_Chapter_SectionMapEntry_DoNotUse)},
  { 30, -1, -1, sizeof(::protoconf::ActivityConf_Activity_Chapter)},
  { 40, -1, -1, sizeof(::protoconf::ActivityConf_Activity)},
  { 49, 57, -1, sizeof(::protoconf::ActivityConf_BonusMapEntry_DoNotUse)},
  { 59, -1, -1, sizeof(::protoconf::ActivityConf)},
  { 69, 77, -1, sizeof(::protoconf::Section_SectionRankMapEntry_DoNotUse)},
  { 79, -1, -1, sizeof(::protoconf::Section)},
  { 89, 97, -1, sizeof(::protoconf::ChapterConf_ChapterMapEntry_DoNotUse)},
  { 99, -1, -1, sizeof(::protoconf::ChapterConf_Chapter)},
  { 107, -1, -1, sizeof(::protoconf::ChapterConf)},
  { 114, 122, -1, sizeof(::protoconf::ThemeConf_ThemeMapEntry_DoNotUse)},
  { 124, -1, -1, sizeof(::protoconf::ThemeConf_Theme)},
  { 132, -1, -1, sizeof(::protoconf::ThemeConf)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protoconf::_ActivityConf_ActivityMapEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protoconf::_ActivityConf_Activity_ChapterMapEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protoconf::_ActivityConf_Activity_Chapter_SectionMapEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protoconf::_ActivityConf_Activity_Chapter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protoconf::_ActivityConf_Activity_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protoconf::_ActivityConf_BonusMapEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protoconf::_ActivityConf_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protoconf::_Section_SectionRankMapEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protoconf::_Section_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protoconf::_ChapterConf_ChapterMapEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protoconf::_ChapterConf_Chapter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protoconf::_ChapterConf_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protoconf::_ThemeConf_ThemeMapEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protoconf::_ThemeConf_Theme_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protoconf::_ThemeConf_default_instance_),
};

const char descriptor_table_protodef_test_5fconf_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017test_conf.proto\022\tprotoconf\032\036tableau/pr"
  "otobuf/tableau.proto\032\021common_conf.proto\""
  "\337\010\n\014ActivityConf\022R\n\014activity_map\030\001 \003(\0132("
  ".protoconf.ActivityConf.ActivityMapEntry"
  "B\022\202\265\030\016\032\nActivityID \001\022K\n\tbonus_map\030\002 \003(\0132"
  "%.protoconf.ActivityConf.BonusMapEntryB\021"
  "\202\265\030\r\n\005Bonus\032\002Id \002\0224\n\ntheme_name\030\003 \001(\tB \202"
  "\265\030\034\n\010ThemNamez\020\032\016ThemeConf.Name\0225\n\014cost_"
  "item_id\030\004 \001(\005B\037\202\265\030\033\n\nCostItemIDz\r\032\013ItemC"
  "onf.ID\032T\n\020ActivityMapEntry\022\013\n\003key\030\001 \001(\004\022"
  "/\n\005value\030\002 \001(\0132 .protoconf.ActivityConf."
  "Activity:\0028\001\032\330\004\n\010Activity\022%\n\013activity_id"
  "\030\001 \001(\004B\020\202\265\030\014\n\nActivityID\022)\n\ractivity_nam"
  "e\030\002 \001(\tB\022\202\265\030\016\n\014ActivityName\022X\n\013chapter_m"
  "ap\030\003 \003(\01320.protoconf.ActivityConf.Activi"
  "ty.ChapterMapEntryB\021\202\265\030\r\032\tChapterID \001\032[\n"
  "\017ChapterMapEntry\022\013\n\003key\030\001 \001(\r\0227\n\005value\030\002"
  " \001(\0132(.protoconf.ActivityConf.Activity.C"
  "hapter:\0028\001\032\302\002\n\007Chapter\0225\n\nchapter_id\030\001 \001"
  "(\rB!\202\265\030\035\n\tChapterIDz\020\032\016ChapterConf.ID\022\'\n"
  "\014chapter_name\030\002 \001(\tB\021\202\265\030\r\n\013ChapterName\022."
  "\n\010award_id\030\003 \001(\rB\034\202\265\030\030\n\007AwardIDz\r\032\013ItemC"
  "onf.ID\022`\n\013section_map\030\004 \003(\01328.protoconf."
  "ActivityConf.Activity.Chapter.SectionMap"
  "EntryB\021\202\265\030\r\032\tSectionID \001\032E\n\017SectionMapEn"
  "try\022\013\n\003key\030\001 \001(\r\022!\n\005value\030\002 \001(\0132\022.protoc"
  "onf.Section:\0028\001\032@\n\rBonusMapEntry\022\013\n\003key\030"
  "\001 \001(\r\022\036\n\005value\030\002 \001(\0132\017.protoconf.Item:\0028"
  "\001:N\202\265\030J\n\010Activity\220\003\001\232\003\tChapterID\232\003\030Chapt"
  "erName@NamedChapter\232\003\023SectionItemId@Awar"
  "d\"\231\002\n\007Section\022#\n\nsection_id\030\001 \001(\rB\017\202\265\030\013\n"
  "\tSectionID\022\'\n\014section_name\030\002 \001(\tB\021\202\265\030\r\n\013"
  "SectionName\022\?\n\021section_item_list\030\003 \003(\0132\017"
  ".protoconf.ItemB\023\202\265\030\017\n\013SectionItem \002\022H\n\020"
  "section_rank_map\030\004 \003(\0132&.protoconf.Secti"
  "on.SectionRankMapEntryB\006\202\265\030\002 \001\0325\n\023Sectio"
  "nRankMapEntry\022\013\n\003key\030\001 \001(\r\022\r\n\005value\030\002 \001("
  "\005:\0028\001\"\367\001\n\013ChapterConf\022G\n\013chapter_map\030\001 \003"
  "(\0132&.protoconf.ChapterConf.ChapterMapEnt"
  "ryB\n\202\265\030\006\032\002ID \001\032Q\n\017ChapterMapEntry\022\013\n\003key"
  "\030\001 \001(\004\022-\n\005value\030\002 \001(\0132\036.protoconf.Chapte"
  "rConf.Chapter:\0028\001\0329\n\007Chapter\022\024\n\002id\030\001 \001(\004"
  "B\010\202\265\030\004\n\002ID\022\030\n\004name\030\002 \001(\tB\n\202\265\030\006\n\004Name:\021\202\265"
  "\030\r\n\013ChapterConf\"\355\001\n\tThemeConf\022C\n\ttheme_m"
  "ap\030\001 \003(\0132\".protoconf.ThemeConf.ThemeMapE"
  "ntryB\014\202\265\030\010\032\004Name \001\032K\n\rThemeMapEntry\022\013\n\003k"
  "ey\030\001 \001(\t\022)\n\005value\030\002 \001(\0132\032.protoconf.Them"
  "eConf.Theme:\0028\001\032=\n\005Theme\022\030\n\004name\030\002 \001(\tB\n"
  "\202\265\030\006\n\004Name\022\032\n\005value\030\001 \001(\004B\013\202\265\030\007\n\005Value:\017"
  "\202\265\030\013\n\tThemeConfBMZ<github.com/tableauio/"
  "loader/test/go-tableau-loader/protoconf\202"
  "\265\030\013\n\tTest.xlsxb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_test_5fconf_2eproto_deps[2] = {
  &::descriptor_table_common_5fconf_2eproto,
  &::descriptor_table_tableau_2fprotobuf_2ftableau_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_test_5fconf_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_test_5fconf_2eproto = {
  false, false, 2062, descriptor_table_protodef_test_5fconf_2eproto, "test_conf.proto", 
  &descriptor_table_test_5fconf_2eproto_once, descriptor_table_test_5fconf_2eproto_deps, 2, 15,
  schemas, file_default_instances, TableStruct_test_5fconf_2eproto::offsets,
  file_level_metadata_test_5fconf_2eproto, file_level_enum_descriptors_test_5fconf_2eproto, file_level_service_descriptors_test_5fconf_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_test_5fconf_2eproto_getter() {
  return &descriptor_table_test_5fconf_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_test_5fconf_2eproto(&descriptor_table_test_5fconf_2eproto);
namespace protoconf {

// ===================================================================

ActivityConf_ActivityMapEntry_DoNotUse::ActivityConf_ActivityMapEntry_DoNotUse() {}
ActivityConf_ActivityMapEntry_DoNotUse::ActivityConf_ActivityMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ActivityConf_ActivityMapEntry_DoNotUse::MergeFrom(const ActivityConf_ActivityMapEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ActivityConf_ActivityMapEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_test_5fconf_2eproto_getter, &descriptor_table_test_5fconf_2eproto_once,
      file_level_metadata_test_5fconf_2eproto[0]);
}

// ===================================================================

ActivityConf_Activity_ChapterMapEntry_DoNotUse::ActivityConf_Activity_ChapterMapEntry_DoNotUse() {}
ActivityConf_Activity_ChapterMapEntry_DoNotUse::ActivityConf_Activity_ChapterMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ActivityConf_Activity_ChapterMapEntry_DoNotUse::MergeFrom(const ActivityConf_Activity_ChapterMapEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ActivityConf_Activity_ChapterMapEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_test_5fconf_2eproto_getter, &descriptor_table_test_5fconf_2eproto_once,
      file_level_metadata_test_5fconf_2eproto[1]);
}

// ===================================================================

ActivityConf_Activity_Chapter_SectionMapEntry_DoNotUse::ActivityConf_Activity_Chapter_SectionMapEntry_DoNotUse() {}
ActivityConf_Activity_Chapter_SectionMapEntry_DoNotUse::ActivityConf_Activity_Chapter_SectionMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ActivityConf_Activity_Chapter_SectionMapEntry_DoNotUse::MergeFrom(const ActivityConf_Activity_Chapter_SectionMapEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ActivityConf_Activity_Chapter_SectionMapEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_test_5fconf_2eproto_getter, &descriptor_table_test_5fconf_2eproto_once,
      file_level_metadata_test_5fconf_2eproto[2]);
}

// ===================================================================

class ActivityConf_Activity_Chapter::_Internal {
 public:
};

ActivityConf_Activity_Chapter::ActivityConf_Activity_Chapter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  section_map_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protoconf.ActivityConf.Activity.Chapter)
}
ActivityConf_Activity_Chapter::ActivityConf_Activity_Chapter(const ActivityConf_Activity_Chapter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  section_map_.MergeFrom(from.section_map_);
  chapter_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    chapter_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_chapter_name().empty()) {
    chapter_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_chapter_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&chapter_id_, &from.chapter_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&award_id_) -
    reinterpret_cast<char*>(&chapter_id_)) + sizeof(award_id_));
  // @@protoc_insertion_point(copy_constructor:protoconf.ActivityConf.Activity.Chapter)
}

inline void ActivityConf_Activity_Chapter::SharedCtor() {
chapter_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  chapter_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&chapter_id_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&award_id_) -
    reinterpret_cast<char*>(&chapter_id_)) + sizeof(award_id_));
}

ActivityConf_Activity_Chapter::~ActivityConf_Activity_Chapter() {
  // @@protoc_insertion_point(destructor:protoconf.ActivityConf.Activity.Chapter)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ActivityConf_Activity_Chapter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  chapter_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ActivityConf_Activity_Chapter::ArenaDtor(void* object) {
  ActivityConf_Activity_Chapter* _this = reinterpret_cast< ActivityConf_Activity_Chapter* >(object);
  (void)_this;
  _this->section_map_. ~MapField();
}
inline void ActivityConf_Activity_Chapter::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &ActivityConf_Activity_Chapter::ArenaDtor);
  }
}
void ActivityConf_Activity_Chapter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ActivityConf_Activity_Chapter::Clear() {
// @@protoc_insertion_point(message_clear_start:protoconf.ActivityConf.Activity.Chapter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  section_map_.Clear();
  chapter_name_.ClearToEmpty();
  ::memset(&chapter_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&award_id_) -
      reinterpret_cast<char*>(&chapter_id_)) + sizeof(award_id_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ActivityConf_Activity_Chapter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 chapter_id = 1 [(.tableau.field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          chapter_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string chapter_name = 2 [(.tableau.field) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_chapter_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protoconf.ActivityConf.Activity.Chapter.chapter_name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 award_id = 3 [(.tableau.field) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          award_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<uint32, .protoconf.Section> section_map = 4 [(.tableau.field) = {
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&section_map_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ActivityConf_Activity_Chapter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protoconf.ActivityConf.Activity.Chapter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 chapter_id = 1 [(.tableau.field) = {
  if (this->_internal_chapter_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_chapter_id(), target);
  }

  // string chapter_name = 2 [(.tableau.field) = {
  if (!this->_internal_chapter_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_chapter_name().data(), static_cast<int>(this->_internal_chapter_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protoconf.ActivityConf.Activity.Chapter.chapter_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_chapter_name(), target);
  }

  // uint32 award_id = 3 [(.tableau.field) = {
  if (this->_internal_award_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_award_id(), target);
  }

  // map<uint32, .protoconf.Section> section_map = 4 [(.tableau.field) = {
  if (!this->_internal_section_map().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::protoconf::Section >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< uint32_t, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_section_map().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_section_map().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::protoconf::Section >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::protoconf::Section >::const_iterator
          it = this->_internal_section_map().begin();
          it != this->_internal_section_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = ActivityConf_Activity_Chapter_SectionMapEntry_DoNotUse::Funcs::InternalSerialize(4, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::protoconf::Section >::const_iterator
          it = this->_internal_section_map().begin();
          it != this->_internal_section_map().end(); ++it) {
        target = ActivityConf_Activity_Chapter_SectionMapEntry_DoNotUse::Funcs::InternalSerialize(4, it->first, it->second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protoconf.ActivityConf.Activity.Chapter)
  return target;
}

size_t ActivityConf_Activity_Chapter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protoconf.ActivityConf.Activity.Chapter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<uint32, .protoconf.Section> section_map = 4 [(.tableau.field) = {
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_section_map_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::protoconf::Section >::const_iterator
      it = this->_internal_section_map().begin();
      it != this->_internal_section_map().end(); ++it) {
    total_size += ActivityConf_Activity_Chapter_SectionMapEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string chapter_name = 2 [(.tableau.field) = {
  if (!this->_internal_chapter_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_chapter_name());
  }

  // uint32 chapter_id = 1 [(.tableau.field) = {
  if (this->_internal_chapter_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_chapter_id());
  }

  // uint32 award_id = 3 [(.tableau.field) = {
  if (this->_internal_award_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_award_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ActivityConf_Activity_Chapter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ActivityConf_Activity_Chapter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ActivityConf_Activity_Chapter::GetClassData() const { return &_class_data_; }

void ActivityConf_Activity_Chapter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ActivityConf_Activity_Chapter *>(to)->MergeFrom(
      static_cast<const ActivityConf_Activity_Chapter &>(from));
}


void ActivityConf_Activity_Chapter::MergeFrom(const ActivityConf_Activity_Chapter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protoconf.ActivityConf.Activity.Chapter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  section_map_.MergeFrom(from.section_map_);
  if (!from._internal_chapter_name().empty()) {
    _internal_set_chapter_name(from._internal_chapter_name());
  }
  if (from._internal_chapter_id() != 0) {
    _internal_set_chapter_id(from._internal_chapter_id());
  }
  if (from._internal_award_id() != 0) {
    _internal_set_award_id(from._internal_award_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ActivityConf_Activity_Chapter::CopyFrom(const ActivityConf_Activity_Chapter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protoconf.ActivityConf.Activity.Chapter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivityConf_Activity_Chapter::IsInitialized() const {
  return true;
}

void ActivityConf_Activity_Chapter::InternalSwap(ActivityConf_Activity_Chapter* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  section_map_.InternalSwap(&other->section_map_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &chapter_name_, lhs_arena,
      &other->chapter_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ActivityConf_Activity_Chapter, award_id_)
      + sizeof(ActivityConf_Activity_Chapter::award_id_)
      - PROTOBUF_FIELD_OFFSET(ActivityConf_Activity_Chapter, chapter_id_)>(
          reinterpret_cast<char*>(&chapter_id_),
          reinterpret_cast<char*>(&other->chapter_id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ActivityConf_Activity_Chapter::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_test_5fconf_2eproto_getter, &descriptor_table_test_5fconf_2eproto_once,
      file_level_metadata_test_5fconf_2eproto[3]);
}

// ===================================================================

class ActivityConf_Activity::_Internal {
 public:
};

ActivityConf_Activity::ActivityConf_Activity(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  chapter_map_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protoconf.ActivityConf.Activity)
}
ActivityConf_Activity::ActivityConf_Activity(const ActivityConf_Activity& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  chapter_map_.MergeFrom(from.chapter_map_);
  activity_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    activity_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_activity_name().empty()) {
    activity_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_activity_name(), 
      GetArenaForAllocation());
  }
  activity_id_ = from.activity_id_;
  // @@protoc_insertion_point(copy_constructor:protoconf.ActivityConf.Activity)
}

inline void ActivityConf_Activity::SharedCtor() {
activity_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  activity_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
activity_id_ = uint64_t{0u};
}

ActivityConf_Activity::~ActivityConf_Activity() {
  // @@protoc_insertion_point(destructor:protoconf.ActivityConf.Activity)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ActivityConf_Activity::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  activity_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ActivityConf_Activity::ArenaDtor(void* object) {
  ActivityConf_Activity* _this = reinterpret_cast< ActivityConf_Activity* >(object);
  (void)_this;
  _this->chapter_map_. ~MapField();
}
inline void ActivityConf_Activity::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &ActivityConf_Activity::ArenaDtor);
  }
}
void ActivityConf_Activity::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ActivityConf_Activity::Clear() {
// @@protoc_insertion_point(message_clear_start:protoconf.ActivityConf.Activity)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  chapter_map_.Clear();
  activity_name_.ClearToEmpty();
  activity_id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ActivityConf_Activity::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 activity_id = 1 [(.tableau.field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          activity_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string activity_name = 2 [(.tableau.field) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_activity_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protoconf.ActivityConf.Activity.activity_name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<uint32, .protoconf.ActivityConf.Activity.Chapter> chapter_map = 3 [(.tableau.field) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&chapter_map_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ActivityConf_Activity::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protoconf.ActivityConf.Activity)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 activity_id = 1 [(.tableau.field) = {
  if (this->_internal_activity_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_activity_id(), target);
  }

  // string activity_name = 2 [(.tableau.field) = {
  if (!this->_internal_activity_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_activity_name().data(), static_cast<int>(this->_internal_activity_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protoconf.ActivityConf.Activity.activity_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_activity_name(), target);
  }

  // map<uint32, .protoconf.ActivityConf.Activity.Chapter> chapter_map = 3 [(.tableau.field) = {
  if (!this->_internal_chapter_map().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::protoconf::ActivityConf_Activity_Chapter >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< uint32_t, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_chapter_map().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_chapter_map().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::protoconf::ActivityConf_Activity_Chapter >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::protoconf::ActivityConf_Activity_Chapter >::const_iterator
          it = this->_internal_chapter_map().begin();
          it != this->_internal_chapter_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = ActivityConf_Activity_ChapterMapEntry_DoNotUse::Funcs::InternalSerialize(3, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::protoconf::ActivityConf_Activity_Chapter >::const_iterator
          it = this->_internal_chapter_map().begin();
          it != this->_internal_chapter_map().end(); ++it) {
        target = ActivityConf_Activity_ChapterMapEntry_DoNotUse::Funcs::InternalSerialize(3, it->first, it->second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protoconf.ActivityConf.Activity)
  return target;
}

size_t ActivityConf_Activity::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protoconf.ActivityConf.Activity)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<uint32, .protoconf.ActivityConf.Activity.Chapter> chapter_map = 3 [(.tableau.field) = {
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_chapter_map_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::protoconf::ActivityConf_Activity_Chapter >::const_iterator
      it = this->_internal_chapter_map().begin();
      it != this->_internal_chapter_map().end(); ++it) {
    total_size += ActivityConf_Activity_ChapterMapEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string activity_name = 2 [(.tableau.field) = {
  if (!this->_internal_activity_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_activity_name());
  }

  // uint64 activity_id = 1 [(.tableau.field) = {
  if (this->_internal_activity_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_activity_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ActivityConf_Activity::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ActivityConf_Activity::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ActivityConf_Activity::GetClassData() const { return &_class_data_; }

void ActivityConf_Activity::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ActivityConf_Activity *>(to)->MergeFrom(
      static_cast<const ActivityConf_Activity &>(from));
}


void ActivityConf_Activity::MergeFrom(const ActivityConf_Activity& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protoconf.ActivityConf.Activity)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  chapter_map_.MergeFrom(from.chapter_map_);
  if (!from._internal_activity_name().empty()) {
    _internal_set_activity_name(from._internal_activity_name());
  }
  if (from._internal_activity_id() != 0) {
    _internal_set_activity_id(from._internal_activity_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ActivityConf_Activity::CopyFrom(const ActivityConf_Activity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protoconf.ActivityConf.Activity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivityConf_Activity::IsInitialized() const {
  return true;
}

void ActivityConf_Activity::InternalSwap(ActivityConf_Activity* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  chapter_map_.InternalSwap(&other->chapter_map_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &activity_name_, lhs_arena,
      &other->activity_name_, rhs_arena
  );
  swap(activity_id_, other->activity_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ActivityConf_Activity::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_test_5fconf_2eproto_getter, &descriptor_table_test_5fconf_2eproto_once,
      file_level_metadata_test_5fconf_2eproto[4]);
}

// ===================================================================

ActivityConf_BonusMapEntry_DoNotUse::ActivityConf_BonusMapEntry_DoNotUse() {}
ActivityConf_BonusMapEntry_DoNotUse::ActivityConf_BonusMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ActivityConf_BonusMapEntry_DoNotUse::MergeFrom(const ActivityConf_BonusMapEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ActivityConf_BonusMapEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_test_5fconf_2eproto_getter, &descriptor_table_test_5fconf_2eproto_once,
      file_level_metadata_test_5fconf_2eproto[5]);
}

// ===================================================================

class ActivityConf::_Internal {
 public:
};

void ActivityConf::clear_bonus_map() {
  bonus_map_.Clear();
}
ActivityConf::ActivityConf(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  activity_map_(arena),
  bonus_map_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protoconf.ActivityConf)
}
ActivityConf::ActivityConf(const ActivityConf& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  activity_map_.MergeFrom(from.activity_map_);
  bonus_map_.MergeFrom(from.bonus_map_);
  theme_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    theme_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_theme_name().empty()) {
    theme_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_theme_name(), 
      GetArenaForAllocation());
  }
  cost_item_id_ = from.cost_item_id_;
  // @@protoc_insertion_point(copy_constructor:protoconf.ActivityConf)
}

inline void ActivityConf::SharedCtor() {
theme_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  theme_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
cost_item_id_ = 0;
}

ActivityConf::~ActivityConf() {
  // @@protoc_insertion_point(destructor:protoconf.ActivityConf)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ActivityConf::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  theme_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ActivityConf::ArenaDtor(void* object) {
  ActivityConf* _this = reinterpret_cast< ActivityConf* >(object);
  (void)_this;
  _this->activity_map_. ~MapField();
  _this->bonus_map_. ~MapField();
}
inline void ActivityConf::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &ActivityConf::ArenaDtor);
  }
}
void ActivityConf::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ActivityConf::Clear() {
// @@protoc_insertion_point(message_clear_start:protoconf.ActivityConf)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  activity_map_.Clear();
  bonus_map_.Clear();
  theme_name_.ClearToEmpty();
  cost_item_id_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ActivityConf::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<uint64, .protoconf.ActivityConf.Activity> activity_map = 1 [(.tableau.field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&activity_map_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<uint32, .protoconf.Item> bonus_map = 2 [(.tableau.field) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&bonus_map_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      // string theme_name = 3 [(.tableau.field) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_theme_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protoconf.ActivityConf.theme_name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 cost_item_id = 4 [(.tableau.field) = {
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          cost_item_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ActivityConf::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protoconf.ActivityConf)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // map<uint64, .protoconf.ActivityConf.Activity> activity_map = 1 [(.tableau.field) = {
  if (!this->_internal_activity_map().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, ::protoconf::ActivityConf_Activity >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< uint64_t, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_activity_map().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_activity_map().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, ::protoconf::ActivityConf_Activity >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< uint64_t, ::protoconf::ActivityConf_Activity >::const_iterator
          it = this->_internal_activity_map().begin();
          it != this->_internal_activity_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = ActivityConf_ActivityMapEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< uint64_t, ::protoconf::ActivityConf_Activity >::const_iterator
          it = this->_internal_activity_map().begin();
          it != this->_internal_activity_map().end(); ++it) {
        target = ActivityConf_ActivityMapEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
      }
    }
  }

  // map<uint32, .protoconf.Item> bonus_map = 2 [(.tableau.field) = {
  if (!this->_internal_bonus_map().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::protoconf::Item >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< uint32_t, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_bonus_map().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_bonus_map().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::protoconf::Item >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::protoconf::Item >::const_iterator
          it = this->_internal_bonus_map().begin();
          it != this->_internal_bonus_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = ActivityConf_BonusMapEntry_DoNotUse::Funcs::InternalSerialize(2, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::protoconf::Item >::const_iterator
          it = this->_internal_bonus_map().begin();
          it != this->_internal_bonus_map().end(); ++it) {
        target = ActivityConf_BonusMapEntry_DoNotUse::Funcs::InternalSerialize(2, it->first, it->second, target, stream);
      }
    }
  }

  // string theme_name = 3 [(.tableau.field) = {
  if (!this->_internal_theme_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_theme_name().data(), static_cast<int>(this->_internal_theme_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protoconf.ActivityConf.theme_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_theme_name(), target);
  }

  // int32 cost_item_id = 4 [(.tableau.field) = {
  if (this->_internal_cost_item_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_cost_item_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protoconf.ActivityConf)
  return target;
}

size_t ActivityConf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protoconf.ActivityConf)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<uint64, .protoconf.ActivityConf.Activity> activity_map = 1 [(.tableau.field) = {
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_activity_map_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< uint64_t, ::protoconf::ActivityConf_Activity >::const_iterator
      it = this->_internal_activity_map().begin();
      it != this->_internal_activity_map().end(); ++it) {
    total_size += ActivityConf_ActivityMapEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // map<uint32, .protoconf.Item> bonus_map = 2 [(.tableau.field) = {
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_bonus_map_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::protoconf::Item >::const_iterator
      it = this->_internal_bonus_map().begin();
      it != this->_internal_bonus_map().end(); ++it) {
    total_size += ActivityConf_BonusMapEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string theme_name = 3 [(.tableau.field) = {
  if (!this->_internal_theme_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_theme_name());
  }

  // int32 cost_item_id = 4 [(.tableau.field) = {
  if (this->_internal_cost_item_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_cost_item_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ActivityConf::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ActivityConf::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ActivityConf::GetClassData() const { return &_class_data_; }

void ActivityConf::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ActivityConf *>(to)->MergeFrom(
      static_cast<const ActivityConf &>(from));
}


void ActivityConf::MergeFrom(const ActivityConf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protoconf.ActivityConf)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  activity_map_.MergeFrom(from.activity_map_);
  bonus_map_.MergeFrom(from.bonus_map_);
  if (!from._internal_theme_name().empty()) {
    _internal_set_theme_name(from._internal_theme_name());
  }
  if (from._internal_cost_item_id() != 0) {
    _internal_set_cost_item_id(from._internal_cost_item_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ActivityConf::CopyFrom(const ActivityConf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protoconf.ActivityConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivityConf::IsInitialized() const {
  return true;
}

void ActivityConf::InternalSwap(ActivityConf* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  activity_map_.InternalSwap(&other->activity_map_);
  bonus_map_.InternalSwap(&other->bonus_map_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &theme_name_, lhs_arena,
      &other->theme_name_, rhs_arena
  );
  swap(cost_item_id_, other->cost_item_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ActivityConf::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_test_5fconf_2eproto_getter, &descriptor_table_test_5fconf_2eproto_once,
      file_level_metadata_test_5fconf_2eproto[6]);
}

// ===================================================================

Section_SectionRankMapEntry_DoNotUse::Section_SectionRankMapEntry_DoNotUse() {}
Section_SectionRankMapEntry_DoNotUse::Section_SectionRankMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void Section_SectionRankMapEntry_DoNotUse::MergeFrom(const Section_SectionRankMapEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata Section_SectionRankMapEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_test_5fconf_2eproto_getter, &descriptor_table_test_5fconf_2eproto_once,
      file_level_metadata_test_5fconf_2eproto[7]);
}

// ===================================================================

class Section::_Internal {
 public:
};

void Section::clear_section_item_list() {
  section_item_list_.Clear();
}
Section::Section(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  section_item_list_(arena),
  section_rank_map_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protoconf.Section)
}
Section::Section(const Section& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      section_item_list_(from.section_item_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  section_rank_map_.MergeFrom(from.section_rank_map_);
  section_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    section_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_section_name().empty()) {
    section_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_section_name(), 
      GetArenaForAllocation());
  }
  section_id_ = from.section_id_;
  // @@protoc_insertion_point(copy_constructor:protoconf.Section)
}

inline void Section::SharedCtor() {
section_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  section_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
section_id_ = 0u;
}

Section::~Section() {
  // @@protoc_insertion_point(destructor:protoconf.Section)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Section::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  section_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Section::ArenaDtor(void* object) {
  Section* _this = reinterpret_cast< Section* >(object);
  (void)_this;
  _this->section_rank_map_. ~MapField();
}
inline void Section::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &Section::ArenaDtor);
  }
}
void Section::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Section::Clear() {
// @@protoc_insertion_point(message_clear_start:protoconf.Section)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  section_item_list_.Clear();
  section_rank_map_.Clear();
  section_name_.ClearToEmpty();
  section_id_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Section::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 section_id = 1 [(.tableau.field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          section_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string section_name = 2 [(.tableau.field) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_section_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protoconf.Section.section_name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .protoconf.Item section_item_list = 3 [(.tableau.field) = {
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_section_item_list(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // map<uint32, int32> section_rank_map = 4 [(.tableau.field) = {
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&section_rank_map_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Section::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protoconf.Section)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 section_id = 1 [(.tableau.field) = {
  if (this->_internal_section_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_section_id(), target);
  }

  // string section_name = 2 [(.tableau.field) = {
  if (!this->_internal_section_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_section_name().data(), static_cast<int>(this->_internal_section_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protoconf.Section.section_name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_section_name(), target);
  }

  // repeated .protoconf.Item section_item_list = 3 [(.tableau.field) = {
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_section_item_list_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_section_item_list(i), target, stream);
  }

  // map<uint32, int32> section_rank_map = 4 [(.tableau.field) = {
  if (!this->_internal_section_rank_map().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, int32_t >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< uint32_t, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_section_rank_map().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_section_rank_map().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, int32_t >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< uint32_t, int32_t >::const_iterator
          it = this->_internal_section_rank_map().begin();
          it != this->_internal_section_rank_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = Section_SectionRankMapEntry_DoNotUse::Funcs::InternalSerialize(4, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< uint32_t, int32_t >::const_iterator
          it = this->_internal_section_rank_map().begin();
          it != this->_internal_section_rank_map().end(); ++it) {
        target = Section_SectionRankMapEntry_DoNotUse::Funcs::InternalSerialize(4, it->first, it->second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protoconf.Section)
  return target;
}

size_t Section::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protoconf.Section)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .protoconf.Item section_item_list = 3 [(.tableau.field) = {
  total_size += 1UL * this->_internal_section_item_list_size();
  for (const auto& msg : this->section_item_list_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // map<uint32, int32> section_rank_map = 4 [(.tableau.field) = {
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_section_rank_map_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< uint32_t, int32_t >::const_iterator
      it = this->_internal_section_rank_map().begin();
      it != this->_internal_section_rank_map().end(); ++it) {
    total_size += Section_SectionRankMapEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string section_name = 2 [(.tableau.field) = {
  if (!this->_internal_section_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_section_name());
  }

  // uint32 section_id = 1 [(.tableau.field) = {
  if (this->_internal_section_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_section_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Section::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Section::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Section::GetClassData() const { return &_class_data_; }

void Section::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Section *>(to)->MergeFrom(
      static_cast<const Section &>(from));
}


void Section::MergeFrom(const Section& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protoconf.Section)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  section_item_list_.MergeFrom(from.section_item_list_);
  section_rank_map_.MergeFrom(from.section_rank_map_);
  if (!from._internal_section_name().empty()) {
    _internal_set_section_name(from._internal_section_name());
  }
  if (from._internal_section_id() != 0) {
    _internal_set_section_id(from._internal_section_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Section::CopyFrom(const Section& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protoconf.Section)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Section::IsInitialized() const {
  return true;
}

void Section::InternalSwap(Section* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  section_item_list_.InternalSwap(&other->section_item_list_);
  section_rank_map_.InternalSwap(&other->section_rank_map_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &section_name_, lhs_arena,
      &other->section_name_, rhs_arena
  );
  swap(section_id_, other->section_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Section::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_test_5fconf_2eproto_getter, &descriptor_table_test_5fconf_2eproto_once,
      file_level_metadata_test_5fconf_2eproto[8]);
}

// ===================================================================

ChapterConf_ChapterMapEntry_DoNotUse::ChapterConf_ChapterMapEntry_DoNotUse() {}
ChapterConf_ChapterMapEntry_DoNotUse::ChapterConf_ChapterMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ChapterConf_ChapterMapEntry_DoNotUse::MergeFrom(const ChapterConf_ChapterMapEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ChapterConf_ChapterMapEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_test_5fconf_2eproto_getter, &descriptor_table_test_5fconf_2eproto_once,
      file_level_metadata_test_5fconf_2eproto[9]);
}

// ===================================================================

class ChapterConf_Chapter::_Internal {
 public:
};

ChapterConf_Chapter::ChapterConf_Chapter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protoconf.ChapterConf.Chapter)
}
ChapterConf_Chapter::ChapterConf_Chapter(const ChapterConf_Chapter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:protoconf.ChapterConf.Chapter)
}

inline void ChapterConf_Chapter::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
id_ = uint64_t{0u};
}

ChapterConf_Chapter::~ChapterConf_Chapter() {
  // @@protoc_insertion_point(destructor:protoconf.ChapterConf.Chapter)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ChapterConf_Chapter::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ChapterConf_Chapter::ArenaDtor(void* object) {
  ChapterConf_Chapter* _this = reinterpret_cast< ChapterConf_Chapter* >(object);
  (void)_this;
}
void ChapterConf_Chapter::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ChapterConf_Chapter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChapterConf_Chapter::Clear() {
// @@protoc_insertion_point(message_clear_start:protoconf.ChapterConf.Chapter)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  id_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChapterConf_Chapter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 id = 1 [(.tableau.field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 2 [(.tableau.field) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protoconf.ChapterConf.Chapter.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChapterConf_Chapter::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protoconf.ChapterConf.Chapter)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 id = 1 [(.tableau.field) = {
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_id(), target);
  }

  // string name = 2 [(.tableau.field) = {
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protoconf.ChapterConf.Chapter.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protoconf.ChapterConf.Chapter)
  return target;
}

size_t ChapterConf_Chapter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protoconf.ChapterConf.Chapter)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2 [(.tableau.field) = {
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // uint64 id = 1 [(.tableau.field) = {
  if (this->_internal_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_id());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChapterConf_Chapter::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ChapterConf_Chapter::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChapterConf_Chapter::GetClassData() const { return &_class_data_; }

void ChapterConf_Chapter::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ChapterConf_Chapter *>(to)->MergeFrom(
      static_cast<const ChapterConf_Chapter &>(from));
}


void ChapterConf_Chapter::MergeFrom(const ChapterConf_Chapter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protoconf.ChapterConf.Chapter)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChapterConf_Chapter::CopyFrom(const ChapterConf_Chapter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protoconf.ChapterConf.Chapter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChapterConf_Chapter::IsInitialized() const {
  return true;
}

void ChapterConf_Chapter::InternalSwap(ChapterConf_Chapter* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  swap(id_, other->id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChapterConf_Chapter::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_test_5fconf_2eproto_getter, &descriptor_table_test_5fconf_2eproto_once,
      file_level_metadata_test_5fconf_2eproto[10]);
}

// ===================================================================

class ChapterConf::_Internal {
 public:
};

ChapterConf::ChapterConf(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  chapter_map_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protoconf.ChapterConf)
}
ChapterConf::ChapterConf(const ChapterConf& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  chapter_map_.MergeFrom(from.chapter_map_);
  // @@protoc_insertion_point(copy_constructor:protoconf.ChapterConf)
}

inline void ChapterConf::SharedCtor() {
}

ChapterConf::~ChapterConf() {
  // @@protoc_insertion_point(destructor:protoconf.ChapterConf)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ChapterConf::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ChapterConf::ArenaDtor(void* object) {
  ChapterConf* _this = reinterpret_cast< ChapterConf* >(object);
  (void)_this;
  _this->chapter_map_. ~MapField();
}
inline void ChapterConf::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &ChapterConf::ArenaDtor);
  }
}
void ChapterConf::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ChapterConf::Clear() {
// @@protoc_insertion_point(message_clear_start:protoconf.ChapterConf)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  chapter_map_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ChapterConf::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<uint64, .protoconf.ChapterConf.Chapter> chapter_map = 1 [(.tableau.field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&chapter_map_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ChapterConf::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protoconf.ChapterConf)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // map<uint64, .protoconf.ChapterConf.Chapter> chapter_map = 1 [(.tableau.field) = {
  if (!this->_internal_chapter_map().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, ::protoconf::ChapterConf_Chapter >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< uint64_t, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_chapter_map().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_chapter_map().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, ::protoconf::ChapterConf_Chapter >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< uint64_t, ::protoconf::ChapterConf_Chapter >::const_iterator
          it = this->_internal_chapter_map().begin();
          it != this->_internal_chapter_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = ChapterConf_ChapterMapEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< uint64_t, ::protoconf::ChapterConf_Chapter >::const_iterator
          it = this->_internal_chapter_map().begin();
          it != this->_internal_chapter_map().end(); ++it) {
        target = ChapterConf_ChapterMapEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protoconf.ChapterConf)
  return target;
}

size_t ChapterConf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protoconf.ChapterConf)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<uint64, .protoconf.ChapterConf.Chapter> chapter_map = 1 [(.tableau.field) = {
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_chapter_map_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< uint64_t, ::protoconf::ChapterConf_Chapter >::const_iterator
      it = this->_internal_chapter_map().begin();
      it != this->_internal_chapter_map().end(); ++it) {
    total_size += ChapterConf_ChapterMapEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ChapterConf::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ChapterConf::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ChapterConf::GetClassData() const { return &_class_data_; }

void ChapterConf::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ChapterConf *>(to)->MergeFrom(
      static_cast<const ChapterConf &>(from));
}


void ChapterConf::MergeFrom(const ChapterConf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protoconf.ChapterConf)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  chapter_map_.MergeFrom(from.chapter_map_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ChapterConf::CopyFrom(const ChapterConf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protoconf.ChapterConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChapterConf::IsInitialized() const {
  return true;
}

void ChapterConf::InternalSwap(ChapterConf* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  chapter_map_.InternalSwap(&other->chapter_map_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ChapterConf::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_test_5fconf_2eproto_getter, &descriptor_table_test_5fconf_2eproto_once,
      file_level_metadata_test_5fconf_2eproto[11]);
}

// ===================================================================

ThemeConf_ThemeMapEntry_DoNotUse::ThemeConf_ThemeMapEntry_DoNotUse() {}
ThemeConf_ThemeMapEntry_DoNotUse::ThemeConf_ThemeMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ThemeConf_ThemeMapEntry_DoNotUse::MergeFrom(const ThemeConf_ThemeMapEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ThemeConf_ThemeMapEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_test_5fconf_2eproto_getter, &descriptor_table_test_5fconf_2eproto_once,
      file_level_metadata_test_5fconf_2eproto[12]);
}

// ===================================================================

class ThemeConf_Theme::_Internal {
 public:
};

ThemeConf_Theme::ThemeConf_Theme(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protoconf.ThemeConf.Theme)
}
ThemeConf_Theme::ThemeConf_Theme(const ThemeConf_Theme& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  value_ = from.value_;
  // @@protoc_insertion_point(copy_constructor:protoconf.ThemeConf.Theme)
}

inline void ThemeConf_Theme::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
value_ = uint64_t{0u};
}

ThemeConf_Theme::~ThemeConf_Theme() {
  // @@protoc_insertion_point(destructor:protoconf.ThemeConf.Theme)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ThemeConf_Theme::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ThemeConf_Theme::ArenaDtor(void* object) {
  ThemeConf_Theme* _this = reinterpret_cast< ThemeConf_Theme* >(object);
  (void)_this;
}
void ThemeConf_Theme::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ThemeConf_Theme::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ThemeConf_Theme::Clear() {
// @@protoc_insertion_point(message_clear_start:protoconf.ThemeConf.Theme)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  value_ = uint64_t{0u};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ThemeConf_Theme::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint64 value = 1 [(.tableau.field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 2 [(.tableau.field) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protoconf.ThemeConf.Theme.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ThemeConf_Theme::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protoconf.ThemeConf.Theme)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint64 value = 1 [(.tableau.field) = {
  if (this->_internal_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_value(), target);
  }

  // string name = 2 [(.tableau.field) = {
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protoconf.ThemeConf.Theme.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protoconf.ThemeConf.Theme)
  return target;
}

size_t ThemeConf_Theme::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protoconf.ThemeConf.Theme)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string name = 2 [(.tableau.field) = {
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // uint64 value = 1 [(.tableau.field) = {
  if (this->_internal_value() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64SizePlusOne(this->_internal_value());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ThemeConf_Theme::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ThemeConf_Theme::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ThemeConf_Theme::GetClassData() const { return &_class_data_; }

void ThemeConf_Theme::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ThemeConf_Theme *>(to)->MergeFrom(
      static_cast<const ThemeConf_Theme &>(from));
}


void ThemeConf_Theme::MergeFrom(const ThemeConf_Theme& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protoconf.ThemeConf.Theme)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_value() != 0) {
    _internal_set_value(from._internal_value());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ThemeConf_Theme::CopyFrom(const ThemeConf_Theme& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protoconf.ThemeConf.Theme)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ThemeConf_Theme::IsInitialized() const {
  return true;
}

void ThemeConf_Theme::InternalSwap(ThemeConf_Theme* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  swap(value_, other->value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ThemeConf_Theme::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_test_5fconf_2eproto_getter, &descriptor_table_test_5fconf_2eproto_once,
      file_level_metadata_test_5fconf_2eproto[13]);
}

// ===================================================================

class ThemeConf::_Internal {
 public:
};

ThemeConf::ThemeConf(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  theme_map_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protoconf.ThemeConf)
}
ThemeConf::ThemeConf(const ThemeConf& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  theme_map_.MergeFrom(from.theme_map_);
  // @@protoc_insertion_point(copy_constructor:protoconf.ThemeConf)
}

inline void ThemeConf::SharedCtor() {
}

ThemeConf::~ThemeConf() {
  // @@protoc_insertion_point(destructor:protoconf.ThemeConf)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ThemeConf::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ThemeConf::ArenaDtor(void* object) {
  ThemeConf* _this = reinterpret_cast< ThemeConf* >(object);
  (void)_this;
  _this->theme_map_. ~MapField();
}
inline void ThemeConf::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &ThemeConf::ArenaDtor);
  }
}
void ThemeConf::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ThemeConf::Clear() {
// @@protoc_insertion_point(message_clear_start:protoconf.ThemeConf)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  theme_map_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ThemeConf::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<string, .protoconf.ThemeConf.Theme> theme_map = 1 [(.tableau.field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&theme_map_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ThemeConf::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protoconf.ThemeConf)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .protoconf.ThemeConf.Theme> theme_map = 1 [(.tableau.field) = {
  if (!this->_internal_theme_map().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::protoconf::ThemeConf_Theme >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "protoconf.ThemeConf.ThemeMapEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_theme_map().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_theme_map().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::protoconf::ThemeConf_Theme >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::protoconf::ThemeConf_Theme >::const_iterator
          it = this->_internal_theme_map().begin();
          it != this->_internal_theme_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = ThemeConf_ThemeMapEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::protoconf::ThemeConf_Theme >::const_iterator
          it = this->_internal_theme_map().begin();
          it != this->_internal_theme_map().end(); ++it) {
        target = ThemeConf_ThemeMapEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protoconf.ThemeConf)
  return target;
}

size_t ThemeConf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protoconf.ThemeConf)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .protoconf.ThemeConf.Theme> theme_map = 1 [(.tableau.field) = {
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_theme_map_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::protoconf::ThemeConf_Theme >::const_iterator
      it = this->_internal_theme_map().begin();
      it != this->_internal_theme_map().end(); ++it) {
    total_size += ThemeConf_ThemeMapEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ThemeConf::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ThemeConf::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ThemeConf::GetClassData() const { return &_class_data_; }

void ThemeConf::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ThemeConf *>(to)->MergeFrom(
      static_cast<const ThemeConf &>(from));
}


void ThemeConf::MergeFrom(const ThemeConf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protoconf.ThemeConf)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  theme_map_.MergeFrom(from.theme_map_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ThemeConf::CopyFrom(const ThemeConf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protoconf.ThemeConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ThemeConf::IsInitialized() const {
  return true;
}

void ThemeConf::InternalSwap(ThemeConf* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  theme_map_.InternalSwap(&other->theme_map_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ThemeConf::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_test_5fconf_2eproto_getter, &descriptor_table_test_5fconf_2eproto_once,
      file_level_metadata_test_5fconf_2eproto[14]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace protoconf
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::protoconf::ActivityConf_ActivityMapEntry_DoNotUse* Arena::CreateMaybeMessage< ::protoconf::ActivityConf_ActivityMapEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protoconf::ActivityConf_ActivityMapEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::protoconf::ActivityConf_Activity_ChapterMapEntry_DoNotUse* Arena::CreateMaybeMessage< ::protoconf::ActivityConf_Activity_ChapterMapEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protoconf::ActivityConf_Activity_ChapterMapEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::protoconf::ActivityConf_Activity_Chapter_SectionMapEntry_DoNotUse* Arena::CreateMaybeMessage< ::protoconf::ActivityConf_Activity_Chapter_SectionMapEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protoconf::ActivityConf_Activity_Chapter_SectionMapEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::protoconf::ActivityConf_Activity_Chapter* Arena::CreateMaybeMessage< ::protoconf::ActivityConf_Activity_Chapter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protoconf::ActivityConf_Activity_Chapter >(arena);
}
template<> PROTOBUF_NOINLINE ::protoconf::ActivityConf_Activity* Arena::CreateMaybeMessage< ::protoconf::ActivityConf_Activity >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protoconf::ActivityConf_Activity >(arena);
}
template<> PROTOBUF_NOINLINE ::protoconf::ActivityConf_BonusMapEntry_DoNotUse* Arena::CreateMaybeMessage< ::protoconf::ActivityConf_BonusMapEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protoconf::ActivityConf_BonusMapEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::protoconf::ActivityConf* Arena::CreateMaybeMessage< ::protoconf::ActivityConf >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protoconf::ActivityConf >(arena);
}
template<> PROTOBUF_NOINLINE ::protoconf::Section_SectionRankMapEntry_DoNotUse* Arena::CreateMaybeMessage< ::protoconf::Section_SectionRankMapEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protoconf::Section_SectionRankMapEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::protoconf::Section* Arena::CreateMaybeMessage< ::protoconf::Section >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protoconf::Section >(arena);
}
template<> PROTOBUF_NOINLINE ::protoconf::ChapterConf_ChapterMapEntry_DoNotUse* Arena::CreateMaybeMessage< ::protoconf::ChapterConf_ChapterMapEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protoconf::ChapterConf_ChapterMapEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::protoconf::ChapterConf_Chapter* Arena::CreateMaybeMessage< ::protoconf::ChapterConf_Chapter >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protoconf::ChapterConf_Chapter >(arena);
}
template<> PROTOBUF_NOINLINE ::protoconf::ChapterConf* Arena::CreateMaybeMessage< ::protoconf::ChapterConf >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protoconf::ChapterConf >(arena);
}
template<> PROTOBUF_NOINLINE ::protoconf::ThemeConf_ThemeMapEntry_DoNotUse* Arena::CreateMaybeMessage< ::protoconf::ThemeConf_ThemeMapEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protoconf::ThemeConf_ThemeMapEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::protoconf::ThemeConf_Theme* Arena::CreateMaybeMessage< ::protoconf::ThemeConf_Theme >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protoconf::ThemeConf_Theme >(arena);
}
template<> PROTOBUF_NOINLINE ::protoconf::ThemeConf* Arena::CreateMaybeMessage< ::protoconf::ThemeConf >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protoconf::ThemeConf >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
