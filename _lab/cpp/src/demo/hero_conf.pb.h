// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: hero_conf.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_hero_5fconf_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_hero_5fconf_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include "tableau/protobuf/tableau.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_hero_5fconf_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_hero_5fconf_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_hero_5fconf_2eproto;
namespace protoconf {
class HeroConf;
struct HeroConfDefaultTypeInternal;
extern HeroConfDefaultTypeInternal _HeroConf_default_instance_;
class HeroConf_Hero;
struct HeroConf_HeroDefaultTypeInternal;
extern HeroConf_HeroDefaultTypeInternal _HeroConf_Hero_default_instance_;
class HeroConf_HeroMapEntry_DoNotUse;
struct HeroConf_HeroMapEntry_DoNotUseDefaultTypeInternal;
extern HeroConf_HeroMapEntry_DoNotUseDefaultTypeInternal _HeroConf_HeroMapEntry_DoNotUse_default_instance_;
class HeroConf_Hero_Attr;
struct HeroConf_Hero_AttrDefaultTypeInternal;
extern HeroConf_Hero_AttrDefaultTypeInternal _HeroConf_Hero_Attr_default_instance_;
class HeroConf_Hero_AttrMapEntry_DoNotUse;
struct HeroConf_Hero_AttrMapEntry_DoNotUseDefaultTypeInternal;
extern HeroConf_Hero_AttrMapEntry_DoNotUseDefaultTypeInternal _HeroConf_Hero_AttrMapEntry_DoNotUse_default_instance_;
}  // namespace protoconf
PROTOBUF_NAMESPACE_OPEN
template<> ::protoconf::HeroConf* Arena::CreateMaybeMessage<::protoconf::HeroConf>(Arena*);
template<> ::protoconf::HeroConf_Hero* Arena::CreateMaybeMessage<::protoconf::HeroConf_Hero>(Arena*);
template<> ::protoconf::HeroConf_HeroMapEntry_DoNotUse* Arena::CreateMaybeMessage<::protoconf::HeroConf_HeroMapEntry_DoNotUse>(Arena*);
template<> ::protoconf::HeroConf_Hero_Attr* Arena::CreateMaybeMessage<::protoconf::HeroConf_Hero_Attr>(Arena*);
template<> ::protoconf::HeroConf_Hero_AttrMapEntry_DoNotUse* Arena::CreateMaybeMessage<::protoconf::HeroConf_Hero_AttrMapEntry_DoNotUse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace protoconf {

// ===================================================================

class HeroConf_HeroMapEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<HeroConf_HeroMapEntry_DoNotUse, 
    std::string, ::protoconf::HeroConf_Hero,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<HeroConf_HeroMapEntry_DoNotUse, 
    std::string, ::protoconf::HeroConf_Hero,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  HeroConf_HeroMapEntry_DoNotUse();
  explicit constexpr HeroConf_HeroMapEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit HeroConf_HeroMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const HeroConf_HeroMapEntry_DoNotUse& other);
  static const HeroConf_HeroMapEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const HeroConf_HeroMapEntry_DoNotUse*>(&_HeroConf_HeroMapEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "protoconf.HeroConf.HeroMapEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class HeroConf_Hero_AttrMapEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<HeroConf_Hero_AttrMapEntry_DoNotUse, 
    std::string, ::protoconf::HeroConf_Hero_Attr,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<HeroConf_Hero_AttrMapEntry_DoNotUse, 
    std::string, ::protoconf::HeroConf_Hero_Attr,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  HeroConf_Hero_AttrMapEntry_DoNotUse();
  explicit constexpr HeroConf_Hero_AttrMapEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit HeroConf_Hero_AttrMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const HeroConf_Hero_AttrMapEntry_DoNotUse& other);
  static const HeroConf_Hero_AttrMapEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const HeroConf_Hero_AttrMapEntry_DoNotUse*>(&_HeroConf_Hero_AttrMapEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "protoconf.HeroConf.Hero.AttrMapEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class HeroConf_Hero_Attr final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protoconf.HeroConf.Hero.Attr) */ {
 public:
  inline HeroConf_Hero_Attr() : HeroConf_Hero_Attr(nullptr) {}
  ~HeroConf_Hero_Attr() override;
  explicit constexpr HeroConf_Hero_Attr(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HeroConf_Hero_Attr(const HeroConf_Hero_Attr& from);
  HeroConf_Hero_Attr(HeroConf_Hero_Attr&& from) noexcept
    : HeroConf_Hero_Attr() {
    *this = ::std::move(from);
  }

  inline HeroConf_Hero_Attr& operator=(const HeroConf_Hero_Attr& from) {
    CopyFrom(from);
    return *this;
  }
  inline HeroConf_Hero_Attr& operator=(HeroConf_Hero_Attr&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HeroConf_Hero_Attr& default_instance() {
    return *internal_default_instance();
  }
  static inline const HeroConf_Hero_Attr* internal_default_instance() {
    return reinterpret_cast<const HeroConf_Hero_Attr*>(
               &_HeroConf_Hero_Attr_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(HeroConf_Hero_Attr& a, HeroConf_Hero_Attr& b) {
    a.Swap(&b);
  }
  inline void Swap(HeroConf_Hero_Attr* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HeroConf_Hero_Attr* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HeroConf_Hero_Attr* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HeroConf_Hero_Attr>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HeroConf_Hero_Attr& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const HeroConf_Hero_Attr& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HeroConf_Hero_Attr* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protoconf.HeroConf.Hero.Attr";
  }
  protected:
  explicit HeroConf_Hero_Attr(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTitleFieldNumber = 1,
    kAttrFieldNumber = 2,
  };
  // string title = 1 [(.tableau.field) = {
  void clear_title();
  const std::string& title() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_title(ArgT0&& arg0, ArgT... args);
  std::string* mutable_title();
  PROTOBUF_NODISCARD std::string* release_title();
  void set_allocated_title(std::string* title);
  private:
  const std::string& _internal_title() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_title(const std::string& value);
  std::string* _internal_mutable_title();
  public:

  // string attr = 2 [(.tableau.field) = {
  void clear_attr();
  const std::string& attr() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_attr(ArgT0&& arg0, ArgT... args);
  std::string* mutable_attr();
  PROTOBUF_NODISCARD std::string* release_attr();
  void set_allocated_attr(std::string* attr);
  private:
  const std::string& _internal_attr() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_attr(const std::string& value);
  std::string* _internal_mutable_attr();
  public:

  // @@protoc_insertion_point(class_scope:protoconf.HeroConf.Hero.Attr)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr title_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr attr_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_hero_5fconf_2eproto;
};
// -------------------------------------------------------------------

class HeroConf_Hero final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protoconf.HeroConf.Hero) */ {
 public:
  inline HeroConf_Hero() : HeroConf_Hero(nullptr) {}
  ~HeroConf_Hero() override;
  explicit constexpr HeroConf_Hero(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HeroConf_Hero(const HeroConf_Hero& from);
  HeroConf_Hero(HeroConf_Hero&& from) noexcept
    : HeroConf_Hero() {
    *this = ::std::move(from);
  }

  inline HeroConf_Hero& operator=(const HeroConf_Hero& from) {
    CopyFrom(from);
    return *this;
  }
  inline HeroConf_Hero& operator=(HeroConf_Hero&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HeroConf_Hero& default_instance() {
    return *internal_default_instance();
  }
  static inline const HeroConf_Hero* internal_default_instance() {
    return reinterpret_cast<const HeroConf_Hero*>(
               &_HeroConf_Hero_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(HeroConf_Hero& a, HeroConf_Hero& b) {
    a.Swap(&b);
  }
  inline void Swap(HeroConf_Hero* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HeroConf_Hero* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HeroConf_Hero* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HeroConf_Hero>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HeroConf_Hero& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const HeroConf_Hero& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HeroConf_Hero* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protoconf.HeroConf.Hero";
  }
  protected:
  explicit HeroConf_Hero(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef HeroConf_Hero_Attr Attr;

  // accessors -------------------------------------------------------

  enum : int {
    kAttrMapFieldNumber = 2,
    kNameFieldNumber = 1,
  };
  // map<string, .protoconf.HeroConf.Hero.Attr> attr_map = 2 [(.tableau.field) = {
  int attr_map_size() const;
  private:
  int _internal_attr_map_size() const;
  public:
  void clear_attr_map();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::protoconf::HeroConf_Hero_Attr >&
      _internal_attr_map() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::protoconf::HeroConf_Hero_Attr >*
      _internal_mutable_attr_map();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::protoconf::HeroConf_Hero_Attr >&
      attr_map() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::protoconf::HeroConf_Hero_Attr >*
      mutable_attr_map();

  // string name = 1 [(.tableau.field) = {
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // @@protoc_insertion_point(class_scope:protoconf.HeroConf.Hero)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      HeroConf_Hero_AttrMapEntry_DoNotUse,
      std::string, ::protoconf::HeroConf_Hero_Attr,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> attr_map_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_hero_5fconf_2eproto;
};
// -------------------------------------------------------------------

class HeroConf final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protoconf.HeroConf) */ {
 public:
  inline HeroConf() : HeroConf(nullptr) {}
  ~HeroConf() override;
  explicit constexpr HeroConf(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HeroConf(const HeroConf& from);
  HeroConf(HeroConf&& from) noexcept
    : HeroConf() {
    *this = ::std::move(from);
  }

  inline HeroConf& operator=(const HeroConf& from) {
    CopyFrom(from);
    return *this;
  }
  inline HeroConf& operator=(HeroConf&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HeroConf& default_instance() {
    return *internal_default_instance();
  }
  static inline const HeroConf* internal_default_instance() {
    return reinterpret_cast<const HeroConf*>(
               &_HeroConf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(HeroConf& a, HeroConf& b) {
    a.Swap(&b);
  }
  inline void Swap(HeroConf* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HeroConf* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HeroConf* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<HeroConf>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const HeroConf& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const HeroConf& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HeroConf* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protoconf.HeroConf";
  }
  protected:
  explicit HeroConf(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef HeroConf_Hero Hero;

  // accessors -------------------------------------------------------

  enum : int {
    kHeroMapFieldNumber = 1,
  };
  // map<string, .protoconf.HeroConf.Hero> hero_map = 1 [(.tableau.field) = {
  int hero_map_size() const;
  private:
  int _internal_hero_map_size() const;
  public:
  void clear_hero_map();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::protoconf::HeroConf_Hero >&
      _internal_hero_map() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::protoconf::HeroConf_Hero >*
      _internal_mutable_hero_map();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::protoconf::HeroConf_Hero >&
      hero_map() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::protoconf::HeroConf_Hero >*
      mutable_hero_map();

  // @@protoc_insertion_point(class_scope:protoconf.HeroConf)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      HeroConf_HeroMapEntry_DoNotUse,
      std::string, ::protoconf::HeroConf_Hero,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> hero_map_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_hero_5fconf_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// HeroConf_Hero_Attr

// string title = 1 [(.tableau.field) = {
inline void HeroConf_Hero_Attr::clear_title() {
  title_.ClearToEmpty();
}
inline const std::string& HeroConf_Hero_Attr::title() const {
  // @@protoc_insertion_point(field_get:protoconf.HeroConf.Hero.Attr.title)
  return _internal_title();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void HeroConf_Hero_Attr::set_title(ArgT0&& arg0, ArgT... args) {
 
 title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protoconf.HeroConf.Hero.Attr.title)
}
inline std::string* HeroConf_Hero_Attr::mutable_title() {
  std::string* _s = _internal_mutable_title();
  // @@protoc_insertion_point(field_mutable:protoconf.HeroConf.Hero.Attr.title)
  return _s;
}
inline const std::string& HeroConf_Hero_Attr::_internal_title() const {
  return title_.Get();
}
inline void HeroConf_Hero_Attr::_internal_set_title(const std::string& value) {
  
  title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* HeroConf_Hero_Attr::_internal_mutable_title() {
  
  return title_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* HeroConf_Hero_Attr::release_title() {
  // @@protoc_insertion_point(field_release:protoconf.HeroConf.Hero.Attr.title)
  return title_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void HeroConf_Hero_Attr::set_allocated_title(std::string* title) {
  if (title != nullptr) {
    
  } else {
    
  }
  title_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), title,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (title_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protoconf.HeroConf.Hero.Attr.title)
}

// string attr = 2 [(.tableau.field) = {
inline void HeroConf_Hero_Attr::clear_attr() {
  attr_.ClearToEmpty();
}
inline const std::string& HeroConf_Hero_Attr::attr() const {
  // @@protoc_insertion_point(field_get:protoconf.HeroConf.Hero.Attr.attr)
  return _internal_attr();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void HeroConf_Hero_Attr::set_attr(ArgT0&& arg0, ArgT... args) {
 
 attr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protoconf.HeroConf.Hero.Attr.attr)
}
inline std::string* HeroConf_Hero_Attr::mutable_attr() {
  std::string* _s = _internal_mutable_attr();
  // @@protoc_insertion_point(field_mutable:protoconf.HeroConf.Hero.Attr.attr)
  return _s;
}
inline const std::string& HeroConf_Hero_Attr::_internal_attr() const {
  return attr_.Get();
}
inline void HeroConf_Hero_Attr::_internal_set_attr(const std::string& value) {
  
  attr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* HeroConf_Hero_Attr::_internal_mutable_attr() {
  
  return attr_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* HeroConf_Hero_Attr::release_attr() {
  // @@protoc_insertion_point(field_release:protoconf.HeroConf.Hero.Attr.attr)
  return attr_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void HeroConf_Hero_Attr::set_allocated_attr(std::string* attr) {
  if (attr != nullptr) {
    
  } else {
    
  }
  attr_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), attr,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (attr_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    attr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protoconf.HeroConf.Hero.Attr.attr)
}

// -------------------------------------------------------------------

// HeroConf_Hero

// string name = 1 [(.tableau.field) = {
inline void HeroConf_Hero::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& HeroConf_Hero::name() const {
  // @@protoc_insertion_point(field_get:protoconf.HeroConf.Hero.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void HeroConf_Hero::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protoconf.HeroConf.Hero.name)
}
inline std::string* HeroConf_Hero::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:protoconf.HeroConf.Hero.name)
  return _s;
}
inline const std::string& HeroConf_Hero::_internal_name() const {
  return name_.Get();
}
inline void HeroConf_Hero::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* HeroConf_Hero::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* HeroConf_Hero::release_name() {
  // @@protoc_insertion_point(field_release:protoconf.HeroConf.Hero.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void HeroConf_Hero::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protoconf.HeroConf.Hero.name)
}

// map<string, .protoconf.HeroConf.Hero.Attr> attr_map = 2 [(.tableau.field) = {
inline int HeroConf_Hero::_internal_attr_map_size() const {
  return attr_map_.size();
}
inline int HeroConf_Hero::attr_map_size() const {
  return _internal_attr_map_size();
}
inline void HeroConf_Hero::clear_attr_map() {
  attr_map_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::protoconf::HeroConf_Hero_Attr >&
HeroConf_Hero::_internal_attr_map() const {
  return attr_map_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::protoconf::HeroConf_Hero_Attr >&
HeroConf_Hero::attr_map() const {
  // @@protoc_insertion_point(field_map:protoconf.HeroConf.Hero.attr_map)
  return _internal_attr_map();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::protoconf::HeroConf_Hero_Attr >*
HeroConf_Hero::_internal_mutable_attr_map() {
  return attr_map_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::protoconf::HeroConf_Hero_Attr >*
HeroConf_Hero::mutable_attr_map() {
  // @@protoc_insertion_point(field_mutable_map:protoconf.HeroConf.Hero.attr_map)
  return _internal_mutable_attr_map();
}

// -------------------------------------------------------------------

// HeroConf

// map<string, .protoconf.HeroConf.Hero> hero_map = 1 [(.tableau.field) = {
inline int HeroConf::_internal_hero_map_size() const {
  return hero_map_.size();
}
inline int HeroConf::hero_map_size() const {
  return _internal_hero_map_size();
}
inline void HeroConf::clear_hero_map() {
  hero_map_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::protoconf::HeroConf_Hero >&
HeroConf::_internal_hero_map() const {
  return hero_map_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::protoconf::HeroConf_Hero >&
HeroConf::hero_map() const {
  // @@protoc_insertion_point(field_map:protoconf.HeroConf.hero_map)
  return _internal_hero_map();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::protoconf::HeroConf_Hero >*
HeroConf::_internal_mutable_hero_map() {
  return hero_map_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::protoconf::HeroConf_Hero >*
HeroConf::mutable_hero_map() {
  // @@protoc_insertion_point(field_mutable_map:protoconf.HeroConf.hero_map)
  return _internal_mutable_hero_map();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protoconf

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_hero_5fconf_2eproto
