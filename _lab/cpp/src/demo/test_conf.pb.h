// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: test_conf.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_test_5fconf_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_test_5fconf_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019003 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
#include "tableau/protobuf/tableau.pb.h"
#include "common_conf.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_test_5fconf_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_test_5fconf_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[15]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_test_5fconf_2eproto;
namespace protoconf {
class ActivityConf;
struct ActivityConfDefaultTypeInternal;
extern ActivityConfDefaultTypeInternal _ActivityConf_default_instance_;
class ActivityConf_Activity;
struct ActivityConf_ActivityDefaultTypeInternal;
extern ActivityConf_ActivityDefaultTypeInternal _ActivityConf_Activity_default_instance_;
class ActivityConf_ActivityMapEntry_DoNotUse;
struct ActivityConf_ActivityMapEntry_DoNotUseDefaultTypeInternal;
extern ActivityConf_ActivityMapEntry_DoNotUseDefaultTypeInternal _ActivityConf_ActivityMapEntry_DoNotUse_default_instance_;
class ActivityConf_Activity_Chapter;
struct ActivityConf_Activity_ChapterDefaultTypeInternal;
extern ActivityConf_Activity_ChapterDefaultTypeInternal _ActivityConf_Activity_Chapter_default_instance_;
class ActivityConf_Activity_ChapterMapEntry_DoNotUse;
struct ActivityConf_Activity_ChapterMapEntry_DoNotUseDefaultTypeInternal;
extern ActivityConf_Activity_ChapterMapEntry_DoNotUseDefaultTypeInternal _ActivityConf_Activity_ChapterMapEntry_DoNotUse_default_instance_;
class ActivityConf_Activity_Chapter_SectionMapEntry_DoNotUse;
struct ActivityConf_Activity_Chapter_SectionMapEntry_DoNotUseDefaultTypeInternal;
extern ActivityConf_Activity_Chapter_SectionMapEntry_DoNotUseDefaultTypeInternal _ActivityConf_Activity_Chapter_SectionMapEntry_DoNotUse_default_instance_;
class ActivityConf_BonusMapEntry_DoNotUse;
struct ActivityConf_BonusMapEntry_DoNotUseDefaultTypeInternal;
extern ActivityConf_BonusMapEntry_DoNotUseDefaultTypeInternal _ActivityConf_BonusMapEntry_DoNotUse_default_instance_;
class ChapterConf;
struct ChapterConfDefaultTypeInternal;
extern ChapterConfDefaultTypeInternal _ChapterConf_default_instance_;
class ChapterConf_Chapter;
struct ChapterConf_ChapterDefaultTypeInternal;
extern ChapterConf_ChapterDefaultTypeInternal _ChapterConf_Chapter_default_instance_;
class ChapterConf_ChapterMapEntry_DoNotUse;
struct ChapterConf_ChapterMapEntry_DoNotUseDefaultTypeInternal;
extern ChapterConf_ChapterMapEntry_DoNotUseDefaultTypeInternal _ChapterConf_ChapterMapEntry_DoNotUse_default_instance_;
class Section;
struct SectionDefaultTypeInternal;
extern SectionDefaultTypeInternal _Section_default_instance_;
class Section_SectionRankMapEntry_DoNotUse;
struct Section_SectionRankMapEntry_DoNotUseDefaultTypeInternal;
extern Section_SectionRankMapEntry_DoNotUseDefaultTypeInternal _Section_SectionRankMapEntry_DoNotUse_default_instance_;
class ThemeConf;
struct ThemeConfDefaultTypeInternal;
extern ThemeConfDefaultTypeInternal _ThemeConf_default_instance_;
class ThemeConf_Theme;
struct ThemeConf_ThemeDefaultTypeInternal;
extern ThemeConf_ThemeDefaultTypeInternal _ThemeConf_Theme_default_instance_;
class ThemeConf_ThemeMapEntry_DoNotUse;
struct ThemeConf_ThemeMapEntry_DoNotUseDefaultTypeInternal;
extern ThemeConf_ThemeMapEntry_DoNotUseDefaultTypeInternal _ThemeConf_ThemeMapEntry_DoNotUse_default_instance_;
}  // namespace protoconf
PROTOBUF_NAMESPACE_OPEN
template<> ::protoconf::ActivityConf* Arena::CreateMaybeMessage<::protoconf::ActivityConf>(Arena*);
template<> ::protoconf::ActivityConf_Activity* Arena::CreateMaybeMessage<::protoconf::ActivityConf_Activity>(Arena*);
template<> ::protoconf::ActivityConf_ActivityMapEntry_DoNotUse* Arena::CreateMaybeMessage<::protoconf::ActivityConf_ActivityMapEntry_DoNotUse>(Arena*);
template<> ::protoconf::ActivityConf_Activity_Chapter* Arena::CreateMaybeMessage<::protoconf::ActivityConf_Activity_Chapter>(Arena*);
template<> ::protoconf::ActivityConf_Activity_ChapterMapEntry_DoNotUse* Arena::CreateMaybeMessage<::protoconf::ActivityConf_Activity_ChapterMapEntry_DoNotUse>(Arena*);
template<> ::protoconf::ActivityConf_Activity_Chapter_SectionMapEntry_DoNotUse* Arena::CreateMaybeMessage<::protoconf::ActivityConf_Activity_Chapter_SectionMapEntry_DoNotUse>(Arena*);
template<> ::protoconf::ActivityConf_BonusMapEntry_DoNotUse* Arena::CreateMaybeMessage<::protoconf::ActivityConf_BonusMapEntry_DoNotUse>(Arena*);
template<> ::protoconf::ChapterConf* Arena::CreateMaybeMessage<::protoconf::ChapterConf>(Arena*);
template<> ::protoconf::ChapterConf_Chapter* Arena::CreateMaybeMessage<::protoconf::ChapterConf_Chapter>(Arena*);
template<> ::protoconf::ChapterConf_ChapterMapEntry_DoNotUse* Arena::CreateMaybeMessage<::protoconf::ChapterConf_ChapterMapEntry_DoNotUse>(Arena*);
template<> ::protoconf::Section* Arena::CreateMaybeMessage<::protoconf::Section>(Arena*);
template<> ::protoconf::Section_SectionRankMapEntry_DoNotUse* Arena::CreateMaybeMessage<::protoconf::Section_SectionRankMapEntry_DoNotUse>(Arena*);
template<> ::protoconf::ThemeConf* Arena::CreateMaybeMessage<::protoconf::ThemeConf>(Arena*);
template<> ::protoconf::ThemeConf_Theme* Arena::CreateMaybeMessage<::protoconf::ThemeConf_Theme>(Arena*);
template<> ::protoconf::ThemeConf_ThemeMapEntry_DoNotUse* Arena::CreateMaybeMessage<::protoconf::ThemeConf_ThemeMapEntry_DoNotUse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace protoconf {

// ===================================================================

class ActivityConf_ActivityMapEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ActivityConf_ActivityMapEntry_DoNotUse, 
    uint64_t, ::protoconf::ActivityConf_Activity,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ActivityConf_ActivityMapEntry_DoNotUse, 
    uint64_t, ::protoconf::ActivityConf_Activity,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  ActivityConf_ActivityMapEntry_DoNotUse();
  explicit constexpr ActivityConf_ActivityMapEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit ActivityConf_ActivityMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const ActivityConf_ActivityMapEntry_DoNotUse& other);
  static const ActivityConf_ActivityMapEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const ActivityConf_ActivityMapEntry_DoNotUse*>(&_ActivityConf_ActivityMapEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class ActivityConf_Activity_ChapterMapEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ActivityConf_Activity_ChapterMapEntry_DoNotUse, 
    uint32_t, ::protoconf::ActivityConf_Activity_Chapter,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ActivityConf_Activity_ChapterMapEntry_DoNotUse, 
    uint32_t, ::protoconf::ActivityConf_Activity_Chapter,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  ActivityConf_Activity_ChapterMapEntry_DoNotUse();
  explicit constexpr ActivityConf_Activity_ChapterMapEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit ActivityConf_Activity_ChapterMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const ActivityConf_Activity_ChapterMapEntry_DoNotUse& other);
  static const ActivityConf_Activity_ChapterMapEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const ActivityConf_Activity_ChapterMapEntry_DoNotUse*>(&_ActivityConf_Activity_ChapterMapEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class ActivityConf_Activity_Chapter_SectionMapEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ActivityConf_Activity_Chapter_SectionMapEntry_DoNotUse, 
    uint32_t, ::protoconf::Section,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ActivityConf_Activity_Chapter_SectionMapEntry_DoNotUse, 
    uint32_t, ::protoconf::Section,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  ActivityConf_Activity_Chapter_SectionMapEntry_DoNotUse();
  explicit constexpr ActivityConf_Activity_Chapter_SectionMapEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit ActivityConf_Activity_Chapter_SectionMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const ActivityConf_Activity_Chapter_SectionMapEntry_DoNotUse& other);
  static const ActivityConf_Activity_Chapter_SectionMapEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const ActivityConf_Activity_Chapter_SectionMapEntry_DoNotUse*>(&_ActivityConf_Activity_Chapter_SectionMapEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class ActivityConf_Activity_Chapter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protoconf.ActivityConf.Activity.Chapter) */ {
 public:
  inline ActivityConf_Activity_Chapter() : ActivityConf_Activity_Chapter(nullptr) {}
  ~ActivityConf_Activity_Chapter() override;
  explicit constexpr ActivityConf_Activity_Chapter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ActivityConf_Activity_Chapter(const ActivityConf_Activity_Chapter& from);
  ActivityConf_Activity_Chapter(ActivityConf_Activity_Chapter&& from) noexcept
    : ActivityConf_Activity_Chapter() {
    *this = ::std::move(from);
  }

  inline ActivityConf_Activity_Chapter& operator=(const ActivityConf_Activity_Chapter& from) {
    CopyFrom(from);
    return *this;
  }
  inline ActivityConf_Activity_Chapter& operator=(ActivityConf_Activity_Chapter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ActivityConf_Activity_Chapter& default_instance() {
    return *internal_default_instance();
  }
  static inline const ActivityConf_Activity_Chapter* internal_default_instance() {
    return reinterpret_cast<const ActivityConf_Activity_Chapter*>(
               &_ActivityConf_Activity_Chapter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ActivityConf_Activity_Chapter& a, ActivityConf_Activity_Chapter& b) {
    a.Swap(&b);
  }
  inline void Swap(ActivityConf_Activity_Chapter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ActivityConf_Activity_Chapter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ActivityConf_Activity_Chapter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ActivityConf_Activity_Chapter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ActivityConf_Activity_Chapter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ActivityConf_Activity_Chapter& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ActivityConf_Activity_Chapter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protoconf.ActivityConf.Activity.Chapter";
  }
  protected:
  explicit ActivityConf_Activity_Chapter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kSectionMapFieldNumber = 4,
    kChapterNameFieldNumber = 2,
    kChapterIdFieldNumber = 1,
    kAwardIdFieldNumber = 3,
  };
  // map<uint32, .protoconf.Section> section_map = 4 [(.tableau.field) = {
  int section_map_size() const;
  private:
  int _internal_section_map_size() const;
  public:
  void clear_section_map();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::protoconf::Section >&
      _internal_section_map() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::protoconf::Section >*
      _internal_mutable_section_map();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::protoconf::Section >&
      section_map() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::protoconf::Section >*
      mutable_section_map();

  // string chapter_name = 2 [(.tableau.field) = {
  void clear_chapter_name();
  const std::string& chapter_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_chapter_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_chapter_name();
  PROTOBUF_NODISCARD std::string* release_chapter_name();
  void set_allocated_chapter_name(std::string* chapter_name);
  private:
  const std::string& _internal_chapter_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_chapter_name(const std::string& value);
  std::string* _internal_mutable_chapter_name();
  public:

  // uint32 chapter_id = 1 [(.tableau.field) = {
  void clear_chapter_id();
  uint32_t chapter_id() const;
  void set_chapter_id(uint32_t value);
  private:
  uint32_t _internal_chapter_id() const;
  void _internal_set_chapter_id(uint32_t value);
  public:

  // uint32 award_id = 3 [(.tableau.field) = {
  void clear_award_id();
  uint32_t award_id() const;
  void set_award_id(uint32_t value);
  private:
  uint32_t _internal_award_id() const;
  void _internal_set_award_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:protoconf.ActivityConf.Activity.Chapter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      ActivityConf_Activity_Chapter_SectionMapEntry_DoNotUse,
      uint32_t, ::protoconf::Section,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> section_map_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr chapter_name_;
  uint32_t chapter_id_;
  uint32_t award_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_test_5fconf_2eproto;
};
// -------------------------------------------------------------------

class ActivityConf_Activity final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protoconf.ActivityConf.Activity) */ {
 public:
  inline ActivityConf_Activity() : ActivityConf_Activity(nullptr) {}
  ~ActivityConf_Activity() override;
  explicit constexpr ActivityConf_Activity(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ActivityConf_Activity(const ActivityConf_Activity& from);
  ActivityConf_Activity(ActivityConf_Activity&& from) noexcept
    : ActivityConf_Activity() {
    *this = ::std::move(from);
  }

  inline ActivityConf_Activity& operator=(const ActivityConf_Activity& from) {
    CopyFrom(from);
    return *this;
  }
  inline ActivityConf_Activity& operator=(ActivityConf_Activity&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ActivityConf_Activity& default_instance() {
    return *internal_default_instance();
  }
  static inline const ActivityConf_Activity* internal_default_instance() {
    return reinterpret_cast<const ActivityConf_Activity*>(
               &_ActivityConf_Activity_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ActivityConf_Activity& a, ActivityConf_Activity& b) {
    a.Swap(&b);
  }
  inline void Swap(ActivityConf_Activity* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ActivityConf_Activity* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ActivityConf_Activity* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ActivityConf_Activity>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ActivityConf_Activity& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ActivityConf_Activity& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ActivityConf_Activity* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protoconf.ActivityConf.Activity";
  }
  protected:
  explicit ActivityConf_Activity(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ActivityConf_Activity_Chapter Chapter;

  // accessors -------------------------------------------------------

  enum : int {
    kChapterMapFieldNumber = 3,
    kActivityNameFieldNumber = 2,
    kActivityIdFieldNumber = 1,
  };
  // map<uint32, .protoconf.ActivityConf.Activity.Chapter> chapter_map = 3 [(.tableau.field) = {
  int chapter_map_size() const;
  private:
  int _internal_chapter_map_size() const;
  public:
  void clear_chapter_map();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::protoconf::ActivityConf_Activity_Chapter >&
      _internal_chapter_map() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::protoconf::ActivityConf_Activity_Chapter >*
      _internal_mutable_chapter_map();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::protoconf::ActivityConf_Activity_Chapter >&
      chapter_map() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::protoconf::ActivityConf_Activity_Chapter >*
      mutable_chapter_map();

  // string activity_name = 2 [(.tableau.field) = {
  void clear_activity_name();
  const std::string& activity_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_activity_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_activity_name();
  PROTOBUF_NODISCARD std::string* release_activity_name();
  void set_allocated_activity_name(std::string* activity_name);
  private:
  const std::string& _internal_activity_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_activity_name(const std::string& value);
  std::string* _internal_mutable_activity_name();
  public:

  // uint64 activity_id = 1 [(.tableau.field) = {
  void clear_activity_id();
  uint64_t activity_id() const;
  void set_activity_id(uint64_t value);
  private:
  uint64_t _internal_activity_id() const;
  void _internal_set_activity_id(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:protoconf.ActivityConf.Activity)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      ActivityConf_Activity_ChapterMapEntry_DoNotUse,
      uint32_t, ::protoconf::ActivityConf_Activity_Chapter,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> chapter_map_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr activity_name_;
  uint64_t activity_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_test_5fconf_2eproto;
};
// -------------------------------------------------------------------

class ActivityConf_BonusMapEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ActivityConf_BonusMapEntry_DoNotUse, 
    uint32_t, ::protoconf::Item,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ActivityConf_BonusMapEntry_DoNotUse, 
    uint32_t, ::protoconf::Item,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  ActivityConf_BonusMapEntry_DoNotUse();
  explicit constexpr ActivityConf_BonusMapEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit ActivityConf_BonusMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const ActivityConf_BonusMapEntry_DoNotUse& other);
  static const ActivityConf_BonusMapEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const ActivityConf_BonusMapEntry_DoNotUse*>(&_ActivityConf_BonusMapEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class ActivityConf final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protoconf.ActivityConf) */ {
 public:
  inline ActivityConf() : ActivityConf(nullptr) {}
  ~ActivityConf() override;
  explicit constexpr ActivityConf(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ActivityConf(const ActivityConf& from);
  ActivityConf(ActivityConf&& from) noexcept
    : ActivityConf() {
    *this = ::std::move(from);
  }

  inline ActivityConf& operator=(const ActivityConf& from) {
    CopyFrom(from);
    return *this;
  }
  inline ActivityConf& operator=(ActivityConf&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ActivityConf& default_instance() {
    return *internal_default_instance();
  }
  static inline const ActivityConf* internal_default_instance() {
    return reinterpret_cast<const ActivityConf*>(
               &_ActivityConf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ActivityConf& a, ActivityConf& b) {
    a.Swap(&b);
  }
  inline void Swap(ActivityConf* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ActivityConf* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ActivityConf* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ActivityConf>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ActivityConf& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ActivityConf& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ActivityConf* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protoconf.ActivityConf";
  }
  protected:
  explicit ActivityConf(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ActivityConf_Activity Activity;

  // accessors -------------------------------------------------------

  enum : int {
    kActivityMapFieldNumber = 1,
    kBonusMapFieldNumber = 2,
    kThemeNameFieldNumber = 3,
    kCostItemIdFieldNumber = 4,
  };
  // map<uint64, .protoconf.ActivityConf.Activity> activity_map = 1 [(.tableau.field) = {
  int activity_map_size() const;
  private:
  int _internal_activity_map_size() const;
  public:
  void clear_activity_map();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, ::protoconf::ActivityConf_Activity >&
      _internal_activity_map() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, ::protoconf::ActivityConf_Activity >*
      _internal_mutable_activity_map();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, ::protoconf::ActivityConf_Activity >&
      activity_map() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, ::protoconf::ActivityConf_Activity >*
      mutable_activity_map();

  // map<uint32, .protoconf.Item> bonus_map = 2 [(.tableau.field) = {
  int bonus_map_size() const;
  private:
  int _internal_bonus_map_size() const;
  public:
  void clear_bonus_map();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::protoconf::Item >&
      _internal_bonus_map() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::protoconf::Item >*
      _internal_mutable_bonus_map();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::protoconf::Item >&
      bonus_map() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::protoconf::Item >*
      mutable_bonus_map();

  // string theme_name = 3 [(.tableau.field) = {
  void clear_theme_name();
  const std::string& theme_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_theme_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_theme_name();
  PROTOBUF_NODISCARD std::string* release_theme_name();
  void set_allocated_theme_name(std::string* theme_name);
  private:
  const std::string& _internal_theme_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_theme_name(const std::string& value);
  std::string* _internal_mutable_theme_name();
  public:

  // int32 cost_item_id = 4 [(.tableau.field) = {
  void clear_cost_item_id();
  int32_t cost_item_id() const;
  void set_cost_item_id(int32_t value);
  private:
  int32_t _internal_cost_item_id() const;
  void _internal_set_cost_item_id(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:protoconf.ActivityConf)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      ActivityConf_ActivityMapEntry_DoNotUse,
      uint64_t, ::protoconf::ActivityConf_Activity,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> activity_map_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      ActivityConf_BonusMapEntry_DoNotUse,
      uint32_t, ::protoconf::Item,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> bonus_map_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr theme_name_;
  int32_t cost_item_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_test_5fconf_2eproto;
};
// -------------------------------------------------------------------

class Section_SectionRankMapEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Section_SectionRankMapEntry_DoNotUse, 
    uint32_t, int32_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<Section_SectionRankMapEntry_DoNotUse, 
    uint32_t, int32_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32> SuperType;
  Section_SectionRankMapEntry_DoNotUse();
  explicit constexpr Section_SectionRankMapEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit Section_SectionRankMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const Section_SectionRankMapEntry_DoNotUse& other);
  static const Section_SectionRankMapEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const Section_SectionRankMapEntry_DoNotUse*>(&_Section_SectionRankMapEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class Section final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protoconf.Section) */ {
 public:
  inline Section() : Section(nullptr) {}
  ~Section() override;
  explicit constexpr Section(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Section(const Section& from);
  Section(Section&& from) noexcept
    : Section() {
    *this = ::std::move(from);
  }

  inline Section& operator=(const Section& from) {
    CopyFrom(from);
    return *this;
  }
  inline Section& operator=(Section&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Section& default_instance() {
    return *internal_default_instance();
  }
  static inline const Section* internal_default_instance() {
    return reinterpret_cast<const Section*>(
               &_Section_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Section& a, Section& b) {
    a.Swap(&b);
  }
  inline void Swap(Section* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Section* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Section* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<Section>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const Section& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const Section& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Section* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protoconf.Section";
  }
  protected:
  explicit Section(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kSectionItemListFieldNumber = 3,
    kSectionRankMapFieldNumber = 4,
    kSectionNameFieldNumber = 2,
    kSectionIdFieldNumber = 1,
  };
  // repeated .protoconf.Item section_item_list = 3 [(.tableau.field) = {
  int section_item_list_size() const;
  private:
  int _internal_section_item_list_size() const;
  public:
  void clear_section_item_list();
  ::protoconf::Item* mutable_section_item_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protoconf::Item >*
      mutable_section_item_list();
  private:
  const ::protoconf::Item& _internal_section_item_list(int index) const;
  ::protoconf::Item* _internal_add_section_item_list();
  public:
  const ::protoconf::Item& section_item_list(int index) const;
  ::protoconf::Item* add_section_item_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protoconf::Item >&
      section_item_list() const;

  // map<uint32, int32> section_rank_map = 4 [(.tableau.field) = {
  int section_rank_map_size() const;
  private:
  int _internal_section_rank_map_size() const;
  public:
  void clear_section_rank_map();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, int32_t >&
      _internal_section_rank_map() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, int32_t >*
      _internal_mutable_section_rank_map();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, int32_t >&
      section_rank_map() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, int32_t >*
      mutable_section_rank_map();

  // string section_name = 2 [(.tableau.field) = {
  void clear_section_name();
  const std::string& section_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_section_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_section_name();
  PROTOBUF_NODISCARD std::string* release_section_name();
  void set_allocated_section_name(std::string* section_name);
  private:
  const std::string& _internal_section_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_section_name(const std::string& value);
  std::string* _internal_mutable_section_name();
  public:

  // uint32 section_id = 1 [(.tableau.field) = {
  void clear_section_id();
  uint32_t section_id() const;
  void set_section_id(uint32_t value);
  private:
  uint32_t _internal_section_id() const;
  void _internal_set_section_id(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:protoconf.Section)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protoconf::Item > section_item_list_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      Section_SectionRankMapEntry_DoNotUse,
      uint32_t, int32_t,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32> section_rank_map_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr section_name_;
  uint32_t section_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_test_5fconf_2eproto;
};
// -------------------------------------------------------------------

class ChapterConf_ChapterMapEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ChapterConf_ChapterMapEntry_DoNotUse, 
    uint64_t, ::protoconf::ChapterConf_Chapter,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ChapterConf_ChapterMapEntry_DoNotUse, 
    uint64_t, ::protoconf::ChapterConf_Chapter,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  ChapterConf_ChapterMapEntry_DoNotUse();
  explicit constexpr ChapterConf_ChapterMapEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit ChapterConf_ChapterMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const ChapterConf_ChapterMapEntry_DoNotUse& other);
  static const ChapterConf_ChapterMapEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const ChapterConf_ChapterMapEntry_DoNotUse*>(&_ChapterConf_ChapterMapEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class ChapterConf_Chapter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protoconf.ChapterConf.Chapter) */ {
 public:
  inline ChapterConf_Chapter() : ChapterConf_Chapter(nullptr) {}
  ~ChapterConf_Chapter() override;
  explicit constexpr ChapterConf_Chapter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChapterConf_Chapter(const ChapterConf_Chapter& from);
  ChapterConf_Chapter(ChapterConf_Chapter&& from) noexcept
    : ChapterConf_Chapter() {
    *this = ::std::move(from);
  }

  inline ChapterConf_Chapter& operator=(const ChapterConf_Chapter& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChapterConf_Chapter& operator=(ChapterConf_Chapter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChapterConf_Chapter& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChapterConf_Chapter* internal_default_instance() {
    return reinterpret_cast<const ChapterConf_Chapter*>(
               &_ChapterConf_Chapter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(ChapterConf_Chapter& a, ChapterConf_Chapter& b) {
    a.Swap(&b);
  }
  inline void Swap(ChapterConf_Chapter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChapterConf_Chapter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChapterConf_Chapter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChapterConf_Chapter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChapterConf_Chapter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ChapterConf_Chapter& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChapterConf_Chapter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protoconf.ChapterConf.Chapter";
  }
  protected:
  explicit ChapterConf_Chapter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kIdFieldNumber = 1,
  };
  // string name = 2 [(.tableau.field) = {
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // uint64 id = 1 [(.tableau.field) = {
  void clear_id();
  uint64_t id() const;
  void set_id(uint64_t value);
  private:
  uint64_t _internal_id() const;
  void _internal_set_id(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:protoconf.ChapterConf.Chapter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  uint64_t id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_test_5fconf_2eproto;
};
// -------------------------------------------------------------------

class ChapterConf final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protoconf.ChapterConf) */ {
 public:
  inline ChapterConf() : ChapterConf(nullptr) {}
  ~ChapterConf() override;
  explicit constexpr ChapterConf(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ChapterConf(const ChapterConf& from);
  ChapterConf(ChapterConf&& from) noexcept
    : ChapterConf() {
    *this = ::std::move(from);
  }

  inline ChapterConf& operator=(const ChapterConf& from) {
    CopyFrom(from);
    return *this;
  }
  inline ChapterConf& operator=(ChapterConf&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ChapterConf& default_instance() {
    return *internal_default_instance();
  }
  static inline const ChapterConf* internal_default_instance() {
    return reinterpret_cast<const ChapterConf*>(
               &_ChapterConf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(ChapterConf& a, ChapterConf& b) {
    a.Swap(&b);
  }
  inline void Swap(ChapterConf* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ChapterConf* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ChapterConf* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ChapterConf>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ChapterConf& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ChapterConf& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ChapterConf* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protoconf.ChapterConf";
  }
  protected:
  explicit ChapterConf(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ChapterConf_Chapter Chapter;

  // accessors -------------------------------------------------------

  enum : int {
    kChapterMapFieldNumber = 1,
  };
  // map<uint64, .protoconf.ChapterConf.Chapter> chapter_map = 1 [(.tableau.field) = {
  int chapter_map_size() const;
  private:
  int _internal_chapter_map_size() const;
  public:
  void clear_chapter_map();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, ::protoconf::ChapterConf_Chapter >&
      _internal_chapter_map() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, ::protoconf::ChapterConf_Chapter >*
      _internal_mutable_chapter_map();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, ::protoconf::ChapterConf_Chapter >&
      chapter_map() const;
  ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, ::protoconf::ChapterConf_Chapter >*
      mutable_chapter_map();

  // @@protoc_insertion_point(class_scope:protoconf.ChapterConf)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      ChapterConf_ChapterMapEntry_DoNotUse,
      uint64_t, ::protoconf::ChapterConf_Chapter,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> chapter_map_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_test_5fconf_2eproto;
};
// -------------------------------------------------------------------

class ThemeConf_ThemeMapEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ThemeConf_ThemeMapEntry_DoNotUse, 
    std::string, ::protoconf::ThemeConf_Theme,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<ThemeConf_ThemeMapEntry_DoNotUse, 
    std::string, ::protoconf::ThemeConf_Theme,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> SuperType;
  ThemeConf_ThemeMapEntry_DoNotUse();
  explicit constexpr ThemeConf_ThemeMapEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit ThemeConf_ThemeMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const ThemeConf_ThemeMapEntry_DoNotUse& other);
  static const ThemeConf_ThemeMapEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const ThemeConf_ThemeMapEntry_DoNotUse*>(&_ThemeConf_ThemeMapEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "protoconf.ThemeConf.ThemeMapEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
};

// -------------------------------------------------------------------

class ThemeConf_Theme final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protoconf.ThemeConf.Theme) */ {
 public:
  inline ThemeConf_Theme() : ThemeConf_Theme(nullptr) {}
  ~ThemeConf_Theme() override;
  explicit constexpr ThemeConf_Theme(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ThemeConf_Theme(const ThemeConf_Theme& from);
  ThemeConf_Theme(ThemeConf_Theme&& from) noexcept
    : ThemeConf_Theme() {
    *this = ::std::move(from);
  }

  inline ThemeConf_Theme& operator=(const ThemeConf_Theme& from) {
    CopyFrom(from);
    return *this;
  }
  inline ThemeConf_Theme& operator=(ThemeConf_Theme&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ThemeConf_Theme& default_instance() {
    return *internal_default_instance();
  }
  static inline const ThemeConf_Theme* internal_default_instance() {
    return reinterpret_cast<const ThemeConf_Theme*>(
               &_ThemeConf_Theme_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(ThemeConf_Theme& a, ThemeConf_Theme& b) {
    a.Swap(&b);
  }
  inline void Swap(ThemeConf_Theme* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ThemeConf_Theme* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ThemeConf_Theme* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ThemeConf_Theme>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ThemeConf_Theme& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ThemeConf_Theme& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ThemeConf_Theme* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protoconf.ThemeConf.Theme";
  }
  protected:
  explicit ThemeConf_Theme(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kValueFieldNumber = 1,
  };
  // string name = 2 [(.tableau.field) = {
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // uint64 value = 1 [(.tableau.field) = {
  void clear_value();
  uint64_t value() const;
  void set_value(uint64_t value);
  private:
  uint64_t _internal_value() const;
  void _internal_set_value(uint64_t value);
  public:

  // @@protoc_insertion_point(class_scope:protoconf.ThemeConf.Theme)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  uint64_t value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_test_5fconf_2eproto;
};
// -------------------------------------------------------------------

class ThemeConf final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protoconf.ThemeConf) */ {
 public:
  inline ThemeConf() : ThemeConf(nullptr) {}
  ~ThemeConf() override;
  explicit constexpr ThemeConf(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  ThemeConf(const ThemeConf& from);
  ThemeConf(ThemeConf&& from) noexcept
    : ThemeConf() {
    *this = ::std::move(from);
  }

  inline ThemeConf& operator=(const ThemeConf& from) {
    CopyFrom(from);
    return *this;
  }
  inline ThemeConf& operator=(ThemeConf&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ThemeConf& default_instance() {
    return *internal_default_instance();
  }
  static inline const ThemeConf* internal_default_instance() {
    return reinterpret_cast<const ThemeConf*>(
               &_ThemeConf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(ThemeConf& a, ThemeConf& b) {
    a.Swap(&b);
  }
  inline void Swap(ThemeConf* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ThemeConf* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ThemeConf* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ThemeConf>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const ThemeConf& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const ThemeConf& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ThemeConf* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protoconf.ThemeConf";
  }
  protected:
  explicit ThemeConf(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef ThemeConf_Theme Theme;

  // accessors -------------------------------------------------------

  enum : int {
    kThemeMapFieldNumber = 1,
  };
  // map<string, .protoconf.ThemeConf.Theme> theme_map = 1 [(.tableau.field) = {
  int theme_map_size() const;
  private:
  int _internal_theme_map_size() const;
  public:
  void clear_theme_map();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::protoconf::ThemeConf_Theme >&
      _internal_theme_map() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::protoconf::ThemeConf_Theme >*
      _internal_mutable_theme_map();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::protoconf::ThemeConf_Theme >&
      theme_map() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::protoconf::ThemeConf_Theme >*
      mutable_theme_map();

  // @@protoc_insertion_point(class_scope:protoconf.ThemeConf)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      ThemeConf_ThemeMapEntry_DoNotUse,
      std::string, ::protoconf::ThemeConf_Theme,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE> theme_map_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_test_5fconf_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// ActivityConf_Activity_Chapter

// uint32 chapter_id = 1 [(.tableau.field) = {
inline void ActivityConf_Activity_Chapter::clear_chapter_id() {
  chapter_id_ = 0u;
}
inline uint32_t ActivityConf_Activity_Chapter::_internal_chapter_id() const {
  return chapter_id_;
}
inline uint32_t ActivityConf_Activity_Chapter::chapter_id() const {
  // @@protoc_insertion_point(field_get:protoconf.ActivityConf.Activity.Chapter.chapter_id)
  return _internal_chapter_id();
}
inline void ActivityConf_Activity_Chapter::_internal_set_chapter_id(uint32_t value) {
  
  chapter_id_ = value;
}
inline void ActivityConf_Activity_Chapter::set_chapter_id(uint32_t value) {
  _internal_set_chapter_id(value);
  // @@protoc_insertion_point(field_set:protoconf.ActivityConf.Activity.Chapter.chapter_id)
}

// string chapter_name = 2 [(.tableau.field) = {
inline void ActivityConf_Activity_Chapter::clear_chapter_name() {
  chapter_name_.ClearToEmpty();
}
inline const std::string& ActivityConf_Activity_Chapter::chapter_name() const {
  // @@protoc_insertion_point(field_get:protoconf.ActivityConf.Activity.Chapter.chapter_name)
  return _internal_chapter_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ActivityConf_Activity_Chapter::set_chapter_name(ArgT0&& arg0, ArgT... args) {
 
 chapter_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protoconf.ActivityConf.Activity.Chapter.chapter_name)
}
inline std::string* ActivityConf_Activity_Chapter::mutable_chapter_name() {
  std::string* _s = _internal_mutable_chapter_name();
  // @@protoc_insertion_point(field_mutable:protoconf.ActivityConf.Activity.Chapter.chapter_name)
  return _s;
}
inline const std::string& ActivityConf_Activity_Chapter::_internal_chapter_name() const {
  return chapter_name_.Get();
}
inline void ActivityConf_Activity_Chapter::_internal_set_chapter_name(const std::string& value) {
  
  chapter_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ActivityConf_Activity_Chapter::_internal_mutable_chapter_name() {
  
  return chapter_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ActivityConf_Activity_Chapter::release_chapter_name() {
  // @@protoc_insertion_point(field_release:protoconf.ActivityConf.Activity.Chapter.chapter_name)
  return chapter_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ActivityConf_Activity_Chapter::set_allocated_chapter_name(std::string* chapter_name) {
  if (chapter_name != nullptr) {
    
  } else {
    
  }
  chapter_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), chapter_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (chapter_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    chapter_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protoconf.ActivityConf.Activity.Chapter.chapter_name)
}

// uint32 award_id = 3 [(.tableau.field) = {
inline void ActivityConf_Activity_Chapter::clear_award_id() {
  award_id_ = 0u;
}
inline uint32_t ActivityConf_Activity_Chapter::_internal_award_id() const {
  return award_id_;
}
inline uint32_t ActivityConf_Activity_Chapter::award_id() const {
  // @@protoc_insertion_point(field_get:protoconf.ActivityConf.Activity.Chapter.award_id)
  return _internal_award_id();
}
inline void ActivityConf_Activity_Chapter::_internal_set_award_id(uint32_t value) {
  
  award_id_ = value;
}
inline void ActivityConf_Activity_Chapter::set_award_id(uint32_t value) {
  _internal_set_award_id(value);
  // @@protoc_insertion_point(field_set:protoconf.ActivityConf.Activity.Chapter.award_id)
}

// map<uint32, .protoconf.Section> section_map = 4 [(.tableau.field) = {
inline int ActivityConf_Activity_Chapter::_internal_section_map_size() const {
  return section_map_.size();
}
inline int ActivityConf_Activity_Chapter::section_map_size() const {
  return _internal_section_map_size();
}
inline void ActivityConf_Activity_Chapter::clear_section_map() {
  section_map_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::protoconf::Section >&
ActivityConf_Activity_Chapter::_internal_section_map() const {
  return section_map_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::protoconf::Section >&
ActivityConf_Activity_Chapter::section_map() const {
  // @@protoc_insertion_point(field_map:protoconf.ActivityConf.Activity.Chapter.section_map)
  return _internal_section_map();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::protoconf::Section >*
ActivityConf_Activity_Chapter::_internal_mutable_section_map() {
  return section_map_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::protoconf::Section >*
ActivityConf_Activity_Chapter::mutable_section_map() {
  // @@protoc_insertion_point(field_mutable_map:protoconf.ActivityConf.Activity.Chapter.section_map)
  return _internal_mutable_section_map();
}

// -------------------------------------------------------------------

// ActivityConf_Activity

// uint64 activity_id = 1 [(.tableau.field) = {
inline void ActivityConf_Activity::clear_activity_id() {
  activity_id_ = uint64_t{0u};
}
inline uint64_t ActivityConf_Activity::_internal_activity_id() const {
  return activity_id_;
}
inline uint64_t ActivityConf_Activity::activity_id() const {
  // @@protoc_insertion_point(field_get:protoconf.ActivityConf.Activity.activity_id)
  return _internal_activity_id();
}
inline void ActivityConf_Activity::_internal_set_activity_id(uint64_t value) {
  
  activity_id_ = value;
}
inline void ActivityConf_Activity::set_activity_id(uint64_t value) {
  _internal_set_activity_id(value);
  // @@protoc_insertion_point(field_set:protoconf.ActivityConf.Activity.activity_id)
}

// string activity_name = 2 [(.tableau.field) = {
inline void ActivityConf_Activity::clear_activity_name() {
  activity_name_.ClearToEmpty();
}
inline const std::string& ActivityConf_Activity::activity_name() const {
  // @@protoc_insertion_point(field_get:protoconf.ActivityConf.Activity.activity_name)
  return _internal_activity_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ActivityConf_Activity::set_activity_name(ArgT0&& arg0, ArgT... args) {
 
 activity_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protoconf.ActivityConf.Activity.activity_name)
}
inline std::string* ActivityConf_Activity::mutable_activity_name() {
  std::string* _s = _internal_mutable_activity_name();
  // @@protoc_insertion_point(field_mutable:protoconf.ActivityConf.Activity.activity_name)
  return _s;
}
inline const std::string& ActivityConf_Activity::_internal_activity_name() const {
  return activity_name_.Get();
}
inline void ActivityConf_Activity::_internal_set_activity_name(const std::string& value) {
  
  activity_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ActivityConf_Activity::_internal_mutable_activity_name() {
  
  return activity_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ActivityConf_Activity::release_activity_name() {
  // @@protoc_insertion_point(field_release:protoconf.ActivityConf.Activity.activity_name)
  return activity_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ActivityConf_Activity::set_allocated_activity_name(std::string* activity_name) {
  if (activity_name != nullptr) {
    
  } else {
    
  }
  activity_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), activity_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (activity_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    activity_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protoconf.ActivityConf.Activity.activity_name)
}

// map<uint32, .protoconf.ActivityConf.Activity.Chapter> chapter_map = 3 [(.tableau.field) = {
inline int ActivityConf_Activity::_internal_chapter_map_size() const {
  return chapter_map_.size();
}
inline int ActivityConf_Activity::chapter_map_size() const {
  return _internal_chapter_map_size();
}
inline void ActivityConf_Activity::clear_chapter_map() {
  chapter_map_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::protoconf::ActivityConf_Activity_Chapter >&
ActivityConf_Activity::_internal_chapter_map() const {
  return chapter_map_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::protoconf::ActivityConf_Activity_Chapter >&
ActivityConf_Activity::chapter_map() const {
  // @@protoc_insertion_point(field_map:protoconf.ActivityConf.Activity.chapter_map)
  return _internal_chapter_map();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::protoconf::ActivityConf_Activity_Chapter >*
ActivityConf_Activity::_internal_mutable_chapter_map() {
  return chapter_map_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::protoconf::ActivityConf_Activity_Chapter >*
ActivityConf_Activity::mutable_chapter_map() {
  // @@protoc_insertion_point(field_mutable_map:protoconf.ActivityConf.Activity.chapter_map)
  return _internal_mutable_chapter_map();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// ActivityConf

// map<uint64, .protoconf.ActivityConf.Activity> activity_map = 1 [(.tableau.field) = {
inline int ActivityConf::_internal_activity_map_size() const {
  return activity_map_.size();
}
inline int ActivityConf::activity_map_size() const {
  return _internal_activity_map_size();
}
inline void ActivityConf::clear_activity_map() {
  activity_map_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, ::protoconf::ActivityConf_Activity >&
ActivityConf::_internal_activity_map() const {
  return activity_map_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, ::protoconf::ActivityConf_Activity >&
ActivityConf::activity_map() const {
  // @@protoc_insertion_point(field_map:protoconf.ActivityConf.activity_map)
  return _internal_activity_map();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, ::protoconf::ActivityConf_Activity >*
ActivityConf::_internal_mutable_activity_map() {
  return activity_map_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, ::protoconf::ActivityConf_Activity >*
ActivityConf::mutable_activity_map() {
  // @@protoc_insertion_point(field_mutable_map:protoconf.ActivityConf.activity_map)
  return _internal_mutable_activity_map();
}

// map<uint32, .protoconf.Item> bonus_map = 2 [(.tableau.field) = {
inline int ActivityConf::_internal_bonus_map_size() const {
  return bonus_map_.size();
}
inline int ActivityConf::bonus_map_size() const {
  return _internal_bonus_map_size();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::protoconf::Item >&
ActivityConf::_internal_bonus_map() const {
  return bonus_map_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::protoconf::Item >&
ActivityConf::bonus_map() const {
  // @@protoc_insertion_point(field_map:protoconf.ActivityConf.bonus_map)
  return _internal_bonus_map();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::protoconf::Item >*
ActivityConf::_internal_mutable_bonus_map() {
  return bonus_map_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::protoconf::Item >*
ActivityConf::mutable_bonus_map() {
  // @@protoc_insertion_point(field_mutable_map:protoconf.ActivityConf.bonus_map)
  return _internal_mutable_bonus_map();
}

// string theme_name = 3 [(.tableau.field) = {
inline void ActivityConf::clear_theme_name() {
  theme_name_.ClearToEmpty();
}
inline const std::string& ActivityConf::theme_name() const {
  // @@protoc_insertion_point(field_get:protoconf.ActivityConf.theme_name)
  return _internal_theme_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ActivityConf::set_theme_name(ArgT0&& arg0, ArgT... args) {
 
 theme_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protoconf.ActivityConf.theme_name)
}
inline std::string* ActivityConf::mutable_theme_name() {
  std::string* _s = _internal_mutable_theme_name();
  // @@protoc_insertion_point(field_mutable:protoconf.ActivityConf.theme_name)
  return _s;
}
inline const std::string& ActivityConf::_internal_theme_name() const {
  return theme_name_.Get();
}
inline void ActivityConf::_internal_set_theme_name(const std::string& value) {
  
  theme_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ActivityConf::_internal_mutable_theme_name() {
  
  return theme_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ActivityConf::release_theme_name() {
  // @@protoc_insertion_point(field_release:protoconf.ActivityConf.theme_name)
  return theme_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ActivityConf::set_allocated_theme_name(std::string* theme_name) {
  if (theme_name != nullptr) {
    
  } else {
    
  }
  theme_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), theme_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (theme_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    theme_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protoconf.ActivityConf.theme_name)
}

// int32 cost_item_id = 4 [(.tableau.field) = {
inline void ActivityConf::clear_cost_item_id() {
  cost_item_id_ = 0;
}
inline int32_t ActivityConf::_internal_cost_item_id() const {
  return cost_item_id_;
}
inline int32_t ActivityConf::cost_item_id() const {
  // @@protoc_insertion_point(field_get:protoconf.ActivityConf.cost_item_id)
  return _internal_cost_item_id();
}
inline void ActivityConf::_internal_set_cost_item_id(int32_t value) {
  
  cost_item_id_ = value;
}
inline void ActivityConf::set_cost_item_id(int32_t value) {
  _internal_set_cost_item_id(value);
  // @@protoc_insertion_point(field_set:protoconf.ActivityConf.cost_item_id)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// Section

// uint32 section_id = 1 [(.tableau.field) = {
inline void Section::clear_section_id() {
  section_id_ = 0u;
}
inline uint32_t Section::_internal_section_id() const {
  return section_id_;
}
inline uint32_t Section::section_id() const {
  // @@protoc_insertion_point(field_get:protoconf.Section.section_id)
  return _internal_section_id();
}
inline void Section::_internal_set_section_id(uint32_t value) {
  
  section_id_ = value;
}
inline void Section::set_section_id(uint32_t value) {
  _internal_set_section_id(value);
  // @@protoc_insertion_point(field_set:protoconf.Section.section_id)
}

// string section_name = 2 [(.tableau.field) = {
inline void Section::clear_section_name() {
  section_name_.ClearToEmpty();
}
inline const std::string& Section::section_name() const {
  // @@protoc_insertion_point(field_get:protoconf.Section.section_name)
  return _internal_section_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void Section::set_section_name(ArgT0&& arg0, ArgT... args) {
 
 section_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protoconf.Section.section_name)
}
inline std::string* Section::mutable_section_name() {
  std::string* _s = _internal_mutable_section_name();
  // @@protoc_insertion_point(field_mutable:protoconf.Section.section_name)
  return _s;
}
inline const std::string& Section::_internal_section_name() const {
  return section_name_.Get();
}
inline void Section::_internal_set_section_name(const std::string& value) {
  
  section_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* Section::_internal_mutable_section_name() {
  
  return section_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* Section::release_section_name() {
  // @@protoc_insertion_point(field_release:protoconf.Section.section_name)
  return section_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void Section::set_allocated_section_name(std::string* section_name) {
  if (section_name != nullptr) {
    
  } else {
    
  }
  section_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), section_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (section_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    section_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protoconf.Section.section_name)
}

// repeated .protoconf.Item section_item_list = 3 [(.tableau.field) = {
inline int Section::_internal_section_item_list_size() const {
  return section_item_list_.size();
}
inline int Section::section_item_list_size() const {
  return _internal_section_item_list_size();
}
inline ::protoconf::Item* Section::mutable_section_item_list(int index) {
  // @@protoc_insertion_point(field_mutable:protoconf.Section.section_item_list)
  return section_item_list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protoconf::Item >*
Section::mutable_section_item_list() {
  // @@protoc_insertion_point(field_mutable_list:protoconf.Section.section_item_list)
  return &section_item_list_;
}
inline const ::protoconf::Item& Section::_internal_section_item_list(int index) const {
  return section_item_list_.Get(index);
}
inline const ::protoconf::Item& Section::section_item_list(int index) const {
  // @@protoc_insertion_point(field_get:protoconf.Section.section_item_list)
  return _internal_section_item_list(index);
}
inline ::protoconf::Item* Section::_internal_add_section_item_list() {
  return section_item_list_.Add();
}
inline ::protoconf::Item* Section::add_section_item_list() {
  ::protoconf::Item* _add = _internal_add_section_item_list();
  // @@protoc_insertion_point(field_add:protoconf.Section.section_item_list)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::protoconf::Item >&
Section::section_item_list() const {
  // @@protoc_insertion_point(field_list:protoconf.Section.section_item_list)
  return section_item_list_;
}

// map<uint32, int32> section_rank_map = 4 [(.tableau.field) = {
inline int Section::_internal_section_rank_map_size() const {
  return section_rank_map_.size();
}
inline int Section::section_rank_map_size() const {
  return _internal_section_rank_map_size();
}
inline void Section::clear_section_rank_map() {
  section_rank_map_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, int32_t >&
Section::_internal_section_rank_map() const {
  return section_rank_map_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, int32_t >&
Section::section_rank_map() const {
  // @@protoc_insertion_point(field_map:protoconf.Section.section_rank_map)
  return _internal_section_rank_map();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, int32_t >*
Section::_internal_mutable_section_rank_map() {
  return section_rank_map_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, int32_t >*
Section::mutable_section_rank_map() {
  // @@protoc_insertion_point(field_mutable_map:protoconf.Section.section_rank_map)
  return _internal_mutable_section_rank_map();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// ChapterConf_Chapter

// uint64 id = 1 [(.tableau.field) = {
inline void ChapterConf_Chapter::clear_id() {
  id_ = uint64_t{0u};
}
inline uint64_t ChapterConf_Chapter::_internal_id() const {
  return id_;
}
inline uint64_t ChapterConf_Chapter::id() const {
  // @@protoc_insertion_point(field_get:protoconf.ChapterConf.Chapter.id)
  return _internal_id();
}
inline void ChapterConf_Chapter::_internal_set_id(uint64_t value) {
  
  id_ = value;
}
inline void ChapterConf_Chapter::set_id(uint64_t value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:protoconf.ChapterConf.Chapter.id)
}

// string name = 2 [(.tableau.field) = {
inline void ChapterConf_Chapter::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& ChapterConf_Chapter::name() const {
  // @@protoc_insertion_point(field_get:protoconf.ChapterConf.Chapter.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ChapterConf_Chapter::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protoconf.ChapterConf.Chapter.name)
}
inline std::string* ChapterConf_Chapter::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:protoconf.ChapterConf.Chapter.name)
  return _s;
}
inline const std::string& ChapterConf_Chapter::_internal_name() const {
  return name_.Get();
}
inline void ChapterConf_Chapter::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ChapterConf_Chapter::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ChapterConf_Chapter::release_name() {
  // @@protoc_insertion_point(field_release:protoconf.ChapterConf.Chapter.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ChapterConf_Chapter::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protoconf.ChapterConf.Chapter.name)
}

// -------------------------------------------------------------------

// ChapterConf

// map<uint64, .protoconf.ChapterConf.Chapter> chapter_map = 1 [(.tableau.field) = {
inline int ChapterConf::_internal_chapter_map_size() const {
  return chapter_map_.size();
}
inline int ChapterConf::chapter_map_size() const {
  return _internal_chapter_map_size();
}
inline void ChapterConf::clear_chapter_map() {
  chapter_map_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, ::protoconf::ChapterConf_Chapter >&
ChapterConf::_internal_chapter_map() const {
  return chapter_map_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, ::protoconf::ChapterConf_Chapter >&
ChapterConf::chapter_map() const {
  // @@protoc_insertion_point(field_map:protoconf.ChapterConf.chapter_map)
  return _internal_chapter_map();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, ::protoconf::ChapterConf_Chapter >*
ChapterConf::_internal_mutable_chapter_map() {
  return chapter_map_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< uint64_t, ::protoconf::ChapterConf_Chapter >*
ChapterConf::mutable_chapter_map() {
  // @@protoc_insertion_point(field_mutable_map:protoconf.ChapterConf.chapter_map)
  return _internal_mutable_chapter_map();
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// ThemeConf_Theme

// string name = 2 [(.tableau.field) = {
inline void ThemeConf_Theme::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& ThemeConf_Theme::name() const {
  // @@protoc_insertion_point(field_get:protoconf.ThemeConf.Theme.name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void ThemeConf_Theme::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protoconf.ThemeConf.Theme.name)
}
inline std::string* ThemeConf_Theme::mutable_name() {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:protoconf.ThemeConf.Theme.name)
  return _s;
}
inline const std::string& ThemeConf_Theme::_internal_name() const {
  return name_.Get();
}
inline void ThemeConf_Theme::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* ThemeConf_Theme::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* ThemeConf_Theme::release_name() {
  // @@protoc_insertion_point(field_release:protoconf.ThemeConf.Theme.name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void ThemeConf_Theme::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protoconf.ThemeConf.Theme.name)
}

// uint64 value = 1 [(.tableau.field) = {
inline void ThemeConf_Theme::clear_value() {
  value_ = uint64_t{0u};
}
inline uint64_t ThemeConf_Theme::_internal_value() const {
  return value_;
}
inline uint64_t ThemeConf_Theme::value() const {
  // @@protoc_insertion_point(field_get:protoconf.ThemeConf.Theme.value)
  return _internal_value();
}
inline void ThemeConf_Theme::_internal_set_value(uint64_t value) {
  
  value_ = value;
}
inline void ThemeConf_Theme::set_value(uint64_t value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:protoconf.ThemeConf.Theme.value)
}

// -------------------------------------------------------------------

// ThemeConf

// map<string, .protoconf.ThemeConf.Theme> theme_map = 1 [(.tableau.field) = {
inline int ThemeConf::_internal_theme_map_size() const {
  return theme_map_.size();
}
inline int ThemeConf::theme_map_size() const {
  return _internal_theme_map_size();
}
inline void ThemeConf::clear_theme_map() {
  theme_map_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::protoconf::ThemeConf_Theme >&
ThemeConf::_internal_theme_map() const {
  return theme_map_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::protoconf::ThemeConf_Theme >&
ThemeConf::theme_map() const {
  // @@protoc_insertion_point(field_map:protoconf.ThemeConf.theme_map)
  return _internal_theme_map();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::protoconf::ThemeConf_Theme >*
ThemeConf::_internal_mutable_theme_map() {
  return theme_map_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::protoconf::ThemeConf_Theme >*
ThemeConf::mutable_theme_map() {
  // @@protoc_insertion_point(field_mutable_map:protoconf.ThemeConf.theme_map)
  return _internal_mutable_theme_map();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protoconf

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_test_5fconf_2eproto
