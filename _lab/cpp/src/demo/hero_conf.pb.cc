// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: hero_conf.proto

#include "hero_conf.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace protoconf {
constexpr HeroConf_HeroMapEntry_DoNotUse::HeroConf_HeroMapEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct HeroConf_HeroMapEntry_DoNotUseDefaultTypeInternal {
  constexpr HeroConf_HeroMapEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~HeroConf_HeroMapEntry_DoNotUseDefaultTypeInternal() {}
  union {
    HeroConf_HeroMapEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT HeroConf_HeroMapEntry_DoNotUseDefaultTypeInternal _HeroConf_HeroMapEntry_DoNotUse_default_instance_;
constexpr HeroConf_Hero_AttrMapEntry_DoNotUse::HeroConf_Hero_AttrMapEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct HeroConf_Hero_AttrMapEntry_DoNotUseDefaultTypeInternal {
  constexpr HeroConf_Hero_AttrMapEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~HeroConf_Hero_AttrMapEntry_DoNotUseDefaultTypeInternal() {}
  union {
    HeroConf_Hero_AttrMapEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT HeroConf_Hero_AttrMapEntry_DoNotUseDefaultTypeInternal _HeroConf_Hero_AttrMapEntry_DoNotUse_default_instance_;
constexpr HeroConf_Hero_Attr::HeroConf_Hero_Attr(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : title_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , attr_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct HeroConf_Hero_AttrDefaultTypeInternal {
  constexpr HeroConf_Hero_AttrDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~HeroConf_Hero_AttrDefaultTypeInternal() {}
  union {
    HeroConf_Hero_Attr _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT HeroConf_Hero_AttrDefaultTypeInternal _HeroConf_Hero_Attr_default_instance_;
constexpr HeroConf_Hero::HeroConf_Hero(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : attr_map_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{})
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct HeroConf_HeroDefaultTypeInternal {
  constexpr HeroConf_HeroDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~HeroConf_HeroDefaultTypeInternal() {}
  union {
    HeroConf_Hero _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT HeroConf_HeroDefaultTypeInternal _HeroConf_Hero_default_instance_;
constexpr HeroConf::HeroConf(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : hero_map_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}){}
struct HeroConfDefaultTypeInternal {
  constexpr HeroConfDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~HeroConfDefaultTypeInternal() {}
  union {
    HeroConf _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT HeroConfDefaultTypeInternal _HeroConf_default_instance_;
}  // namespace protoconf
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_hero_5fconf_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_hero_5fconf_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_hero_5fconf_2eproto = nullptr;

const uint32_t TableStruct_hero_5fconf_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::protoconf::HeroConf_HeroMapEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protoconf::HeroConf_HeroMapEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protoconf::HeroConf_HeroMapEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::protoconf::HeroConf_HeroMapEntry_DoNotUse, value_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::protoconf::HeroConf_Hero_AttrMapEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protoconf::HeroConf_Hero_AttrMapEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protoconf::HeroConf_Hero_AttrMapEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::protoconf::HeroConf_Hero_AttrMapEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protoconf::HeroConf_Hero_Attr, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protoconf::HeroConf_Hero_Attr, title_),
  PROTOBUF_FIELD_OFFSET(::protoconf::HeroConf_Hero_Attr, attr_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protoconf::HeroConf_Hero, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protoconf::HeroConf_Hero, name_),
  PROTOBUF_FIELD_OFFSET(::protoconf::HeroConf_Hero, attr_map_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protoconf::HeroConf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protoconf::HeroConf, hero_map_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, -1, sizeof(::protoconf::HeroConf_HeroMapEntry_DoNotUse)},
  { 10, 18, -1, sizeof(::protoconf::HeroConf_Hero_AttrMapEntry_DoNotUse)},
  { 20, -1, -1, sizeof(::protoconf::HeroConf_Hero_Attr)},
  { 28, -1, -1, sizeof(::protoconf::HeroConf_Hero)},
  { 36, -1, -1, sizeof(::protoconf::HeroConf)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protoconf::_HeroConf_HeroMapEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protoconf::_HeroConf_Hero_AttrMapEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protoconf::_HeroConf_Hero_Attr_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protoconf::_HeroConf_Hero_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protoconf::_HeroConf_default_instance_),
};

const char descriptor_table_protodef_hero_5fconf_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017hero_conf.proto\022\tprotoconf\032\036tableau/pr"
  "otobuf/tableau.proto\"\251\003\n\010HeroConf\022@\n\010her"
  "o_map\030\001 \003(\0132 .protoconf.HeroConf.HeroMap"
  "EntryB\014\202\265\030\010\032\004Name \001\032H\n\014HeroMapEntry\022\013\n\003k"
  "ey\030\001 \001(\t\022\'\n\005value\030\002 \001(\0132\030.protoconf.Hero"
  "Conf.Hero:\0028\001\032\365\001\n\004Hero\022\030\n\004name\030\001 \001(\tB\n\202\265"
  "\030\006\n\004Name\022F\n\010attr_map\030\002 \003(\0132%.protoconf.H"
  "eroConf.Hero.AttrMapEntryB\r\202\265\030\t\032\005Title \001"
  "\032M\n\014AttrMapEntry\022\013\n\003key\030\001 \001(\t\022,\n\005value\030\002"
  " \001(\0132\035.protoconf.HeroConf.Hero.Attr:\0028\001\032"
  "<\n\004Attr\022\032\n\005title\030\001 \001(\tB\013\202\265\030\007\n\005Title\022\030\n\004a"
  "ttr\030\002 \001(\tB\n\202\265\030\006\n\004Attr:\031\202\265\030\025\n\010HeroConf\220\003\001"
  "\232\003\005TitleBMZ<github.com/tableauio/loader/"
  "test/go-tableau-loader/protoconf\202\265\030\013\n\tHe"
  "ro.xlsxb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_hero_5fconf_2eproto_deps[1] = {
  &::descriptor_table_tableau_2fprotobuf_2ftableau_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_hero_5fconf_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_hero_5fconf_2eproto = {
  false, false, 575, descriptor_table_protodef_hero_5fconf_2eproto, "hero_conf.proto", 
  &descriptor_table_hero_5fconf_2eproto_once, descriptor_table_hero_5fconf_2eproto_deps, 1, 5,
  schemas, file_default_instances, TableStruct_hero_5fconf_2eproto::offsets,
  file_level_metadata_hero_5fconf_2eproto, file_level_enum_descriptors_hero_5fconf_2eproto, file_level_service_descriptors_hero_5fconf_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_hero_5fconf_2eproto_getter() {
  return &descriptor_table_hero_5fconf_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_hero_5fconf_2eproto(&descriptor_table_hero_5fconf_2eproto);
namespace protoconf {

// ===================================================================

HeroConf_HeroMapEntry_DoNotUse::HeroConf_HeroMapEntry_DoNotUse() {}
HeroConf_HeroMapEntry_DoNotUse::HeroConf_HeroMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void HeroConf_HeroMapEntry_DoNotUse::MergeFrom(const HeroConf_HeroMapEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata HeroConf_HeroMapEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_hero_5fconf_2eproto_getter, &descriptor_table_hero_5fconf_2eproto_once,
      file_level_metadata_hero_5fconf_2eproto[0]);
}

// ===================================================================

HeroConf_Hero_AttrMapEntry_DoNotUse::HeroConf_Hero_AttrMapEntry_DoNotUse() {}
HeroConf_Hero_AttrMapEntry_DoNotUse::HeroConf_Hero_AttrMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void HeroConf_Hero_AttrMapEntry_DoNotUse::MergeFrom(const HeroConf_Hero_AttrMapEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata HeroConf_Hero_AttrMapEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_hero_5fconf_2eproto_getter, &descriptor_table_hero_5fconf_2eproto_once,
      file_level_metadata_hero_5fconf_2eproto[1]);
}

// ===================================================================

class HeroConf_Hero_Attr::_Internal {
 public:
};

HeroConf_Hero_Attr::HeroConf_Hero_Attr(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protoconf.HeroConf.Hero.Attr)
}
HeroConf_Hero_Attr::HeroConf_Hero_Attr(const HeroConf_Hero_Attr& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_title().empty()) {
    title_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_title(), 
      GetArenaForAllocation());
  }
  attr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    attr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_attr().empty()) {
    attr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_attr(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:protoconf.HeroConf.Hero.Attr)
}

inline void HeroConf_Hero_Attr::SharedCtor() {
title_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  title_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
attr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  attr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

HeroConf_Hero_Attr::~HeroConf_Hero_Attr() {
  // @@protoc_insertion_point(destructor:protoconf.HeroConf.Hero.Attr)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void HeroConf_Hero_Attr::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  title_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  attr_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void HeroConf_Hero_Attr::ArenaDtor(void* object) {
  HeroConf_Hero_Attr* _this = reinterpret_cast< HeroConf_Hero_Attr* >(object);
  (void)_this;
}
void HeroConf_Hero_Attr::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HeroConf_Hero_Attr::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void HeroConf_Hero_Attr::Clear() {
// @@protoc_insertion_point(message_clear_start:protoconf.HeroConf.Hero.Attr)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  title_.ClearToEmpty();
  attr_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HeroConf_Hero_Attr::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string title = 1 [(.tableau.field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_title();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protoconf.HeroConf.Hero.Attr.title"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string attr = 2 [(.tableau.field) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_attr();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protoconf.HeroConf.Hero.Attr.attr"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HeroConf_Hero_Attr::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protoconf.HeroConf.Hero.Attr)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string title = 1 [(.tableau.field) = {
  if (!this->_internal_title().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_title().data(), static_cast<int>(this->_internal_title().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protoconf.HeroConf.Hero.Attr.title");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_title(), target);
  }

  // string attr = 2 [(.tableau.field) = {
  if (!this->_internal_attr().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_attr().data(), static_cast<int>(this->_internal_attr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protoconf.HeroConf.Hero.Attr.attr");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_attr(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protoconf.HeroConf.Hero.Attr)
  return target;
}

size_t HeroConf_Hero_Attr::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protoconf.HeroConf.Hero.Attr)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string title = 1 [(.tableau.field) = {
  if (!this->_internal_title().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_title());
  }

  // string attr = 2 [(.tableau.field) = {
  if (!this->_internal_attr().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_attr());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HeroConf_Hero_Attr::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    HeroConf_Hero_Attr::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HeroConf_Hero_Attr::GetClassData() const { return &_class_data_; }

void HeroConf_Hero_Attr::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<HeroConf_Hero_Attr *>(to)->MergeFrom(
      static_cast<const HeroConf_Hero_Attr &>(from));
}


void HeroConf_Hero_Attr::MergeFrom(const HeroConf_Hero_Attr& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protoconf.HeroConf.Hero.Attr)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_title().empty()) {
    _internal_set_title(from._internal_title());
  }
  if (!from._internal_attr().empty()) {
    _internal_set_attr(from._internal_attr());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HeroConf_Hero_Attr::CopyFrom(const HeroConf_Hero_Attr& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protoconf.HeroConf.Hero.Attr)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeroConf_Hero_Attr::IsInitialized() const {
  return true;
}

void HeroConf_Hero_Attr::InternalSwap(HeroConf_Hero_Attr* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &title_, lhs_arena,
      &other->title_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &attr_, lhs_arena,
      &other->attr_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata HeroConf_Hero_Attr::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_hero_5fconf_2eproto_getter, &descriptor_table_hero_5fconf_2eproto_once,
      file_level_metadata_hero_5fconf_2eproto[2]);
}

// ===================================================================

class HeroConf_Hero::_Internal {
 public:
};

HeroConf_Hero::HeroConf_Hero(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  attr_map_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protoconf.HeroConf.Hero)
}
HeroConf_Hero::HeroConf_Hero(const HeroConf_Hero& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  attr_map_.MergeFrom(from.attr_map_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:protoconf.HeroConf.Hero)
}

inline void HeroConf_Hero::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

HeroConf_Hero::~HeroConf_Hero() {
  // @@protoc_insertion_point(destructor:protoconf.HeroConf.Hero)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void HeroConf_Hero::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void HeroConf_Hero::ArenaDtor(void* object) {
  HeroConf_Hero* _this = reinterpret_cast< HeroConf_Hero* >(object);
  (void)_this;
  _this->attr_map_. ~MapField();
}
inline void HeroConf_Hero::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &HeroConf_Hero::ArenaDtor);
  }
}
void HeroConf_Hero::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void HeroConf_Hero::Clear() {
// @@protoc_insertion_point(message_clear_start:protoconf.HeroConf.Hero)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  attr_map_.Clear();
  name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HeroConf_Hero::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string name = 1 [(.tableau.field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protoconf.HeroConf.Hero.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<string, .protoconf.HeroConf.Hero.Attr> attr_map = 2 [(.tableau.field) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&attr_map_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HeroConf_Hero::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protoconf.HeroConf.Hero)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1 [(.tableau.field) = {
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protoconf.HeroConf.Hero.name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // map<string, .protoconf.HeroConf.Hero.Attr> attr_map = 2 [(.tableau.field) = {
  if (!this->_internal_attr_map().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::protoconf::HeroConf_Hero_Attr >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "protoconf.HeroConf.Hero.AttrMapEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_attr_map().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_attr_map().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::protoconf::HeroConf_Hero_Attr >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::protoconf::HeroConf_Hero_Attr >::const_iterator
          it = this->_internal_attr_map().begin();
          it != this->_internal_attr_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = HeroConf_Hero_AttrMapEntry_DoNotUse::Funcs::InternalSerialize(2, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::protoconf::HeroConf_Hero_Attr >::const_iterator
          it = this->_internal_attr_map().begin();
          it != this->_internal_attr_map().end(); ++it) {
        target = HeroConf_Hero_AttrMapEntry_DoNotUse::Funcs::InternalSerialize(2, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protoconf.HeroConf.Hero)
  return target;
}

size_t HeroConf_Hero::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protoconf.HeroConf.Hero)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .protoconf.HeroConf.Hero.Attr> attr_map = 2 [(.tableau.field) = {
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_attr_map_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::protoconf::HeroConf_Hero_Attr >::const_iterator
      it = this->_internal_attr_map().begin();
      it != this->_internal_attr_map().end(); ++it) {
    total_size += HeroConf_Hero_AttrMapEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // string name = 1 [(.tableau.field) = {
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HeroConf_Hero::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    HeroConf_Hero::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HeroConf_Hero::GetClassData() const { return &_class_data_; }

void HeroConf_Hero::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<HeroConf_Hero *>(to)->MergeFrom(
      static_cast<const HeroConf_Hero &>(from));
}


void HeroConf_Hero::MergeFrom(const HeroConf_Hero& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protoconf.HeroConf.Hero)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  attr_map_.MergeFrom(from.attr_map_);
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HeroConf_Hero::CopyFrom(const HeroConf_Hero& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protoconf.HeroConf.Hero)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeroConf_Hero::IsInitialized() const {
  return true;
}

void HeroConf_Hero::InternalSwap(HeroConf_Hero* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  attr_map_.InternalSwap(&other->attr_map_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata HeroConf_Hero::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_hero_5fconf_2eproto_getter, &descriptor_table_hero_5fconf_2eproto_once,
      file_level_metadata_hero_5fconf_2eproto[3]);
}

// ===================================================================

class HeroConf::_Internal {
 public:
};

HeroConf::HeroConf(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  hero_map_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protoconf.HeroConf)
}
HeroConf::HeroConf(const HeroConf& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  hero_map_.MergeFrom(from.hero_map_);
  // @@protoc_insertion_point(copy_constructor:protoconf.HeroConf)
}

inline void HeroConf::SharedCtor() {
}

HeroConf::~HeroConf() {
  // @@protoc_insertion_point(destructor:protoconf.HeroConf)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void HeroConf::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void HeroConf::ArenaDtor(void* object) {
  HeroConf* _this = reinterpret_cast< HeroConf* >(object);
  (void)_this;
  _this->hero_map_. ~MapField();
}
inline void HeroConf::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &HeroConf::ArenaDtor);
  }
}
void HeroConf::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void HeroConf::Clear() {
// @@protoc_insertion_point(message_clear_start:protoconf.HeroConf)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  hero_map_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HeroConf::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<string, .protoconf.HeroConf.Hero> hero_map = 1 [(.tableau.field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&hero_map_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* HeroConf::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protoconf.HeroConf)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .protoconf.HeroConf.Hero> hero_map = 1 [(.tableau.field) = {
  if (!this->_internal_hero_map().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::protoconf::HeroConf_Hero >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        (void)p;
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
          "protoconf.HeroConf.HeroMapEntry.key");
      }
    };

    if (stream->IsSerializationDeterministic() &&
        this->_internal_hero_map().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_hero_map().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::protoconf::HeroConf_Hero >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::protoconf::HeroConf_Hero >::const_iterator
          it = this->_internal_hero_map().begin();
          it != this->_internal_hero_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = HeroConf_HeroMapEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second, target, stream);
        Utf8Check::Check(&(*items[static_cast<ptrdiff_t>(i)]));
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::protoconf::HeroConf_Hero >::const_iterator
          it = this->_internal_hero_map().begin();
          it != this->_internal_hero_map().end(); ++it) {
        target = HeroConf_HeroMapEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
        Utf8Check::Check(&(*it));
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protoconf.HeroConf)
  return target;
}

size_t HeroConf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protoconf.HeroConf)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<string, .protoconf.HeroConf.Hero> hero_map = 1 [(.tableau.field) = {
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_hero_map_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, ::protoconf::HeroConf_Hero >::const_iterator
      it = this->_internal_hero_map().begin();
      it != this->_internal_hero_map().end(); ++it) {
    total_size += HeroConf_HeroMapEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData HeroConf::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    HeroConf::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*HeroConf::GetClassData() const { return &_class_data_; }

void HeroConf::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<HeroConf *>(to)->MergeFrom(
      static_cast<const HeroConf &>(from));
}


void HeroConf::MergeFrom(const HeroConf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protoconf.HeroConf)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  hero_map_.MergeFrom(from.hero_map_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void HeroConf::CopyFrom(const HeroConf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protoconf.HeroConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeroConf::IsInitialized() const {
  return true;
}

void HeroConf::InternalSwap(HeroConf* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  hero_map_.InternalSwap(&other->hero_map_);
}

::PROTOBUF_NAMESPACE_ID::Metadata HeroConf::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_hero_5fconf_2eproto_getter, &descriptor_table_hero_5fconf_2eproto_once,
      file_level_metadata_hero_5fconf_2eproto[4]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace protoconf
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::protoconf::HeroConf_HeroMapEntry_DoNotUse* Arena::CreateMaybeMessage< ::protoconf::HeroConf_HeroMapEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protoconf::HeroConf_HeroMapEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::protoconf::HeroConf_Hero_AttrMapEntry_DoNotUse* Arena::CreateMaybeMessage< ::protoconf::HeroConf_Hero_AttrMapEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protoconf::HeroConf_Hero_AttrMapEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::protoconf::HeroConf_Hero_Attr* Arena::CreateMaybeMessage< ::protoconf::HeroConf_Hero_Attr >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protoconf::HeroConf_Hero_Attr >(arena);
}
template<> PROTOBUF_NOINLINE ::protoconf::HeroConf_Hero* Arena::CreateMaybeMessage< ::protoconf::HeroConf_Hero >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protoconf::HeroConf_Hero >(arena);
}
template<> PROTOBUF_NOINLINE ::protoconf::HeroConf* Arena::CreateMaybeMessage< ::protoconf::HeroConf >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protoconf::HeroConf >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
