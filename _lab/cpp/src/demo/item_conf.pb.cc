// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: item_conf.proto

#include "item_conf.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace protoconf {
constexpr ItemConf_ItemMapEntry_DoNotUse::ItemConf_ItemMapEntry_DoNotUse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized){}
struct ItemConf_ItemMapEntry_DoNotUseDefaultTypeInternal {
  constexpr ItemConf_ItemMapEntry_DoNotUseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ItemConf_ItemMapEntry_DoNotUseDefaultTypeInternal() {}
  union {
    ItemConf_ItemMapEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ItemConf_ItemMapEntry_DoNotUseDefaultTypeInternal _ItemConf_ItemMapEntry_DoNotUse_default_instance_;
constexpr ItemConf_Item::ItemConf_Item(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : param_list_()
  , _param_list_cached_byte_size_(0)
  , ext_type_list_()
  , _ext_type_list_cached_byte_size_(0)
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , path_(nullptr)
  , expiry_(nullptr)
  , duration_(nullptr)
  , id_(0u)
  , type_(0)
{}
struct ItemConf_ItemDefaultTypeInternal {
  constexpr ItemConf_ItemDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ItemConf_ItemDefaultTypeInternal() {}
  union {
    ItemConf_Item _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ItemConf_ItemDefaultTypeInternal _ItemConf_Item_default_instance_;
constexpr ItemConf::ItemConf(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : item_map_(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}){}
struct ItemConfDefaultTypeInternal {
  constexpr ItemConfDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ItemConfDefaultTypeInternal() {}
  union {
    ItemConf _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ItemConfDefaultTypeInternal _ItemConf_default_instance_;
constexpr Path::Path(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : dir_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct PathDefaultTypeInternal {
  constexpr PathDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PathDefaultTypeInternal() {}
  union {
    Path _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PathDefaultTypeInternal _Path_default_instance_;
}  // namespace protoconf
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_item_5fconf_2eproto[4];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_item_5fconf_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_item_5fconf_2eproto = nullptr;

const uint32_t TableStruct_item_5fconf_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::protoconf::ItemConf_ItemMapEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protoconf::ItemConf_ItemMapEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protoconf::ItemConf_ItemMapEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::protoconf::ItemConf_ItemMapEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protoconf::ItemConf_Item, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protoconf::ItemConf_Item, id_),
  PROTOBUF_FIELD_OFFSET(::protoconf::ItemConf_Item, name_),
  PROTOBUF_FIELD_OFFSET(::protoconf::ItemConf_Item, path_),
  PROTOBUF_FIELD_OFFSET(::protoconf::ItemConf_Item, expiry_),
  PROTOBUF_FIELD_OFFSET(::protoconf::ItemConf_Item, duration_),
  PROTOBUF_FIELD_OFFSET(::protoconf::ItemConf_Item, type_),
  PROTOBUF_FIELD_OFFSET(::protoconf::ItemConf_Item, param_list_),
  PROTOBUF_FIELD_OFFSET(::protoconf::ItemConf_Item, ext_type_list_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protoconf::ItemConf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protoconf::ItemConf, item_map_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protoconf::Path, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protoconf::Path, dir_),
  PROTOBUF_FIELD_OFFSET(::protoconf::Path, name_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, -1, sizeof(::protoconf::ItemConf_ItemMapEntry_DoNotUse)},
  { 10, -1, -1, sizeof(::protoconf::ItemConf_Item)},
  { 24, -1, -1, sizeof(::protoconf::ItemConf)},
  { 31, -1, -1, sizeof(::protoconf::Path)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protoconf::_ItemConf_ItemMapEntry_DoNotUse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protoconf::_ItemConf_Item_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protoconf::_ItemConf_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::protoconf::_Path_default_instance_),
};

const char descriptor_table_protodef_item_5fconf_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017item_conf.proto\022\tprotoconf\032\036google/pro"
  "tobuf/duration.proto\032\037google/protobuf/ti"
  "mestamp.proto\032\036tableau/protobuf/tableau."
  "proto\032\021common_conf.proto\"\371\004\n\010ItemConf\022>\n"
  "\010item_map\030\001 \003(\0132 .protoconf.ItemConf.Ite"
  "mMapEntryB\n\202\265\030\006\032\002ID \001\032H\n\014ItemMapEntry\022\013\n"
  "\003key\030\001 \001(\r\022\'\n\005value\030\002 \001(\0132\030.protoconf.It"
  "emConf.Item:\0028\001\032\345\002\n\004Item\022\024\n\002id\030\001 \001(\rB\010\202\265"
  "\030\004\n\002ID\022\030\n\004name\030\002 \001(\tB\n\202\265\030\006\n\004Name\022)\n\004path"
  "\030\004 \001(\0132\017.protoconf.PathB\n\202\265\030\006\n\004Path\0228\n\006e"
  "xpiry\030\005 \001(\0132\032.google.protobuf.TimestampB"
  "\014\202\265\030\010\n\006Expiry\022;\n\010duration\030\006 \001(\0132\031.google"
  ".protobuf.DurationB\016\202\265\030\n\n\010Duration\022.\n\004ty"
  "pe\030\007 \001(\0162\024.protoconf.FruitTypeB\n\202\265\030\006\n\004Ty"
  "pe\022\037\n\nparam_list\030\010 \003(\005B\013\202\265\030\007\n\005Param\022:\n\re"
  "xt_type_list\030\t \003(\0162\024.protoconf.FruitType"
  "B\r\202\265\030\t\n\007ExtType:{\202\265\030w\n\010ItemConf\220\003\001\232\003\004Typ"
  "e\232\003\016Param@ItemInfo\232\003\023ExtType@ItemExtInfo"
  "\232\003\023(ID,Name)@AwardItem\232\003#(ID,Type,Param,"
  "ExtType)@SpecialItem\"!\n\004Path\022\013\n\003dir\030\001 \001("
  "\t\022\014\n\004name\030\002 \001(\tBMZ<github.com/tableauio/"
  "loader/test/go-tableau-loader/protoconf\202"
  "\265\030\013\n\tTest.xlsxb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_item_5fconf_2eproto_deps[4] = {
  &::descriptor_table_common_5fconf_2eproto,
  &::descriptor_table_google_2fprotobuf_2fduration_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
  &::descriptor_table_tableau_2fprotobuf_2ftableau_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_item_5fconf_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_item_5fconf_2eproto = {
  false, false, 902, descriptor_table_protodef_item_5fconf_2eproto, "item_conf.proto", 
  &descriptor_table_item_5fconf_2eproto_once, descriptor_table_item_5fconf_2eproto_deps, 4, 4,
  schemas, file_default_instances, TableStruct_item_5fconf_2eproto::offsets,
  file_level_metadata_item_5fconf_2eproto, file_level_enum_descriptors_item_5fconf_2eproto, file_level_service_descriptors_item_5fconf_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_item_5fconf_2eproto_getter() {
  return &descriptor_table_item_5fconf_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_item_5fconf_2eproto(&descriptor_table_item_5fconf_2eproto);
namespace protoconf {

// ===================================================================

ItemConf_ItemMapEntry_DoNotUse::ItemConf_ItemMapEntry_DoNotUse() {}
ItemConf_ItemMapEntry_DoNotUse::ItemConf_ItemMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void ItemConf_ItemMapEntry_DoNotUse::MergeFrom(const ItemConf_ItemMapEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata ItemConf_ItemMapEntry_DoNotUse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_item_5fconf_2eproto_getter, &descriptor_table_item_5fconf_2eproto_once,
      file_level_metadata_item_5fconf_2eproto[0]);
}

// ===================================================================

class ItemConf_Item::_Internal {
 public:
  static const ::protoconf::Path& path(const ItemConf_Item* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& expiry(const ItemConf_Item* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Duration& duration(const ItemConf_Item* msg);
};

const ::protoconf::Path&
ItemConf_Item::_Internal::path(const ItemConf_Item* msg) {
  return *msg->path_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
ItemConf_Item::_Internal::expiry(const ItemConf_Item* msg) {
  return *msg->expiry_;
}
const ::PROTOBUF_NAMESPACE_ID::Duration&
ItemConf_Item::_Internal::duration(const ItemConf_Item* msg) {
  return *msg->duration_;
}
void ItemConf_Item::clear_expiry() {
  if (GetArenaForAllocation() == nullptr && expiry_ != nullptr) {
    delete expiry_;
  }
  expiry_ = nullptr;
}
void ItemConf_Item::clear_duration() {
  if (GetArenaForAllocation() == nullptr && duration_ != nullptr) {
    delete duration_;
  }
  duration_ = nullptr;
}
ItemConf_Item::ItemConf_Item(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  param_list_(arena),
  ext_type_list_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protoconf.ItemConf.Item)
}
ItemConf_Item::ItemConf_Item(const ItemConf_Item& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      param_list_(from.param_list_),
      ext_type_list_(from.ext_type_list_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  if (from._internal_has_path()) {
    path_ = new ::protoconf::Path(*from.path_);
  } else {
    path_ = nullptr;
  }
  if (from._internal_has_expiry()) {
    expiry_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from.expiry_);
  } else {
    expiry_ = nullptr;
  }
  if (from._internal_has_duration()) {
    duration_ = new ::PROTOBUF_NAMESPACE_ID::Duration(*from.duration_);
  } else {
    duration_ = nullptr;
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&id_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:protoconf.ItemConf.Item)
}

inline void ItemConf_Item::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&path_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&path_)) + sizeof(type_));
}

ItemConf_Item::~ItemConf_Item() {
  // @@protoc_insertion_point(destructor:protoconf.ItemConf.Item)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ItemConf_Item::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete path_;
  if (this != internal_default_instance()) delete expiry_;
  if (this != internal_default_instance()) delete duration_;
}

void ItemConf_Item::ArenaDtor(void* object) {
  ItemConf_Item* _this = reinterpret_cast< ItemConf_Item* >(object);
  (void)_this;
}
void ItemConf_Item::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ItemConf_Item::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ItemConf_Item::Clear() {
// @@protoc_insertion_point(message_clear_start:protoconf.ItemConf.Item)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  param_list_.Clear();
  ext_type_list_.Clear();
  name_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && path_ != nullptr) {
    delete path_;
  }
  path_ = nullptr;
  if (GetArenaForAllocation() == nullptr && expiry_ != nullptr) {
    delete expiry_;
  }
  expiry_ = nullptr;
  if (GetArenaForAllocation() == nullptr && duration_ != nullptr) {
    delete duration_;
  }
  duration_ = nullptr;
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&id_)) + sizeof(type_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ItemConf_Item::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 id = 1 [(.tableau.field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 2 [(.tableau.field) = {
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protoconf.ItemConf.Item.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .protoconf.Path path = 4 [(.tableau.field) = {
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_path(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp expiry = 5 [(.tableau.field) = {
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_expiry(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Duration duration = 6 [(.tableau.field) = {
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_duration(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .protoconf.FruitType type = 7 [(.tableau.field) = {
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::protoconf::FruitType>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated int32 param_list = 8 [(.tableau.field) = {
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_param_list(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 64) {
          _internal_add_param_list(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .protoconf.FruitType ext_type_list = 9 [(.tableau.field) = {
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser(_internal_mutable_ext_type_list(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 72) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_add_ext_type_list(static_cast<::protoconf::FruitType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ItemConf_Item::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protoconf.ItemConf.Item)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 id = 1 [(.tableau.field) = {
  if (this->_internal_id() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_id(), target);
  }

  // string name = 2 [(.tableau.field) = {
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protoconf.ItemConf.Item.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // .protoconf.Path path = 4 [(.tableau.field) = {
  if (this->_internal_has_path()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::path(this), target, stream);
  }

  // .google.protobuf.Timestamp expiry = 5 [(.tableau.field) = {
  if (this->_internal_has_expiry()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::expiry(this), target, stream);
  }

  // .google.protobuf.Duration duration = 6 [(.tableau.field) = {
  if (this->_internal_has_duration()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::duration(this), target, stream);
  }

  // .protoconf.FruitType type = 7 [(.tableau.field) = {
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_type(), target);
  }

  // repeated int32 param_list = 8 [(.tableau.field) = {
  {
    int byte_size = _param_list_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          8, _internal_param_list(), byte_size, target);
    }
  }

  // repeated .protoconf.FruitType ext_type_list = 9 [(.tableau.field) = {
  {
    int byte_size = _ext_type_list_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteEnumPacked(
          9, ext_type_list_, byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protoconf.ItemConf.Item)
  return target;
}

size_t ItemConf_Item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protoconf.ItemConf.Item)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 param_list = 8 [(.tableau.field) = {
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->param_list_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _param_list_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated .protoconf.FruitType ext_type_list = 9 [(.tableau.field) = {
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_ext_type_list_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(
        this->_internal_ext_type_list(static_cast<int>(i)));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _ext_type_list_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // string name = 2 [(.tableau.field) = {
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // .protoconf.Path path = 4 [(.tableau.field) = {
  if (this->_internal_has_path()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *path_);
  }

  // .google.protobuf.Timestamp expiry = 5 [(.tableau.field) = {
  if (this->_internal_has_expiry()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *expiry_);
  }

  // .google.protobuf.Duration duration = 6 [(.tableau.field) = {
  if (this->_internal_has_duration()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *duration_);
  }

  // uint32 id = 1 [(.tableau.field) = {
  if (this->_internal_id() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_id());
  }

  // .protoconf.FruitType type = 7 [(.tableau.field) = {
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ItemConf_Item::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ItemConf_Item::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ItemConf_Item::GetClassData() const { return &_class_data_; }

void ItemConf_Item::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ItemConf_Item *>(to)->MergeFrom(
      static_cast<const ItemConf_Item &>(from));
}


void ItemConf_Item::MergeFrom(const ItemConf_Item& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protoconf.ItemConf.Item)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  param_list_.MergeFrom(from.param_list_);
  ext_type_list_.MergeFrom(from.ext_type_list_);
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (from._internal_has_path()) {
    _internal_mutable_path()->::protoconf::Path::MergeFrom(from._internal_path());
  }
  if (from._internal_has_expiry()) {
    _internal_mutable_expiry()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(from._internal_expiry());
  }
  if (from._internal_has_duration()) {
    _internal_mutable_duration()->::PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(from._internal_duration());
  }
  if (from._internal_id() != 0) {
    _internal_set_id(from._internal_id());
  }
  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ItemConf_Item::CopyFrom(const ItemConf_Item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protoconf.ItemConf.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ItemConf_Item::IsInitialized() const {
  return true;
}

void ItemConf_Item::InternalSwap(ItemConf_Item* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  param_list_.InternalSwap(&other->param_list_);
  ext_type_list_.InternalSwap(&other->ext_type_list_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ItemConf_Item, type_)
      + sizeof(ItemConf_Item::type_)
      - PROTOBUF_FIELD_OFFSET(ItemConf_Item, path_)>(
          reinterpret_cast<char*>(&path_),
          reinterpret_cast<char*>(&other->path_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ItemConf_Item::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_item_5fconf_2eproto_getter, &descriptor_table_item_5fconf_2eproto_once,
      file_level_metadata_item_5fconf_2eproto[1]);
}

// ===================================================================

class ItemConf::_Internal {
 public:
};

ItemConf::ItemConf(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  item_map_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protoconf.ItemConf)
}
ItemConf::ItemConf(const ItemConf& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  item_map_.MergeFrom(from.item_map_);
  // @@protoc_insertion_point(copy_constructor:protoconf.ItemConf)
}

inline void ItemConf::SharedCtor() {
}

ItemConf::~ItemConf() {
  // @@protoc_insertion_point(destructor:protoconf.ItemConf)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ItemConf::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ItemConf::ArenaDtor(void* object) {
  ItemConf* _this = reinterpret_cast< ItemConf* >(object);
  (void)_this;
  _this->item_map_. ~MapField();
}
inline void ItemConf::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena) {
  if (arena != nullptr) {
    arena->OwnCustomDestructor(this, &ItemConf::ArenaDtor);
  }
}
void ItemConf::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ItemConf::Clear() {
// @@protoc_insertion_point(message_clear_start:protoconf.ItemConf)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  item_map_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ItemConf::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // map<uint32, .protoconf.ItemConf.Item> item_map = 1 [(.tableau.field) = {
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&item_map_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ItemConf::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protoconf.ItemConf)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // map<uint32, .protoconf.ItemConf.Item> item_map = 1 [(.tableau.field) = {
  if (!this->_internal_item_map().empty()) {
    typedef ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::protoconf::ItemConf_Item >::const_pointer
        ConstPtr;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::SortItem< uint32_t, ConstPtr > SortItem;
    typedef ::PROTOBUF_NAMESPACE_ID::internal::CompareByFirstField<SortItem> Less;

    if (stream->IsSerializationDeterministic() &&
        this->_internal_item_map().size() > 1) {
      ::std::unique_ptr<SortItem[]> items(
          new SortItem[this->_internal_item_map().size()]);
      typedef ::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::protoconf::ItemConf_Item >::size_type size_type;
      size_type n = 0;
      for (::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::protoconf::ItemConf_Item >::const_iterator
          it = this->_internal_item_map().begin();
          it != this->_internal_item_map().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      for (size_type i = 0; i < n; i++) {
        target = ItemConf_ItemMapEntry_DoNotUse::Funcs::InternalSerialize(1, items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second, target, stream);
      }
    } else {
      for (::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::protoconf::ItemConf_Item >::const_iterator
          it = this->_internal_item_map().begin();
          it != this->_internal_item_map().end(); ++it) {
        target = ItemConf_ItemMapEntry_DoNotUse::Funcs::InternalSerialize(1, it->first, it->second, target, stream);
      }
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protoconf.ItemConf)
  return target;
}

size_t ItemConf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protoconf.ItemConf)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // map<uint32, .protoconf.ItemConf.Item> item_map = 1 [(.tableau.field) = {
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_item_map_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< uint32_t, ::protoconf::ItemConf_Item >::const_iterator
      it = this->_internal_item_map().begin();
      it != this->_internal_item_map().end(); ++it) {
    total_size += ItemConf_ItemMapEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ItemConf::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ItemConf::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ItemConf::GetClassData() const { return &_class_data_; }

void ItemConf::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ItemConf *>(to)->MergeFrom(
      static_cast<const ItemConf &>(from));
}


void ItemConf::MergeFrom(const ItemConf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protoconf.ItemConf)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  item_map_.MergeFrom(from.item_map_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ItemConf::CopyFrom(const ItemConf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protoconf.ItemConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ItemConf::IsInitialized() const {
  return true;
}

void ItemConf::InternalSwap(ItemConf* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  item_map_.InternalSwap(&other->item_map_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ItemConf::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_item_5fconf_2eproto_getter, &descriptor_table_item_5fconf_2eproto_once,
      file_level_metadata_item_5fconf_2eproto[2]);
}

// ===================================================================

class Path::_Internal {
 public:
};

Path::Path(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:protoconf.Path)
}
Path::Path(const Path& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  dir_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    dir_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_dir().empty()) {
    dir_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_dir(), 
      GetArenaForAllocation());
  }
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:protoconf.Path)
}

inline void Path::SharedCtor() {
dir_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  dir_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

Path::~Path() {
  // @@protoc_insertion_point(destructor:protoconf.Path)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Path::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  dir_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Path::ArenaDtor(void* object) {
  Path* _this = reinterpret_cast< Path* >(object);
  (void)_this;
}
void Path::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Path::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Path::Clear() {
// @@protoc_insertion_point(message_clear_start:protoconf.Path)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dir_.ClearToEmpty();
  name_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Path::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string dir = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_dir();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protoconf.Path.dir"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "protoconf.Path.name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Path::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protoconf.Path)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string dir = 1;
  if (!this->_internal_dir().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_dir().data(), static_cast<int>(this->_internal_dir().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protoconf.Path.dir");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_dir(), target);
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protoconf.Path.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protoconf.Path)
  return target;
}

size_t Path::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protoconf.Path)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string dir = 1;
  if (!this->_internal_dir().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dir());
  }

  // string name = 2;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Path::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Path::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Path::GetClassData() const { return &_class_data_; }

void Path::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Path *>(to)->MergeFrom(
      static_cast<const Path &>(from));
}


void Path::MergeFrom(const Path& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:protoconf.Path)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_dir().empty()) {
    _internal_set_dir(from._internal_dir());
  }
  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Path::CopyFrom(const Path& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protoconf.Path)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Path::IsInitialized() const {
  return true;
}

void Path::InternalSwap(Path* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &dir_, lhs_arena,
      &other->dir_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata Path::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_item_5fconf_2eproto_getter, &descriptor_table_item_5fconf_2eproto_once,
      file_level_metadata_item_5fconf_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace protoconf
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::protoconf::ItemConf_ItemMapEntry_DoNotUse* Arena::CreateMaybeMessage< ::protoconf::ItemConf_ItemMapEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protoconf::ItemConf_ItemMapEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::protoconf::ItemConf_Item* Arena::CreateMaybeMessage< ::protoconf::ItemConf_Item >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protoconf::ItemConf_Item >(arena);
}
template<> PROTOBUF_NOINLINE ::protoconf::ItemConf* Arena::CreateMaybeMessage< ::protoconf::ItemConf >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protoconf::ItemConf >(arena);
}
template<> PROTOBUF_NOINLINE ::protoconf::Path* Arena::CreateMaybeMessage< ::protoconf::Path >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protoconf::Path >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
