// Code generated by protoc-gen-cpp-tableau-loader. DO NOT EDIT.
// versions:
// - protoc-gen-cpp-tableau-loader v0.8.0
// - protoc                        v3.19.3

#pragma once
#include <google/protobuf/message.h>

#include <chrono>
#include <functional>
#include <optional>
#include <string>

#include "util.pc.h"

namespace tableau {
enum class LoadMode {
  kNone,
  kAll,        // Load all related files
  kOnlyMain,   // Only load the main file
  kOnlyPatch,  // Only load the patch files
};

class MessagerOptions;
class Hub;

// ReadFunc reads the config file and returns its content.
using ReadFunc = std::function<bool(const std::string& filename, std::string& content)>;
// LoadFunc defines a func which can load message's content based on the given
// path, format, and options.
using LoadFunc = std::function<bool(google::protobuf::Message& msg, const std::string& path, Format fmt,
                                    std::shared_ptr<const MessagerOptions> options)>;

// BaseOptions is the common struct for both global-level and messager-level
// options.
struct BaseOptions {
  // Whether to ignore unknown JSON fields during parsing.
  //
  // Refer https://protobuf.dev/reference/cpp/api-docs/google.protobuf.util.json_util/#JsonParseOptions.
  std::optional<bool> ignore_unknown_fields;
  // Specify the directory paths for config patching.
  std::vector<std::string> patch_dirs;
  // Specify the loading mode for config patching.
  // - For LoadOptions, default is LoadMode::kModeAll.
  // - For MessagerOptions, inherit from LoadOptions if not set.
  LoadMode mode;
  // You can specify custom read function to read a config file's content.
  // - For LoadOptions, default is util::ReadFile.
  // - For MessagerOptions, inherit from LoadOptions if not set.
  ReadFunc read_func;
  // You can specify custom load function to load a messager's content.
  // - For LoadOptions, default is LoadMessage.
  // - For MessagerOptions, inherit from LoadOptions if not set.
  LoadFunc load_func;
};

// LoadOptionsOptions is the options struct, which contains both global-level and
// messager-level options.
struct LoadOptions : public BaseOptions {
  // messager_options maps each messager name to a MessageOptions.
  // If specified, then the messager will be parsed with the given options
  // directly.
  std::unordered_map<std::string, std::shared_ptr<MessagerOptions>> messager_options;
};

// MessagerOptions defines the options for loading a messager.
struct MessagerOptions : public BaseOptions {
  // Path maps each messager name to a corresponding config file path.
  // If specified, then the main messager will be parsed from the file
  // directly, other than the specified load dir.
  std::string path;
  // Patch paths maps each messager name to one or multiple corresponding patch file paths.
  // If specified, then main messager will be patched.
  std::vector<std::string> patch_paths;
};

class Messager {
 public:
  struct Stats {
    std::chrono::microseconds duration;  // total load time consuming.
  };

 public:
  virtual ~Messager() = default;
  static const std::string& Name() { return kEmpty; }
  const Stats& GetStats() { return stats_; }
  // Load fills message from file in the specified directory and format.
  virtual bool Load(const std::string& dir, Format fmt, std::shared_ptr<const MessagerOptions> options = nullptr) = 0;
  // Message returns the inner message data.
  virtual const google::protobuf::Message* Message() const { return nullptr; }
  // callback after all messagers loaded.
  virtual bool ProcessAfterLoadAll(const Hub& hub) { return true; }

 protected:
  // callback after this messager loaded.
  virtual bool ProcessAfterLoad() { return true; };
  Stats stats_;
};

// ParseLoadOptions parses load options with default global-level options.
std::shared_ptr<const LoadOptions> ParseLoadOptions(std::shared_ptr<const LoadOptions> opts);
// ParseMessagerOptions parses messager options with both global-level and
// messager-level options taken into consideration.
std::shared_ptr<const MessagerOptions> ParseMessagerOptions(std::shared_ptr<const LoadOptions> opts,
                                                            const std::string& name);
bool LoadMessager(google::protobuf::Message& msg, const std::string& path, Format fmt = Format::kJSON,
                 std::shared_ptr<const MessagerOptions> options = nullptr);
bool LoadMessagerInDir(google::protobuf::Message& msg, const std::string& dir, Format fmt = Format::kJSON,
                      std::shared_ptr<const MessagerOptions> options = nullptr);
}  // namespace tableau
