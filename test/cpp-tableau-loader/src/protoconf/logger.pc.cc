// Code generated by protoc-gen-cpp-tableau-loader. DO NOT EDIT.
// versions:
// - protoc-gen-cpp-tableau-loader v0.9.0
// - protoc                        v3.19.3

#include "logger.pc.h"

#ifdef _WIN32
#include <windows.h>
#else
#include <sys/syscall.h>
#include <unistd.h>
#endif

#include <cstdarg>
#include <filesystem>
#include <iomanip>
#include <system_error>
#include <thread>
#include <unordered_map>

#include "util.pc.h"

#ifdef _WIN32
#define gettid() GetCurrentThreadId()
#else
#define gettid() syscall(SYS_gettid)
#endif

namespace tableau {
namespace log {

// clang-format off
static const std::unordered_map<int, std::string> kLevelMap = {
    {kTrace, "TRACE"},
    {kDebug, "DEBUG"},
    {kInfo, "INFO"},
    {kWarn, "WARN"},
    {kError, "ERROR"},
    {kFatal, "FATAL"}
};
// clang-format on

static Logger* g_default_logger;

Logger* DefaultLogger() {
  if (g_default_logger == nullptr) {
    g_default_logger = new Logger();
  }
  return g_default_logger;
}

void SetDefaultLogger(Logger* logger) {
  if (g_default_logger != nullptr) {
    delete g_default_logger;
  }
  g_default_logger = logger;
}

int Logger::Init(const std::filesystem::path& path, Level level) {
  std::error_code ec;
  std::filesystem::create_directories(path.parent_path(), ec);
  if (ec) {
    SetErrMsg("failed to create log directory: " + ec.message());
    return ec.value();
  }
  ofs_.open(path, std::ofstream::out | std::ofstream::app);
  os_ = &ofs_;  // use file stream as output stream
  level_ = level;
  return 0;
}

void Logger::Log(const SourceLocation& loc, Level level, const char* format, ...) {
  if (level < level_) {
    return;
  }
  // scoped auto-release lock.
  std::unique_lock<std::mutex> lock(mutex_);
  static thread_local char content[1024] = {0};
  va_list ap;
  va_start(ap, format);
  vsnprintf(content, sizeof(content), format, ap);
  va_end(ap);

  LevelInfo level_info{level, kLevelMap.at(static_cast<int>(level))};
  writer_(os_, loc, level_info, content);
}

void DefaultWrite(std::ostream* os, const SourceLocation& loc, const LevelInfo& lvl, const std::string& content) {
  // clang-format off
  *os << NowStr() << "|"
    // << std::this_thread::get_id() << "|"
    << gettid() << "|"
    << lvl.name << "|" 
    << loc.filename << ":" << loc.line << "|" 
    << loc.funcname << "|" 
    << content
    << std::endl << std::flush;
  // clang-format on
}

std::ostream& operator<<(std::ostream& os, const NowStr&) {
  auto now = std::chrono::system_clock::now();
  auto now_time_t = std::chrono::system_clock::to_time_t(now);
  auto now_us = std::chrono::duration_cast<std::chrono::microseconds>(now.time_since_epoch()) % 1000000;
  return os << std::put_time(std::localtime(&now_time_t), "%F %T") << "." << std::setw(6) << std::setfill('0')
            << now_us.count();
}

}  // namespace log
}  // namespace tableau
