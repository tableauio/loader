// Code generated by protoc-gen-cpp-tableau-loader. DO NOT EDIT.
// versions:
// - protoc-gen-cpp-tableau-loader v0.6.0
// - protoc                        v3.19.3
// source: item_conf.proto

#include "item_conf.pc.h"

namespace tableau {
const std::string ItemConf::kProtoName = "ItemConf";

bool ItemConf::Load(const std::string& dir, Format fmt, const LoadOptions* options /* = nullptr */) {
  bool ok = LoadMessage(data_, dir, fmt, options);
  return ok ? ProcessAfterLoad() : false;
}

bool ItemConf::ProcessAfterLoad() {
  // OrderedMap init.
  for (auto&& item1 : data_.item_map()) {
    ordered_map_[item1.first] = &item1.second;
  }

  // Index init.
  // Index: Type
  for (auto&& item1 : data_.item_map()) {
    index_item_map_[static_cast<int>(item1.second.type())].push_back(&item1.second);
  }

  // Index: Param@ItemInfo
  for (auto&& item1 : data_.item_map()) {
    for (auto&& item2 : item1.second.param_list()) {
      index_item_info_map_[item2].push_back(&item1.second);
    }
  }

  // Index: ExtType@ItemExtInfo
  for (auto&& item1 : data_.item_map()) {
    for (auto&& item2 : item1.second.ext_type_list()) {
      index_item_ext_info_map_[static_cast<int>(item2)].push_back(&item1.second);
    }
  }

  // Index: (ID,Name)@AwardItem
  for (auto&& item1 : data_.item_map()) {
    Index_AwardItemKey key{item1.second.id(), item1.second.name()};
    index_award_item_map_[key].push_back(&item1.second);
  }

  // Index: (ID,Type,Param,ExtType)@SpecialItem
  for (auto&& item1 : data_.item_map()) {
    for (auto&& index_item2 : item1.second.param_list()) {
      for (auto&& index_item3 : item1.second.ext_type_list()) {
        Index_SpecialItemKey key{item1.second.id(), static_cast<protoconf::FruitType>(item1.second.type()), index_item2, static_cast<protoconf::FruitType>(index_item3)};
        index_special_item_map_[key].push_back(&item1.second);
      }
    }
  }

  return true;
}

const protoconf::ItemConf::Item* ItemConf::Get(uint32_t id) const {
  auto iter = data_.item_map().find(id);
  if (iter == data_.item_map().end()) {
    return nullptr;
  }
  return &iter->second;
}

const ItemConf::ProtoconfItemConfItemMap_OrderedMap* ItemConf::GetOrderedMap() const {
  return &ordered_map_; 
}

// Index: Type
const ItemConf::Index_ItemMap& ItemConf::FindItem() const { return index_item_map_ ;}

const ItemConf::Index_ItemVector* ItemConf::FindItem(protoconf::FruitType type) const {
  auto iter = index_item_map_.find(static_cast<int>(type));
  if (iter == index_item_map_.end()) {
    return nullptr;
  }
  return &iter->second;
}

const protoconf::ItemConf::Item* ItemConf::FindFirstItem(protoconf::FruitType type) const {
  auto conf = FindItem(type);
  if (conf == nullptr || conf->size() == 0) {
    return nullptr;
  }
  return (*conf)[0];
}

// Index: Param@ItemInfo
const ItemConf::Index_ItemInfoMap& ItemConf::FindItemInfo() const { return index_item_info_map_ ;}

const ItemConf::Index_ItemInfoVector* ItemConf::FindItemInfo(int32_t param) const {
  auto iter = index_item_info_map_.find(param);
  if (iter == index_item_info_map_.end()) {
    return nullptr;
  }
  return &iter->second;
}

const protoconf::ItemConf::Item* ItemConf::FindFirstItemInfo(int32_t param) const {
  auto conf = FindItemInfo(param);
  if (conf == nullptr || conf->size() == 0) {
    return nullptr;
  }
  return (*conf)[0];
}

// Index: ExtType@ItemExtInfo
const ItemConf::Index_ItemExtInfoMap& ItemConf::FindItemExtInfo() const { return index_item_ext_info_map_ ;}

const ItemConf::Index_ItemExtInfoVector* ItemConf::FindItemExtInfo(protoconf::FruitType ext_type) const {
  auto iter = index_item_ext_info_map_.find(static_cast<int>(ext_type));
  if (iter == index_item_ext_info_map_.end()) {
    return nullptr;
  }
  return &iter->second;
}

const protoconf::ItemConf::Item* ItemConf::FindFirstItemExtInfo(protoconf::FruitType ext_type) const {
  auto conf = FindItemExtInfo(ext_type);
  if (conf == nullptr || conf->size() == 0) {
    return nullptr;
  }
  return (*conf)[0];
}

// Index: (ID,Name)@AwardItem
const ItemConf::Index_AwardItemMap& ItemConf::FindAwardItem() const { return index_award_item_map_ ;}

const ItemConf::Index_AwardItemVector* ItemConf::FindAwardItem(const Index_AwardItemKey& key) const {
  auto iter = index_award_item_map_.find(key);
  if (iter == index_award_item_map_.end()) {
    return nullptr;
  }
  return &iter->second;
}

const protoconf::ItemConf::Item* ItemConf::FindFirstAwardItem(const Index_AwardItemKey& key) const {
  auto conf = FindAwardItem(key);
  if (conf == nullptr || conf->size() == 0) {
    return nullptr;
  }
  return (*conf)[0];
}

// Index: (ID,Type,Param,ExtType)@SpecialItem
const ItemConf::Index_SpecialItemMap& ItemConf::FindSpecialItem() const { return index_special_item_map_ ;}

const ItemConf::Index_SpecialItemVector* ItemConf::FindSpecialItem(const Index_SpecialItemKey& key) const {
  auto iter = index_special_item_map_.find(key);
  if (iter == index_special_item_map_.end()) {
    return nullptr;
  }
  return &iter->second;
}

const protoconf::ItemConf::Item* ItemConf::FindFirstSpecialItem(const Index_SpecialItemKey& key) const {
  auto conf = FindSpecialItem(key);
  if (conf == nullptr || conf->size() == 0) {
    return nullptr;
  }
  return (*conf)[0];
}


}  // namespace tableau
