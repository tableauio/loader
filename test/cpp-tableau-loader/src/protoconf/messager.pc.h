// Code generated by protoc-gen-cpp-tableau-loader. DO NOT EDIT.
// versions:
// - protoc-gen-cpp-tableau-loader v0.8.0
// - protoc                        v3.19.3

#pragma once
#include <google/protobuf/message.h>

#include <functional>
#include <string>

namespace tableau {
enum class Format {
  kUnknown,
  kJSON,
  kText,
  kBin,
};

enum class LoadMode {
  kModeDefault,
  kModeOnlyMain,
  kModeOnlyPatch,
};

static const std::string kEmpty = "";

class Hub;

// ReadFunc reads the config file and returns its content.
using ReadFunc = std::function<bool(const std::string& filename, std::string& content)>;

struct LoadOptions {
  // read_func reads the config file and returns its content.
  ReadFunc read_func;
  // Whether to ignore unknown JSON fields during parsing.
  //
  // Refer https://protobuf.dev/reference/cpp/api-docs/google.protobuf.util.json_util/#JsonParseOptions.
  bool ignore_unknown_fields = false;
  // Paths maps each messager name to a corresponding config file path.
  // If specified, then the main messager will be parsed from the file
  // directly, other than the specified load dir.
  std::unordered_map<std::string, std::string> paths;
  // Patch paths maps each messager name to one or multiple corresponding patch file paths.
  // If specified, then main messager will be patched.
  std::unordered_map<std::string, std::vector<std::string>> patch_paths;
  // Patch dirs specifies the directory paths for config patching.
  std::vector<std::string> patch_dirs;
  // Mode specifies the loading mode for config patching.
  LoadMode mode = LoadMode::kModeDefault;
};

class Messager {
 public:
  struct Stats {
    std::chrono::microseconds duration;  // total load time consuming.
    // TODO: crc32 of config file to decide whether changed or not
    // std::string crc32;
    // int64_t last_modified_time = 0; // unix timestamp
  };

 public:
  virtual ~Messager() = default;
  static const std::string& Name() { return kEmpty; }
  const Stats& GetStats() { return stats_; }
  // Load fills message from file in the specified directory and format.
  virtual bool Load(const std::string& dir, Format fmt, const LoadOptions* options = nullptr) = 0;
  // Message returns the inner message data.
  virtual const google::protobuf::Message* Message() const { return nullptr; }
  // callback after all messagers loaded.
  virtual bool ProcessAfterLoadAll(const Hub& hub) { return true; }

 protected:
  // callback after this messager loaded.
  virtual bool ProcessAfterLoad() { return true; };
  Stats stats_;
};

}  // namespace tableau
