// Code generated by protoc-gen-go-tableau-loader. DO NOT EDIT.
// versions:
// - protoc-gen-go-tableau-loader v0.9.0
// - protoc                       v3.19.3
// source: test_conf.proto

package loader

import (
	fmt "fmt"
	pair "github.com/tableauio/loader/pkg/pair"
	treemap "github.com/tableauio/loader/pkg/treemap"
	protoconf "github.com/tableauio/loader/test/go-tableau-loader/protoconf"
	format "github.com/tableauio/tableau/format"
	load "github.com/tableauio/tableau/load"
	store "github.com/tableauio/tableau/store"
	proto "google.golang.org/protobuf/proto"
	sort "sort"
	time "time"
)

// OrderedMap types.
type ProtoconfSectionSectionRankMap_OrderedMap = treemap.TreeMap[uint32, int32]

type ProtoconfActivityConfActivityChapterSectionMap_OrderedMapValue = pair.Pair[*ProtoconfSectionSectionRankMap_OrderedMap, *protoconf.Section]
type ProtoconfActivityConfActivityChapterSectionMap_OrderedMap = treemap.TreeMap[uint32, *ProtoconfActivityConfActivityChapterSectionMap_OrderedMapValue]

type ProtoconfActivityConfActivityChapterMap_OrderedMapValue = pair.Pair[*ProtoconfActivityConfActivityChapterSectionMap_OrderedMap, *protoconf.ActivityConf_Activity_Chapter]
type ProtoconfActivityConfActivityChapterMap_OrderedMap = treemap.TreeMap[uint32, *ProtoconfActivityConfActivityChapterMap_OrderedMapValue]

type ProtoconfActivityConfActivityMap_OrderedMapValue = pair.Pair[*ProtoconfActivityConfActivityChapterMap_OrderedMap, *protoconf.ActivityConf_Activity]
type ProtoconfActivityConfActivityMap_OrderedMap = treemap.TreeMap[uint64, *ProtoconfActivityConfActivityMap_OrderedMapValue]

// Index types.
// Index: ActivityName
type ActivityConf_Index_ActivityMap = map[string][]*protoconf.ActivityConf_Activity

// Index: ChapterID
type ActivityConf_Index_ChapterMap = map[uint32][]*protoconf.ActivityConf_Activity_Chapter

// Index: ChapterName<AwardID>@NamedChapter
type ActivityConf_Index_NamedChapterMap = map[string][]*protoconf.ActivityConf_Activity_Chapter

// Index: SectionItemID@Award
type ActivityConf_Index_AwardMap = map[uint32][]*protoconf.Section_SectionItem

// ActivityConf is a wrapper around protobuf message: protoconf.ActivityConf.
//
// It is designed for three goals:
//
//  1. Easy use: simple yet powerful accessers.
//  2. Elegant API: concise and clean functions.
//  3. Extensibility: Map, OrdererdMap, Index...
type ActivityConf struct {
	UnimplementedMessager
	data, originalData   *protoconf.ActivityConf
	orderedMap           *ProtoconfActivityConfActivityMap_OrderedMap
	indexActivityMap     ActivityConf_Index_ActivityMap
	indexChapterMap      ActivityConf_Index_ChapterMap
	indexNamedChapterMap ActivityConf_Index_NamedChapterMap
	indexAwardMap        ActivityConf_Index_AwardMap
}

// Name returns the ActivityConf's message name.
func (x *ActivityConf) Name() string {
	if x != nil {
		return string(x.data.ProtoReflect().Descriptor().Name())
	}
	return ""
}

// Data returns the ActivityConf's inner message data.
func (x *ActivityConf) Data() *protoconf.ActivityConf {
	if x != nil {
		return x.data
	}
	return nil
}

// Load fills ActivityConf's inner message from file in the specified directory and format.
func (x *ActivityConf) Load(dir string, format format.Format, opts *load.MessagerOptions) error {
	start := time.Now()
	defer func() {
		x.Stats.Duration = time.Since(start)
	}()
	x.data = &protoconf.ActivityConf{}
	err := load.LoadMessagerInDir(x.data, dir, format, opts)
	if err != nil {
		return err
	}
	if x.backup {
		x.originalData = proto.Clone(x.data).(*protoconf.ActivityConf)
	}
	return x.processAfterLoad()
}

// Store writes ActivityConf's inner message to file in the specified directory and format.
// Available formats: JSON, Bin, and Text.
func (x *ActivityConf) Store(dir string, format format.Format, options ...store.Option) error {
	return store.Store(x.Data(), dir, format, options...)
}

// Message returns the ActivityConf's inner message data.
func (x *ActivityConf) Message() proto.Message {
	return x.Data()
}

// Messager returns the current messager.
func (x *ActivityConf) Messager() Messager {
	return x
}

// originalMessage returns the ActivityConf's original inner message.
func (x *ActivityConf) originalMessage() proto.Message {
	if x != nil {
		return x.originalData
	}
	return nil
}

// processAfterLoad runs after this messager is loaded.
func (x *ActivityConf) processAfterLoad() error {
	// OrderedMap init.
	x.orderedMap = treemap.New[uint64, *ProtoconfActivityConfActivityMap_OrderedMapValue]()
	for k1, v1 := range x.Data().GetActivityMap() {
		map1 := x.orderedMap
		k1v := &ProtoconfActivityConfActivityMap_OrderedMapValue{
			First:  treemap.New[uint32, *ProtoconfActivityConfActivityChapterMap_OrderedMapValue](),
			Second: v1,
		}
		map1.Put(k1, k1v)
		for k2, v2 := range v1.GetChapterMap() {
			map2 := k1v.First
			k2v := &ProtoconfActivityConfActivityChapterMap_OrderedMapValue{
				First:  treemap.New[uint32, *ProtoconfActivityConfActivityChapterSectionMap_OrderedMapValue](),
				Second: v2,
			}
			map2.Put(k2, k2v)
			for k3, v3 := range v2.GetSectionMap() {
				map3 := k2v.First
				k3v := &ProtoconfActivityConfActivityChapterSectionMap_OrderedMapValue{
					First:  treemap.New[uint32, int32](),
					Second: v3,
				}
				map3.Put(k3, k3v)
				for k4, v4 := range v3.GetSectionRankMap() {
					map4 := k3v.First
					map4.Put(k4, v4)
				}
			}
		}
	}
	// Index init.
	x.indexActivityMap = make(ActivityConf_Index_ActivityMap)
	x.indexChapterMap = make(ActivityConf_Index_ChapterMap)
	x.indexNamedChapterMap = make(ActivityConf_Index_NamedChapterMap)
	x.indexAwardMap = make(ActivityConf_Index_AwardMap)
	for _, item1 := range x.data.GetActivityMap() {
		{
			// Index: ActivityName
			key := item1.GetActivityName()
			x.indexActivityMap[key] = append(x.indexActivityMap[key], item1)
		}
		for _, item2 := range item1.GetChapterMap() {
			{
				// Index: ChapterID
				key := item2.GetChapterId()
				x.indexChapterMap[key] = append(x.indexChapterMap[key], item2)
			}
			{
				// Index: ChapterName<AwardID>@NamedChapter
				key := item2.GetChapterName()
				x.indexNamedChapterMap[key] = append(x.indexNamedChapterMap[key], item2)
			}
			for _, item3 := range item2.GetSectionMap() {
				for _, item4 := range item3.GetSectionItemList() {
					{
						// Index: SectionItemID@Award
						key := item4.GetId()
						x.indexAwardMap[key] = append(x.indexAwardMap[key], item4)
					}
				}
			}
		}
	}
	// Index(sort): ChapterName<AwardID>@NamedChapter
	for _, item := range x.indexNamedChapterMap {
		sort.Slice(item, func(i, j int) bool {
			return item[i].GetAwardId() < item[j].GetAwardId()
		})
	}
	return nil
}

// Get1 finds value in the 1-level map. It will return
// NotFound error if the key is not found.
func (x *ActivityConf) Get1(activityId uint64) (*protoconf.ActivityConf_Activity, error) {
	d := x.Data().GetActivityMap()
	if val, ok := d[activityId]; !ok {
		return nil, fmt.Errorf("activityId(%v) %w", activityId, ErrNotFound)
	} else {
		return val, nil
	}
}

// Get2 finds value in the 2-level map. It will return
// NotFound error if the key is not found.
func (x *ActivityConf) Get2(activityId uint64, chapterId uint32) (*protoconf.ActivityConf_Activity_Chapter, error) {
	conf, err := x.Get1(activityId)
	if err != nil {
		return nil, err
	}
	d := conf.GetChapterMap()
	if val, ok := d[chapterId]; !ok {
		return nil, fmt.Errorf("chapterId(%v) %w", chapterId, ErrNotFound)
	} else {
		return val, nil
	}
}

// Get3 finds value in the 3-level map. It will return
// NotFound error if the key is not found.
func (x *ActivityConf) Get3(activityId uint64, chapterId uint32, sectionId uint32) (*protoconf.Section, error) {
	conf, err := x.Get2(activityId, chapterId)
	if err != nil {
		return nil, err
	}
	d := conf.GetSectionMap()
	if val, ok := d[sectionId]; !ok {
		return nil, fmt.Errorf("sectionId(%v) %w", sectionId, ErrNotFound)
	} else {
		return val, nil
	}
}

// Get4 finds value in the 4-level map. It will return
// NotFound error if the key is not found.
func (x *ActivityConf) Get4(activityId uint64, chapterId uint32, sectionId uint32, key4 uint32) (int32, error) {
	conf, err := x.Get3(activityId, chapterId, sectionId)
	if err != nil {
		return 0, err
	}
	d := conf.GetSectionRankMap()
	if val, ok := d[key4]; !ok {
		return 0, fmt.Errorf("key4(%v) %w", key4, ErrNotFound)
	} else {
		return val, nil
	}
}

// GetOrderedMap returns the 1-level ordered map.
func (x *ActivityConf) GetOrderedMap() *ProtoconfActivityConfActivityMap_OrderedMap {
	return x.orderedMap
}

// GetOrderedMap1 finds value in the 1-level ordered map. It will return
// NotFound error if the key is not found.
func (x *ActivityConf) GetOrderedMap1(activityId uint64) (*ProtoconfActivityConfActivityChapterMap_OrderedMap, error) {
	conf := x.orderedMap
	if val, ok := conf.Get(activityId); !ok {
		return nil, fmt.Errorf("activityId(%v) %w", activityId, ErrNotFound)
	} else {
		return val.First, nil
	}
}

// GetOrderedMap2 finds value in the 2-level ordered map. It will return
// NotFound error if the key is not found.
func (x *ActivityConf) GetOrderedMap2(activityId uint64, chapterId uint32) (*ProtoconfActivityConfActivityChapterSectionMap_OrderedMap, error) {
	conf, err := x.GetOrderedMap1(activityId)
	if err != nil {
		return nil, err
	}
	if val, ok := conf.Get(chapterId); !ok {
		return nil, fmt.Errorf("chapterId(%v) %w", chapterId, ErrNotFound)
	} else {
		return val.First, nil
	}
}

// GetOrderedMap3 finds value in the 3-level ordered map. It will return
// NotFound error if the key is not found.
func (x *ActivityConf) GetOrderedMap3(activityId uint64, chapterId uint32, sectionId uint32) (*ProtoconfSectionSectionRankMap_OrderedMap, error) {
	conf, err := x.GetOrderedMap2(activityId, chapterId)
	if err != nil {
		return nil, err
	}
	if val, ok := conf.Get(sectionId); !ok {
		return nil, fmt.Errorf("sectionId(%v) %w", sectionId, ErrNotFound)
	} else {
		return val.First, nil
	}
}

// Index: ActivityName

// FindActivityMap returns the index(ActivityName) to value(protoconf.ActivityConf_Activity) map.
// One key may correspond to multiple values, which are contained by a slice.
func (x *ActivityConf) FindActivityMap() ActivityConf_Index_ActivityMap {
	return x.indexActivityMap
}

// FindActivity returns a slice of all values of the given key.
func (x *ActivityConf) FindActivity(activityName string) []*protoconf.ActivityConf_Activity {
	return x.indexActivityMap[activityName]
}

// FindFirstActivity returns the first value of the given key,
// or nil if the key correspond to no value.
func (x *ActivityConf) FindFirstActivity(activityName string) *protoconf.ActivityConf_Activity {
	val := x.indexActivityMap[activityName]
	if len(val) > 0 {
		return val[0]
	}
	return nil
}

// Index: ChapterID

// FindChapterMap returns the index(ChapterID) to value(protoconf.ActivityConf_Activity_Chapter) map.
// One key may correspond to multiple values, which are contained by a slice.
func (x *ActivityConf) FindChapterMap() ActivityConf_Index_ChapterMap {
	return x.indexChapterMap
}

// FindChapter returns a slice of all values of the given key.
func (x *ActivityConf) FindChapter(chapterId uint32) []*protoconf.ActivityConf_Activity_Chapter {
	return x.indexChapterMap[chapterId]
}

// FindFirstChapter returns the first value of the given key,
// or nil if the key correspond to no value.
func (x *ActivityConf) FindFirstChapter(chapterId uint32) *protoconf.ActivityConf_Activity_Chapter {
	val := x.indexChapterMap[chapterId]
	if len(val) > 0 {
		return val[0]
	}
	return nil
}

// Index: ChapterName<AwardID>@NamedChapter

// FindNamedChapterMap returns the index(ChapterName<AwardID>@NamedChapter) to value(protoconf.ActivityConf_Activity_Chapter) map.
// One key may correspond to multiple values, which are contained by a slice.
func (x *ActivityConf) FindNamedChapterMap() ActivityConf_Index_NamedChapterMap {
	return x.indexNamedChapterMap
}

// FindNamedChapter returns a slice of all values of the given key.
func (x *ActivityConf) FindNamedChapter(chapterName string) []*protoconf.ActivityConf_Activity_Chapter {
	return x.indexNamedChapterMap[chapterName]
}

// FindFirstNamedChapter returns the first value of the given key,
// or nil if the key correspond to no value.
func (x *ActivityConf) FindFirstNamedChapter(chapterName string) *protoconf.ActivityConf_Activity_Chapter {
	val := x.indexNamedChapterMap[chapterName]
	if len(val) > 0 {
		return val[0]
	}
	return nil
}

// Index: SectionItemID@Award

// FindAwardMap returns the index(SectionItemID@Award) to value(protoconf.Section_SectionItem) map.
// One key may correspond to multiple values, which are contained by a slice.
func (x *ActivityConf) FindAwardMap() ActivityConf_Index_AwardMap {
	return x.indexAwardMap
}

// FindAward returns a slice of all values of the given key.
func (x *ActivityConf) FindAward(id uint32) []*protoconf.Section_SectionItem {
	return x.indexAwardMap[id]
}

// FindFirstAward returns the first value of the given key,
// or nil if the key correspond to no value.
func (x *ActivityConf) FindFirstAward(id uint32) *protoconf.Section_SectionItem {
	val := x.indexAwardMap[id]
	if len(val) > 0 {
		return val[0]
	}
	return nil
}

// ChapterConf is a wrapper around protobuf message: protoconf.ChapterConf.
//
// It is designed for three goals:
//
//  1. Easy use: simple yet powerful accessers.
//  2. Elegant API: concise and clean functions.
//  3. Extensibility: Map, OrdererdMap, Index...
type ChapterConf struct {
	UnimplementedMessager
	data, originalData *protoconf.ChapterConf
}

// Name returns the ChapterConf's message name.
func (x *ChapterConf) Name() string {
	if x != nil {
		return string(x.data.ProtoReflect().Descriptor().Name())
	}
	return ""
}

// Data returns the ChapterConf's inner message data.
func (x *ChapterConf) Data() *protoconf.ChapterConf {
	if x != nil {
		return x.data
	}
	return nil
}

// Load fills ChapterConf's inner message from file in the specified directory and format.
func (x *ChapterConf) Load(dir string, format format.Format, opts *load.MessagerOptions) error {
	start := time.Now()
	defer func() {
		x.Stats.Duration = time.Since(start)
	}()
	x.data = &protoconf.ChapterConf{}
	err := load.LoadMessagerInDir(x.data, dir, format, opts)
	if err != nil {
		return err
	}
	if x.backup {
		x.originalData = proto.Clone(x.data).(*protoconf.ChapterConf)
	}
	return x.processAfterLoad()
}

// Store writes ChapterConf's inner message to file in the specified directory and format.
// Available formats: JSON, Bin, and Text.
func (x *ChapterConf) Store(dir string, format format.Format, options ...store.Option) error {
	return store.Store(x.Data(), dir, format, options...)
}

// Message returns the ChapterConf's inner message data.
func (x *ChapterConf) Message() proto.Message {
	return x.Data()
}

// Messager returns the current messager.
func (x *ChapterConf) Messager() Messager {
	return x
}

// originalMessage returns the ChapterConf's original inner message.
func (x *ChapterConf) originalMessage() proto.Message {
	if x != nil {
		return x.originalData
	}
	return nil
}

// Get1 finds value in the 1-level map. It will return
// NotFound error if the key is not found.
func (x *ChapterConf) Get1(id uint64) (*protoconf.ChapterConf_Chapter, error) {
	d := x.Data().GetChapterMap()
	if val, ok := d[id]; !ok {
		return nil, fmt.Errorf("id(%v) %w", id, ErrNotFound)
	} else {
		return val, nil
	}
}

// ThemeConf is a wrapper around protobuf message: protoconf.ThemeConf.
//
// It is designed for three goals:
//
//  1. Easy use: simple yet powerful accessers.
//  2. Elegant API: concise and clean functions.
//  3. Extensibility: Map, OrdererdMap, Index...
type ThemeConf struct {
	UnimplementedMessager
	data, originalData *protoconf.ThemeConf
}

// Name returns the ThemeConf's message name.
func (x *ThemeConf) Name() string {
	if x != nil {
		return string(x.data.ProtoReflect().Descriptor().Name())
	}
	return ""
}

// Data returns the ThemeConf's inner message data.
func (x *ThemeConf) Data() *protoconf.ThemeConf {
	if x != nil {
		return x.data
	}
	return nil
}

// Load fills ThemeConf's inner message from file in the specified directory and format.
func (x *ThemeConf) Load(dir string, format format.Format, opts *load.MessagerOptions) error {
	start := time.Now()
	defer func() {
		x.Stats.Duration = time.Since(start)
	}()
	x.data = &protoconf.ThemeConf{}
	err := load.LoadMessagerInDir(x.data, dir, format, opts)
	if err != nil {
		return err
	}
	if x.backup {
		x.originalData = proto.Clone(x.data).(*protoconf.ThemeConf)
	}
	return x.processAfterLoad()
}

// Store writes ThemeConf's inner message to file in the specified directory and format.
// Available formats: JSON, Bin, and Text.
func (x *ThemeConf) Store(dir string, format format.Format, options ...store.Option) error {
	return store.Store(x.Data(), dir, format, options...)
}

// Message returns the ThemeConf's inner message data.
func (x *ThemeConf) Message() proto.Message {
	return x.Data()
}

// Messager returns the current messager.
func (x *ThemeConf) Messager() Messager {
	return x
}

// originalMessage returns the ThemeConf's original inner message.
func (x *ThemeConf) originalMessage() proto.Message {
	if x != nil {
		return x.originalData
	}
	return nil
}

// Get1 finds value in the 1-level map. It will return
// NotFound error if the key is not found.
func (x *ThemeConf) Get1(name string) (*protoconf.ThemeConf_Theme, error) {
	d := x.Data().GetThemeMap()
	if val, ok := d[name]; !ok {
		return nil, fmt.Errorf("name(%v) %w", name, ErrNotFound)
	} else {
		return val, nil
	}
}

// Get2 finds value in the 2-level map. It will return
// NotFound error if the key is not found.
func (x *ThemeConf) Get2(name string, param string) (string, error) {
	conf, err := x.Get1(name)
	if err != nil {
		return "", err
	}
	d := conf.GetParamMap()
	if val, ok := d[param]; !ok {
		return "", fmt.Errorf("param(%v) %w", param, ErrNotFound)
	} else {
		return val, nil
	}
}

// Index types.
// Index: ActivityID<Goal,ID>
type TaskConf_Index_TaskMap = map[int64][]*protoconf.TaskConf_Task

// OrderedIndex types.
// OrderedIndex: Goal<ID>
type TaskConf_OrderedIndex_TaskMap = treemap.TreeMap[int64, []*protoconf.TaskConf_Task]

// OrderedIndex: Expiry@TaskExpiry
type TaskConf_OrderedIndex_TaskExpiryMap = treemap.TreeMap[int64, []*protoconf.TaskConf_Task]

// TaskConf is a wrapper around protobuf message: protoconf.TaskConf.
//
// It is designed for three goals:
//
//  1. Easy use: simple yet powerful accessers.
//  2. Elegant API: concise and clean functions.
//  3. Extensibility: Map, OrdererdMap, Index...
type TaskConf struct {
	UnimplementedMessager
	data, originalData        *protoconf.TaskConf
	indexTaskMap              TaskConf_Index_TaskMap
	orderedIndexTaskMap       *TaskConf_OrderedIndex_TaskMap
	orderedIndexTaskExpiryMap *TaskConf_OrderedIndex_TaskExpiryMap
}

// Name returns the TaskConf's message name.
func (x *TaskConf) Name() string {
	if x != nil {
		return string(x.data.ProtoReflect().Descriptor().Name())
	}
	return ""
}

// Data returns the TaskConf's inner message data.
func (x *TaskConf) Data() *protoconf.TaskConf {
	if x != nil {
		return x.data
	}
	return nil
}

// Load fills TaskConf's inner message from file in the specified directory and format.
func (x *TaskConf) Load(dir string, format format.Format, opts *load.MessagerOptions) error {
	start := time.Now()
	defer func() {
		x.Stats.Duration = time.Since(start)
	}()
	x.data = &protoconf.TaskConf{}
	err := load.LoadMessagerInDir(x.data, dir, format, opts)
	if err != nil {
		return err
	}
	if x.backup {
		x.originalData = proto.Clone(x.data).(*protoconf.TaskConf)
	}
	return x.processAfterLoad()
}

// Store writes TaskConf's inner message to file in the specified directory and format.
// Available formats: JSON, Bin, and Text.
func (x *TaskConf) Store(dir string, format format.Format, options ...store.Option) error {
	return store.Store(x.Data(), dir, format, options...)
}

// Message returns the TaskConf's inner message data.
func (x *TaskConf) Message() proto.Message {
	return x.Data()
}

// Messager returns the current messager.
func (x *TaskConf) Messager() Messager {
	return x
}

// originalMessage returns the TaskConf's original inner message.
func (x *TaskConf) originalMessage() proto.Message {
	if x != nil {
		return x.originalData
	}
	return nil
}

// processAfterLoad runs after this messager is loaded.
func (x *TaskConf) processAfterLoad() error {
	// Index init.
	x.indexTaskMap = make(TaskConf_Index_TaskMap)
	for _, item1 := range x.data.GetTaskMap() {
		{
			// Index: ActivityID<Goal,ID>
			key := item1.GetActivityId()
			x.indexTaskMap[key] = append(x.indexTaskMap[key], item1)
		}
	}
	// Index(sort): ActivityID<Goal,ID>
	for _, item := range x.indexTaskMap {
		sort.Slice(item, func(i, j int) bool {
			if item[i].GetGoal() != item[j].GetGoal() {
				return item[i].GetGoal() < item[j].GetGoal()
			}
			return item[i].GetId() < item[j].GetId()
		})
	}
	// OrderedIndex init.
	x.orderedIndexTaskMap = treemap.New[int64, []*protoconf.TaskConf_Task]()
	x.orderedIndexTaskExpiryMap = treemap.New[int64, []*protoconf.TaskConf_Task]()
	for _, item1 := range x.data.GetTaskMap() {
		{
			// OrderedIndex: Goal<ID>
			key := item1.GetGoal()
			value, _ := x.orderedIndexTaskMap.Get(key)
			x.orderedIndexTaskMap.Put(key, append(value, item1))
		}
		{
			// OrderedIndex: Expiry@TaskExpiry
			key := item1.GetExpiry().GetSeconds()
			value, _ := x.orderedIndexTaskExpiryMap.Get(key)
			x.orderedIndexTaskExpiryMap.Put(key, append(value, item1))
		}
	}
	// OrderedIndex(sort): Goal<ID>
	x.orderedIndexTaskMap.Range(func(key int64, item []*protoconf.TaskConf_Task) bool {
		sort.Slice(item, func(i, j int) bool {
			return item[i].GetId() < item[j].GetId()
		})
		return true
	})
	return nil
}

// Get1 finds value in the 1-level map. It will return
// NotFound error if the key is not found.
func (x *TaskConf) Get1(id int64) (*protoconf.TaskConf_Task, error) {
	d := x.Data().GetTaskMap()
	if val, ok := d[id]; !ok {
		return nil, fmt.Errorf("id(%v) %w", id, ErrNotFound)
	} else {
		return val, nil
	}
}

// Index: ActivityID<Goal,ID>

// FindTaskMap returns the index(ActivityID<Goal,ID>) to value(protoconf.TaskConf_Task) map.
// One key may correspond to multiple values, which are contained by a slice.
func (x *TaskConf) FindTaskMap() TaskConf_Index_TaskMap {
	return x.indexTaskMap
}

// FindTask returns a slice of all values of the given key.
func (x *TaskConf) FindTask(activityId int64) []*protoconf.TaskConf_Task {
	return x.indexTaskMap[activityId]
}

// FindFirstTask returns the first value of the given key,
// or nil if the key correspond to no value.
func (x *TaskConf) FindFirstTask(activityId int64) *protoconf.TaskConf_Task {
	val := x.indexTaskMap[activityId]
	if len(val) > 0 {
		return val[0]
	}
	return nil
}

// OrderedIndex: Goal<ID>

// FindTaskOrderedMap returns the index(Goal<ID>) to value(protoconf.TaskConf_Task) treemap.
// One key may correspond to multiple values, which are contained by a slice.
func (x *TaskConf) FindTaskOrderedMap() *TaskConf_OrderedIndex_TaskMap {
	return x.orderedIndexTaskMap
}

// OrderedIndex: Expiry@TaskExpiry

// FindTaskExpiryOrderedMap returns the index(Expiry@TaskExpiry) to value(protoconf.TaskConf_Task) treemap.
// One key may correspond to multiple values, which are contained by a slice.
func (x *TaskConf) FindTaskExpiryOrderedMap() *TaskConf_OrderedIndex_TaskExpiryMap {
	return x.orderedIndexTaskExpiryMap
}

func init() {
	Register(func() Messager {
		return new(ActivityConf)
	})
	Register(func() Messager {
		return new(ChapterConf)
	})
	Register(func() Messager {
		return new(ThemeConf)
	})
	Register(func() Messager {
		return new(TaskConf)
	})
}
