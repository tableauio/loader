// Code generated by protoc-gen-go-tableau-loader. DO NOT EDIT.
// versions:
// - protoc-gen-go-tableau-loader v0.10.0
// - protoc                       v3.19.3

package loader

import (
	"context"
	"sync/atomic"

	"github.com/pkg/errors"
	"github.com/tableauio/tableau/format"
	"github.com/tableauio/tableau/load"
)

type messagerContainerProvider interface {
	MessagerContainer() *messagerContainer
}

var _ interface {
	messagerContainerProvider
	Hub
} = (*ContainerHub)(nil)

type ContainerHub struct {
	*baseHub
	messagerContainer atomic.Pointer[messagerContainer]
}

func NewHub(options ...Option) *ContainerHub {
	hub := &ContainerHub{}
	hub.baseHub = newHub(hub, options...)
	hub.messagerContainer.Store(&messagerContainer{})
	return hub
}

func (h *ContainerHub) MessagerContainer() *messagerContainer {
	return h.messagerContainer.Load()
}

// SetMessagerMap sets hub's inner field messagerMap.
func (h *ContainerHub) SetMessagerMap(messagerMap MessagerMap) {
	h.messagerContainer.Store(newMessagerContainer(messagerMap))
}

// Load fills messages from files in the specified directory and format.
func (h *ContainerHub) Load(dir string, format format.Format, options ...load.Option) error {
	messagerMap := h.NewMessagerMap()
	opts := load.ParseOptions(options...)
	for name, msger := range messagerMap {
		mopts := opts.ParseMessagerOptionsByName(name)
		if err := msger.Load(dir, format, mopts); err != nil {
			return errors.WithMessagef(err, "failed to load: %v", name)
		}
	}
	// create a temporary hub with messager container for post process
	tmpHub := NewHub()
	tmpHub.SetMessagerMap(messagerMap)
	for name, msger := range messagerMap {
		if err := msger.ProcessAfterLoadAll(tmpHub); err != nil {
			return errors.WithMessagef(err, "failed to process messager %s after load all", name)
		}
	}
	h.SetMessagerMap(messagerMap)
	return nil
}

type messagerContainerKey struct{}

func (h *ContainerHub) BindTo(ctx context.Context) context.Context {
	return context.WithValue(ctx, messagerContainerKey{}, h.messagerContainer.Load())
}

func (h *ContainerHub) ProvidedBy(ctx context.Context) *ProvidedHub {
	hub := &ProvidedHub{}
	hub.baseHub = h.baseHub.providedBy(hub)
	hub.providedCtx = ctx
	hub.baseProvider = h
	return hub
}

var _ interface {
	messagerContainerProvider
	Hub
} = (*ProvidedHub)(nil)

type ProvidedHub struct {
	*baseHub
	providedCtx  context.Context
	baseProvider messagerContainerProvider
}

func (h *ProvidedHub) MessagerContainer() *messagerContainer {
	if container, ok := h.providedCtx.Value(messagerContainerKey{}).(*messagerContainer); ok {
		return container
	}
	return h.baseProvider.MessagerContainer()
}
