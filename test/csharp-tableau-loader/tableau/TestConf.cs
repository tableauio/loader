// Code generated by protoc-gen-csharp-tableau-loader. DO NOT EDIT.
// versions:
// - protoc-gen-csharp-tableau-loader v0.1.0
// - protoc                           v3.19.3
// source: test_conf.proto
using System;
using System.Collections.Generic;
using Google.Protobuf;
using Google.Protobuf.Collections;

namespace Tableau
{
    public class ActivityConf : Messager, IMessagerName
    {
        // OrderedMap types.
        public class int32_OrderedMap : SortedDictionary<uint, int> { }

        public class protoconf_Section_OrderedMapValue : Tuple<int32_OrderedMap, Protoconf.Section?>
        {
            public protoconf_Section_OrderedMapValue(int32_OrderedMap item1, Protoconf.Section? item2) : base(item1, item2) { }
        }
        public class protoconf_Section_OrderedMap : SortedDictionary<uint, protoconf_Section_OrderedMapValue> { }

        public class Activity_Chapter_OrderedMapValue : Tuple<protoconf_Section_OrderedMap, Protoconf.ActivityConf.Types.Activity.Types.Chapter?>
        {
            public Activity_Chapter_OrderedMapValue(protoconf_Section_OrderedMap item1, Protoconf.ActivityConf.Types.Activity.Types.Chapter? item2) : base(item1, item2) { }
        }
        public class Activity_Chapter_OrderedMap : SortedDictionary<uint, Activity_Chapter_OrderedMapValue> { }

        public class Activity_OrderedMapValue : Tuple<Activity_Chapter_OrderedMap, Protoconf.ActivityConf.Types.Activity?>
        {
            public Activity_OrderedMapValue(Activity_Chapter_OrderedMap item1, Protoconf.ActivityConf.Types.Activity? item2) : base(item1, item2) { }
        }
        public class Activity_OrderedMap : SortedDictionary<ulong, Activity_OrderedMapValue> { }

        private Activity_OrderedMap OrderedMap = new Activity_OrderedMap();

        // Index types.
        // Index: ActivityName
        public class Index_ActivityMap : Dictionary<string, List<Protoconf.ActivityConf.Types.Activity>> { }

        private Index_ActivityMap IndexActivityMap = new Index_ActivityMap();

        // Index: ChapterID
        public class Index_ChapterMap : Dictionary<uint, List<Protoconf.ActivityConf.Types.Activity.Types.Chapter>> { }

        private Index_ChapterMap IndexChapterMap = new Index_ChapterMap();

        // Index: ChapterName<AwardID>@NamedChapter
        public class Index_NamedChapterMap : Dictionary<string, List<Protoconf.ActivityConf.Types.Activity.Types.Chapter>> { }

        private Index_NamedChapterMap IndexNamedChapterMap = new Index_NamedChapterMap();

        // Index: SectionItemID@Award
        public class Index_AwardMap : Dictionary<uint, List<Protoconf.Section.Types.SectionItem>> { }

        private Index_AwardMap IndexAwardMap = new Index_AwardMap();

        private Protoconf.ActivityConf Data_ = new Protoconf.ActivityConf();

        public static string Name() => Protoconf.ActivityConf.Descriptor.Name;

        public override bool Load(string dir, Format fmt, in LoadOptions? options = null)
        {
            var start = DateTime.Now;
            bool loaded = LoadMessageByPath<Protoconf.ActivityConf>(out var msg, dir, fmt, options);
            Data_ = msg;
            bool ok = loaded ? ProcessAfterLoad() : false;
            LoadStats.Duration = DateTime.Now - start;
            return ok;
        }

        public ref readonly Protoconf.ActivityConf Data() => ref Data_;

        protected override bool ProcessAfterLoad()
        {
            // OrderedMap init.
            OrderedMap.Clear();
            foreach (var (key1, value1) in Data_.ActivityMap)
            {
                var ordered_map1 = new Activity_Chapter_OrderedMap();
                foreach (var (key2, value2) in value1.ChapterMap)
                {
                    var ordered_map2 = new protoconf_Section_OrderedMap();
                    foreach (var (key3, value3) in value2.SectionMap)
                    {
                        var ordered_map3 = new int32_OrderedMap();
                        foreach (var (key4, value4) in value3.SectionRankMap)
                        {
                            ordered_map3[key4] = value4;
                        }
                        ordered_map2[key3] = new protoconf_Section_OrderedMapValue(ordered_map3, value3);
                    }
                    ordered_map1[key2] = new Activity_Chapter_OrderedMapValue(ordered_map2, value2);
                }
                OrderedMap[key1] = new Activity_OrderedMapValue(ordered_map1, value1);
            }
            // Index init.
            IndexActivityMap.Clear();
            IndexChapterMap.Clear();
            IndexNamedChapterMap.Clear();
            IndexAwardMap.Clear();
            foreach (var item1 in Data_.ActivityMap)
            {
                {
                    // Index: ActivityName
                    var key = item1.Value.ActivityName;
                    var list = IndexActivityMap.TryGetValue(key, out var existingList) ?
                    existingList : IndexActivityMap[key] = new List<Protoconf.ActivityConf.Types.Activity>();
                    list.Add(item1.Value);
                }
                foreach (var item2 in item1.Value.ChapterMap)
                {
                    {
                        // Index: ChapterID
                        var key = item2.Value.ChapterId;
                        var list = IndexChapterMap.TryGetValue(key, out var existingList) ?
                        existingList : IndexChapterMap[key] = new List<Protoconf.ActivityConf.Types.Activity.Types.Chapter>();
                        list.Add(item2.Value);
                    }
                    {
                        // Index: ChapterName<AwardID>@NamedChapter
                        var key = item2.Value.ChapterName;
                        var list = IndexNamedChapterMap.TryGetValue(key, out var existingList) ?
                        existingList : IndexNamedChapterMap[key] = new List<Protoconf.ActivityConf.Types.Activity.Types.Chapter>();
                        list.Add(item2.Value);
                    }
                    foreach (var item3 in item2.Value.SectionMap)
                    {
                        foreach (var item4 in item3.Value.SectionItemList)
                        {
                            {
                                // Index: SectionItemID@Award
                                var key = item4.Id;
                                var list = IndexAwardMap.TryGetValue(key, out var existingList) ?
                                existingList : IndexAwardMap[key] = new List<Protoconf.Section.Types.SectionItem>();
                                list.Add(item4);
                            }
                        }
                    }
                }
            }
            // Index(sort): ChapterName<AwardID>@NamedChapter
            foreach (var item in IndexNamedChapterMap)
            {
                item.Value.Sort((a, b) =>
                {
                    return a.AwardId.CompareTo(b.AwardId);
                });
            }
            return true;
        }

        public Protoconf.ActivityConf.Types.Activity? Get1(ulong activityId) => Data_.ActivityMap?.TryGetValue(activityId, out var val) == true ? val : null;

        public Protoconf.ActivityConf.Types.Activity.Types.Chapter? Get2(ulong activityId, uint chapterId) => Get1(activityId)?.ChapterMap?.TryGetValue(chapterId, out var val) == true ? val : null;

        public Protoconf.Section? Get3(ulong activityId, uint chapterId, uint sectionId) => Get2(activityId, chapterId)?.SectionMap?.TryGetValue(sectionId, out var val) == true ? val : null;

        public int? Get4(ulong activityId, uint chapterId, uint sectionId, uint key4) => Get3(activityId, chapterId, sectionId)?.SectionRankMap?.TryGetValue(key4, out var val) == true ? val : null;

        // OrderedMap accessors.
        public ref readonly Activity_OrderedMap GetOrderedMap() => ref OrderedMap;

        public Activity_Chapter_OrderedMap? GetOrderedMap1(ulong activityId) => OrderedMap.TryGetValue(activityId, out var value) ? value.Item1 : null;

        public protoconf_Section_OrderedMap? GetOrderedMap2(ulong activityId, uint chapterId) => GetOrderedMap1(activityId)?.TryGetValue(chapterId, out var value) == true ? value.Item1 : null;

        public int32_OrderedMap? GetOrderedMap3(ulong activityId, uint chapterId, uint sectionId) => GetOrderedMap2(activityId, chapterId)?.TryGetValue(sectionId, out var value) == true ? value.Item1 : null;

        // Index: ActivityName
        public ref readonly Index_ActivityMap GetActivityMap() => ref IndexActivityMap;

        public List<Protoconf.ActivityConf.Types.Activity>? GetActivity(string ActivityName) => IndexActivityMap.TryGetValue(ActivityName, out var value) ? value : null;

        public Protoconf.ActivityConf.Types.Activity? GetFirstActivity(string ActivityName) => GetActivity(ActivityName)?.FirstOrDefault();

        // Index: ChapterID
        public ref readonly Index_ChapterMap GetChapterMap() => ref IndexChapterMap;

        public List<Protoconf.ActivityConf.Types.Activity.Types.Chapter>? GetChapter(uint ChapterId) => IndexChapterMap.TryGetValue(ChapterId, out var value) ? value : null;

        public Protoconf.ActivityConf.Types.Activity.Types.Chapter? GetFirstChapter(uint ChapterId) => GetChapter(ChapterId)?.FirstOrDefault();

        // Index: ChapterName<AwardID>@NamedChapter
        public ref readonly Index_NamedChapterMap GetNamedChapterMap() => ref IndexNamedChapterMap;

        public List<Protoconf.ActivityConf.Types.Activity.Types.Chapter>? GetNamedChapter(string ChapterName) => IndexNamedChapterMap.TryGetValue(ChapterName, out var value) ? value : null;

        public Protoconf.ActivityConf.Types.Activity.Types.Chapter? GetFirstNamedChapter(string ChapterName) => GetNamedChapter(ChapterName)?.FirstOrDefault();

        // Index: SectionItemID@Award
        public ref readonly Index_AwardMap GetAwardMap() => ref IndexAwardMap;

        public List<Protoconf.Section.Types.SectionItem>? GetAward(uint Id) => IndexAwardMap.TryGetValue(Id, out var value) ? value : null;

        public Protoconf.Section.Types.SectionItem? GetFirstAward(uint Id) => GetAward(Id)?.FirstOrDefault();
    }

    public class ChapterConf : Messager, IMessagerName
    {
        private Protoconf.ChapterConf Data_ = new Protoconf.ChapterConf();

        public static string Name() => Protoconf.ChapterConf.Descriptor.Name;

        public override bool Load(string dir, Format fmt, in LoadOptions? options = null)
        {
            var start = DateTime.Now;
            bool loaded = LoadMessageByPath<Protoconf.ChapterConf>(out var msg, dir, fmt, options);
            Data_ = msg;
            bool ok = loaded ? ProcessAfterLoad() : false;
            LoadStats.Duration = DateTime.Now - start;
            return ok;
        }

        public ref readonly Protoconf.ChapterConf Data() => ref Data_;

        public Protoconf.ChapterConf.Types.Chapter? Get1(ulong id) => Data_.ChapterMap?.TryGetValue(id, out var val) == true ? val : null;
    }

    public class ThemeConf : Messager, IMessagerName
    {
        private Protoconf.ThemeConf Data_ = new Protoconf.ThemeConf();

        public static string Name() => Protoconf.ThemeConf.Descriptor.Name;

        public override bool Load(string dir, Format fmt, in LoadOptions? options = null)
        {
            var start = DateTime.Now;
            bool loaded = LoadMessageByPath<Protoconf.ThemeConf>(out var msg, dir, fmt, options);
            Data_ = msg;
            bool ok = loaded ? ProcessAfterLoad() : false;
            LoadStats.Duration = DateTime.Now - start;
            return ok;
        }

        public ref readonly Protoconf.ThemeConf Data() => ref Data_;

        public Protoconf.ThemeConf.Types.Theme? Get1(string name) => Data_.ThemeMap?.TryGetValue(name, out var val) == true ? val : null;

        public string? Get2(string name, string param) => Get1(name)?.ParamMap?.TryGetValue(param, out var val) == true ? val : null;
    }

    public class TaskConf : Messager, IMessagerName
    {
        // Index types.
        // Index: ActivityID<Goal,ID>
        public class Index_TaskMap : Dictionary<long, List<Protoconf.TaskConf.Types.Task>> { }

        private Index_TaskMap IndexTaskMap = new Index_TaskMap();

        private Protoconf.TaskConf Data_ = new Protoconf.TaskConf();

        public static string Name() => Protoconf.TaskConf.Descriptor.Name;

        public override bool Load(string dir, Format fmt, in LoadOptions? options = null)
        {
            var start = DateTime.Now;
            bool loaded = LoadMessageByPath<Protoconf.TaskConf>(out var msg, dir, fmt, options);
            Data_ = msg;
            bool ok = loaded ? ProcessAfterLoad() : false;
            LoadStats.Duration = DateTime.Now - start;
            return ok;
        }

        public ref readonly Protoconf.TaskConf Data() => ref Data_;

        protected override bool ProcessAfterLoad()
        {
            // Index init.
            IndexTaskMap.Clear();
            foreach (var item1 in Data_.TaskMap)
            {
                {
                    // Index: ActivityID<Goal,ID>
                    var key = item1.Value.ActivityId;
                    var list = IndexTaskMap.TryGetValue(key, out var existingList) ?
                    existingList : IndexTaskMap[key] = new List<Protoconf.TaskConf.Types.Task>();
                    list.Add(item1.Value);
                }
            }
            // Index(sort): ActivityID<Goal,ID>
            foreach (var item in IndexTaskMap)
            {
                item.Value.Sort((a, b) =>
                {
                    if (a.Goal != b.Goal)
                    {
                        return a.Goal.CompareTo(b.Goal);
                    }
                    return a.Id.CompareTo(b.Id);
                });
            }
            return true;
        }

        public Protoconf.TaskConf.Types.Task? Get1(long id) => Data_.TaskMap?.TryGetValue(id, out var val) == true ? val : null;

        // Index: ActivityID<Goal,ID>
        public ref readonly Index_TaskMap GetTaskMap() => ref IndexTaskMap;

        public List<Protoconf.TaskConf.Types.Task>? GetTask(long ActivityId) => IndexTaskMap.TryGetValue(ActivityId, out var value) ? value : null;

        public Protoconf.TaskConf.Types.Task? GetFirstTask(long ActivityId) => GetTask(ActivityId)?.FirstOrDefault();
    }
}
