// <auto-generated>
// Code generated by protoc-gen-csharp-tableau-loader. DO NOT EDIT.
// versions:
// - protoc-gen-csharp-tableau-loader v0.1.0
// - protoc                           v3.19.3
// source: test_conf.proto
// </auto-generated>
#nullable enable
using pb = global::Google.Protobuf;
namespace Tableau
{
    public class ActivityConf : Messager, IMessagerName
    {
        // OrderedMap types.
        public class Int32_OrderedMap : SortedDictionary<uint, int>;

        public class Protoconf_Section_OrderedMapValue(Int32_OrderedMap item1, Protoconf.Section item2)
            : Tuple<Int32_OrderedMap, Protoconf.Section>(item1, item2);
        public class Protoconf_Section_OrderedMap : SortedDictionary<uint, Protoconf_Section_OrderedMapValue>;

        public class Activity_Chapter_OrderedMapValue(Protoconf_Section_OrderedMap item1, Protoconf.ActivityConf.Types.Activity.Types.Chapter item2)
            : Tuple<Protoconf_Section_OrderedMap, Protoconf.ActivityConf.Types.Activity.Types.Chapter>(item1, item2);
        public class Activity_Chapter_OrderedMap : SortedDictionary<uint, Activity_Chapter_OrderedMapValue>;

        public class Activity_OrderedMapValue(Activity_Chapter_OrderedMap item1, Protoconf.ActivityConf.Types.Activity item2)
            : Tuple<Activity_Chapter_OrderedMap, Protoconf.ActivityConf.Types.Activity>(item1, item2);
        public class Activity_OrderedMap : SortedDictionary<ulong, Activity_OrderedMapValue>;

        private Activity_OrderedMap _orderedMap = [];

        // Index types.
        // Index: ActivityName
        public class Index_ActivityMap : Dictionary<string, List<Protoconf.ActivityConf.Types.Activity>>;

        private Index_ActivityMap _indexActivityMap = [];

        // Index: ChapterID
        public class Index_ChapterMap : Dictionary<uint, List<Protoconf.ActivityConf.Types.Activity.Types.Chapter>>;

        private Index_ChapterMap _indexChapterMap = [];

        // Index: ChapterName<AwardID>@NamedChapter
        public class Index_NamedChapterMap : Dictionary<string, List<Protoconf.ActivityConf.Types.Activity.Types.Chapter>>;

        private Index_NamedChapterMap _indexNamedChapterMap = [];

        // Index: SectionItemID@Award
        public class Index_AwardMap : Dictionary<uint, List<Protoconf.Section.Types.SectionItem>>;

        private Index_AwardMap _indexAwardMap = [];

        private Protoconf.ActivityConf _data = new();

        public static string Name() => Protoconf.ActivityConf.Descriptor.Name;

        public override bool Load(string dir, Format fmt, in Load.MessagerOptions? options = null)
        {
            var start = DateTime.Now;
            try
            {
                _data = (Protoconf.ActivityConf)(
                    Tableau.Load.LoadMessagerInDir(Protoconf.ActivityConf.Descriptor, dir, fmt, options)
                    ?? throw new InvalidOperationException()
                );
            }
            catch (Exception)
            {
                return false;
            }
            LoadStats.Duration = DateTime.Now - start;
            return ProcessAfterLoad();
        }

        public ref readonly Protoconf.ActivityConf Data() => ref _data;

        public override pb::IMessage? Message() => _data;

        protected override bool ProcessAfterLoad()
        {
            // OrderedMap init.
            _orderedMap.Clear();
            foreach (var (key1, value1) in _data.ActivityMap)
            {
                var ordered_map1 = new Activity_Chapter_OrderedMap();
                foreach (var (key2, value2) in value1.ChapterMap)
                {
                    var ordered_map2 = new Protoconf_Section_OrderedMap();
                    foreach (var (key3, value3) in value2.SectionMap)
                    {
                        var ordered_map3 = new Int32_OrderedMap();
                        foreach (var (key4, value4) in value3.SectionRankMap)
                        {
                            ordered_map3[key4] = value4;
                        }
                        ordered_map2[key3] = new Protoconf_Section_OrderedMapValue(ordered_map3, value3);
                    }
                    ordered_map1[key2] = new Activity_Chapter_OrderedMapValue(ordered_map2, value2);
                }
                _orderedMap[key1] = new Activity_OrderedMapValue(ordered_map1, value1);
            }
            // Index init.
            _indexActivityMap.Clear();
            _indexChapterMap.Clear();
            _indexNamedChapterMap.Clear();
            _indexAwardMap.Clear();
            foreach (var item1 in _data.ActivityMap)
            {
                {
                    // Index: ActivityName
                    var key = item1.Value.ActivityName;
                    var list = _indexActivityMap.TryGetValue(key, out var existingList) ?
                    existingList : _indexActivityMap[key] = [];
                    list.Add(item1.Value);
                }
                foreach (var item2 in item1.Value.ChapterMap)
                {
                    {
                        // Index: ChapterID
                        var key = item2.Value.ChapterId;
                        var list = _indexChapterMap.TryGetValue(key, out var existingList) ?
                        existingList : _indexChapterMap[key] = [];
                        list.Add(item2.Value);
                    }
                    {
                        // Index: ChapterName<AwardID>@NamedChapter
                        var key = item2.Value.ChapterName;
                        var list = _indexNamedChapterMap.TryGetValue(key, out var existingList) ?
                        existingList : _indexNamedChapterMap[key] = [];
                        list.Add(item2.Value);
                    }
                    foreach (var item3 in item2.Value.SectionMap)
                    {
                        foreach (var item4 in item3.Value.SectionItemList)
                        {
                            {
                                // Index: SectionItemID@Award
                                var key = item4.Id;
                                var list = _indexAwardMap.TryGetValue(key, out var existingList) ?
                                existingList : _indexAwardMap[key] = [];
                                list.Add(item4);
                            }
                        }
                    }
                }
            }
            // Index(sort): ChapterName<AwardID>@NamedChapter
            foreach (var item in _indexNamedChapterMap)
            {
                item.Value.Sort((a, b) =>
                {
                    return a.AwardId.CompareTo(b.AwardId);
                });
            }
            return true;
        }

        public Protoconf.ActivityConf.Types.Activity? Get1(ulong activityId) =>
            _data.ActivityMap?.TryGetValue(activityId, out var val) == true ? val : null;

        public Protoconf.ActivityConf.Types.Activity.Types.Chapter? Get2(ulong activityId, uint chapterId) =>
            Get1(activityId)?.ChapterMap?.TryGetValue(chapterId, out var val) == true ? val : null;

        public Protoconf.Section? Get3(ulong activityId, uint chapterId, uint sectionId) =>
            Get2(activityId, chapterId)?.SectionMap?.TryGetValue(sectionId, out var val) == true ? val : null;

        public int? Get4(ulong activityId, uint chapterId, uint sectionId, uint key4) =>
            Get3(activityId, chapterId, sectionId)?.SectionRankMap?.TryGetValue(key4, out var val) == true ? val : null;

        // OrderedMap accessors.
        public ref readonly Activity_OrderedMap GetOrderedMap() => ref _orderedMap;

        public Activity_Chapter_OrderedMap? GetOrderedMap1(ulong activityId) =>
            _orderedMap.TryGetValue(activityId, out var value) ? value.Item1 : null;

        public Protoconf_Section_OrderedMap? GetOrderedMap2(ulong activityId, uint chapterId) =>
            GetOrderedMap1(activityId)?.TryGetValue(chapterId, out var value) == true ? value.Item1 : null;

        public Int32_OrderedMap? GetOrderedMap3(ulong activityId, uint chapterId, uint sectionId) =>
            GetOrderedMap2(activityId, chapterId)?.TryGetValue(sectionId, out var value) == true ? value.Item1 : null;

        // Index: ActivityName
        public ref readonly Index_ActivityMap FindActivityMap() => ref _indexActivityMap;

        public List<Protoconf.ActivityConf.Types.Activity>? FindActivity(string activityName) =>
            _indexActivityMap.TryGetValue(activityName, out var value) ? value : null;

        public Protoconf.ActivityConf.Types.Activity? FindFirstActivity(string activityName) =>
            FindActivity(activityName)?.FirstOrDefault();

        // Index: ChapterID
        public ref readonly Index_ChapterMap FindChapterMap() => ref _indexChapterMap;

        public List<Protoconf.ActivityConf.Types.Activity.Types.Chapter>? FindChapter(uint chapterId) =>
            _indexChapterMap.TryGetValue(chapterId, out var value) ? value : null;

        public Protoconf.ActivityConf.Types.Activity.Types.Chapter? FindFirstChapter(uint chapterId) =>
            FindChapter(chapterId)?.FirstOrDefault();

        // Index: ChapterName<AwardID>@NamedChapter
        public ref readonly Index_NamedChapterMap FindNamedChapterMap() => ref _indexNamedChapterMap;

        public List<Protoconf.ActivityConf.Types.Activity.Types.Chapter>? FindNamedChapter(string chapterName) =>
            _indexNamedChapterMap.TryGetValue(chapterName, out var value) ? value : null;

        public Protoconf.ActivityConf.Types.Activity.Types.Chapter? FindFirstNamedChapter(string chapterName) =>
            FindNamedChapter(chapterName)?.FirstOrDefault();

        // Index: SectionItemID@Award
        public ref readonly Index_AwardMap FindAwardMap() => ref _indexAwardMap;

        public List<Protoconf.Section.Types.SectionItem>? FindAward(uint id) =>
            _indexAwardMap.TryGetValue(id, out var value) ? value : null;

        public Protoconf.Section.Types.SectionItem? FindFirstAward(uint id) =>
            FindAward(id)?.FirstOrDefault();
    }

    public class ChapterConf : Messager, IMessagerName
    {
        private Protoconf.ChapterConf _data = new();

        public static string Name() => Protoconf.ChapterConf.Descriptor.Name;

        public override bool Load(string dir, Format fmt, in Load.MessagerOptions? options = null)
        {
            var start = DateTime.Now;
            try
            {
                _data = (Protoconf.ChapterConf)(
                    Tableau.Load.LoadMessagerInDir(Protoconf.ChapterConf.Descriptor, dir, fmt, options)
                    ?? throw new InvalidOperationException()
                );
            }
            catch (Exception)
            {
                return false;
            }
            LoadStats.Duration = DateTime.Now - start;
            return ProcessAfterLoad();
        }

        public ref readonly Protoconf.ChapterConf Data() => ref _data;

        public override pb::IMessage? Message() => _data;

        public Protoconf.ChapterConf.Types.Chapter? Get1(ulong id) =>
            _data.ChapterMap?.TryGetValue(id, out var val) == true ? val : null;
    }

    public class ThemeConf : Messager, IMessagerName
    {
        private Protoconf.ThemeConf _data = new();

        public static string Name() => Protoconf.ThemeConf.Descriptor.Name;

        public override bool Load(string dir, Format fmt, in Load.MessagerOptions? options = null)
        {
            var start = DateTime.Now;
            try
            {
                _data = (Protoconf.ThemeConf)(
                    Tableau.Load.LoadMessagerInDir(Protoconf.ThemeConf.Descriptor, dir, fmt, options)
                    ?? throw new InvalidOperationException()
                );
            }
            catch (Exception)
            {
                return false;
            }
            LoadStats.Duration = DateTime.Now - start;
            return ProcessAfterLoad();
        }

        public ref readonly Protoconf.ThemeConf Data() => ref _data;

        public override pb::IMessage? Message() => _data;

        public Protoconf.ThemeConf.Types.Theme? Get1(string name) =>
            _data.ThemeMap?.TryGetValue(name, out var val) == true ? val : null;

        public string? Get2(string name, string param) =>
            Get1(name)?.ParamMap?.TryGetValue(param, out var val) == true ? val : null;
    }

    public class TaskConf : Messager, IMessagerName
    {
        // Index types.
        // Index: ActivityID<Goal,ID>
        public class Index_TaskMap : Dictionary<long, List<Protoconf.TaskConf.Types.Task>>;

        private Index_TaskMap _indexTaskMap = [];

        // OrderedIndex types.
        // OrderedIndex: Goal<ID>@OrderedTask
        public class OrderedIndex_OrderedTaskMap : SortedDictionary<long, List<Protoconf.TaskConf.Types.Task>>;

        private OrderedIndex_OrderedTaskMap _orderedIndexOrderedTaskMap = [];

        // OrderedIndex: Expiry@TaskExpiry
        public class OrderedIndex_TaskExpiryMap : SortedDictionary<long, List<Protoconf.TaskConf.Types.Task>>;

        private OrderedIndex_TaskExpiryMap _orderedIndexTaskExpiryMap = [];

        // OrderedIndex: Expiry<Goal,ID>@SortedTaskExpiry
        public class OrderedIndex_SortedTaskExpiryMap : SortedDictionary<long, List<Protoconf.TaskConf.Types.Task>>;

        private OrderedIndex_SortedTaskExpiryMap _orderedIndexSortedTaskExpiryMap = [];

        private Protoconf.TaskConf _data = new();

        public static string Name() => Protoconf.TaskConf.Descriptor.Name;

        public override bool Load(string dir, Format fmt, in Load.MessagerOptions? options = null)
        {
            var start = DateTime.Now;
            try
            {
                _data = (Protoconf.TaskConf)(
                    Tableau.Load.LoadMessagerInDir(Protoconf.TaskConf.Descriptor, dir, fmt, options)
                    ?? throw new InvalidOperationException()
                );
            }
            catch (Exception)
            {
                return false;
            }
            LoadStats.Duration = DateTime.Now - start;
            return ProcessAfterLoad();
        }

        public ref readonly Protoconf.TaskConf Data() => ref _data;

        public override pb::IMessage? Message() => _data;

        protected override bool ProcessAfterLoad()
        {
            // Index init.
            _indexTaskMap.Clear();
            foreach (var item1 in _data.TaskMap)
            {
                {
                    // Index: ActivityID<Goal,ID>
                    var key = item1.Value.ActivityId;
                    var list = _indexTaskMap.TryGetValue(key, out var existingList) ?
                    existingList : _indexTaskMap[key] = [];
                    list.Add(item1.Value);
                }
            }
            // Index(sort): ActivityID<Goal,ID>
            foreach (var item in _indexTaskMap)
            {
                item.Value.Sort((a, b) =>
                {
                    if (a.Goal != b.Goal)
                    {
                        return a.Goal.CompareTo(b.Goal);
                    }
                    return a.Id.CompareTo(b.Id);
                });
            }
            // OrderedIndex init.
            _orderedIndexOrderedTaskMap.Clear();
            _orderedIndexTaskExpiryMap.Clear();
            _orderedIndexSortedTaskExpiryMap.Clear();
            foreach (var item1 in _data.TaskMap)
            {
                {
                    // OrderedIndex: Goal<ID>@OrderedTask
                    var key = item1.Value.Goal;
                    var list = _orderedIndexOrderedTaskMap.TryGetValue(key, out var existingList) ?
                    existingList : _orderedIndexOrderedTaskMap[key] = [];
                    list.Add(item1.Value);
                }
                {
                    // OrderedIndex: Expiry@TaskExpiry
                    var key = item1.Value.Expiry.Seconds;
                    var list = _orderedIndexTaskExpiryMap.TryGetValue(key, out var existingList) ?
                    existingList : _orderedIndexTaskExpiryMap[key] = [];
                    list.Add(item1.Value);
                }
                {
                    // OrderedIndex: Expiry<Goal,ID>@SortedTaskExpiry
                    var key = item1.Value.Expiry.Seconds;
                    var list = _orderedIndexSortedTaskExpiryMap.TryGetValue(key, out var existingList) ?
                    existingList : _orderedIndexSortedTaskExpiryMap[key] = [];
                    list.Add(item1.Value);
                }
            }
            // Index(sort): Goal<ID>@OrderedTask
            foreach (var item in _orderedIndexOrderedTaskMap)
            {
                item.Value.Sort((a, b) =>
                {
                    return a.Id.CompareTo(b.Id);
                });
            }
            // Index(sort): Expiry<Goal,ID>@SortedTaskExpiry
            foreach (var item in _orderedIndexSortedTaskExpiryMap)
            {
                item.Value.Sort((a, b) =>
                {
                    if (a.Goal != b.Goal)
                    {
                        return a.Goal.CompareTo(b.Goal);
                    }
                    return a.Id.CompareTo(b.Id);
                });
            }
            return true;
        }

        public Protoconf.TaskConf.Types.Task? Get1(long id) =>
            _data.TaskMap?.TryGetValue(id, out var val) == true ? val : null;

        // Index: ActivityID<Goal,ID>
        public ref readonly Index_TaskMap FindTaskMap() => ref _indexTaskMap;

        public List<Protoconf.TaskConf.Types.Task>? FindTask(long activityId) =>
            _indexTaskMap.TryGetValue(activityId, out var value) ? value : null;

        public Protoconf.TaskConf.Types.Task? FindFirstTask(long activityId) =>
            FindTask(activityId)?.FirstOrDefault();

        // OrderedIndex: Goal<ID>@OrderedTask
        public ref readonly OrderedIndex_OrderedTaskMap FindOrderedTaskMap() => ref _orderedIndexOrderedTaskMap;

        public List<Protoconf.TaskConf.Types.Task>? FindOrderedTask(long goal) =>
            _orderedIndexOrderedTaskMap.TryGetValue(goal, out var value) ? value : null;

        public Protoconf.TaskConf.Types.Task? FindFirstOrderedTask(long goal) =>
            FindOrderedTask(goal)?.FirstOrDefault();

        // OrderedIndex: Expiry@TaskExpiry
        public ref readonly OrderedIndex_TaskExpiryMap FindTaskExpiryMap() => ref _orderedIndexTaskExpiryMap;

        public List<Protoconf.TaskConf.Types.Task>? FindTaskExpiry(long expiry) =>
            _orderedIndexTaskExpiryMap.TryGetValue(expiry, out var value) ? value : null;

        public Protoconf.TaskConf.Types.Task? FindFirstTaskExpiry(long expiry) =>
            FindTaskExpiry(expiry)?.FirstOrDefault();

        // OrderedIndex: Expiry<Goal,ID>@SortedTaskExpiry
        public ref readonly OrderedIndex_SortedTaskExpiryMap FindSortedTaskExpiryMap() => ref _orderedIndexSortedTaskExpiryMap;

        public List<Protoconf.TaskConf.Types.Task>? FindSortedTaskExpiry(long expiry) =>
            _orderedIndexSortedTaskExpiryMap.TryGetValue(expiry, out var value) ? value : null;

        public Protoconf.TaskConf.Types.Task? FindFirstSortedTaskExpiry(long expiry) =>
            FindSortedTaskExpiry(expiry)?.FirstOrDefault();
    }
}
