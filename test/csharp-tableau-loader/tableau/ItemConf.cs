// Code generated by protoc-gen-csharp-tableau-loader. DO NOT EDIT.
// versions:
// - protoc-gen-csharp-tableau-loader v0.1.0
// - protoc                           v3.19.3
// source: item_conf.proto
using System;
using System.Collections.Generic;
using Google.Protobuf;
using Google.Protobuf.Collections;

namespace Tableau
{
    public class ItemConf : Messager, IMessagerName
    {
        // OrderedMap types.
        public class Item_OrderedMap : SortedDictionary<uint, Protoconf.ItemConf.Types.Item> { }

        private Item_OrderedMap OrderedMap = new Item_OrderedMap();

        // Index types.
        // Index: Type
        public class Index_ItemMap : Dictionary<Protoconf.FruitType, List<Protoconf.ItemConf.Types.Item>> { }

        private Index_ItemMap IndexItemMap = new Index_ItemMap();

        // Index: Param<ID>@ItemInfo
        public class Index_ItemInfoMap : Dictionary<int, List<Protoconf.ItemConf.Types.Item>> { }

        private Index_ItemInfoMap IndexItemInfoMap = new Index_ItemInfoMap();

        // Index: Default@ItemDefaultInfo
        public class Index_ItemDefaultInfoMap : Dictionary<string, List<Protoconf.ItemConf.Types.Item>> { }

        private Index_ItemDefaultInfoMap IndexItemDefaultInfoMap = new Index_ItemDefaultInfoMap();

        // Index: ExtType@ItemExtInfo
        public class Index_ItemExtInfoMap : Dictionary<Protoconf.FruitType, List<Protoconf.ItemConf.Types.Item>> { }

        private Index_ItemExtInfoMap IndexItemExtInfoMap = new Index_ItemExtInfoMap();

        // Index: (ID,Name)<Type,UseEffectType>@AwardItem
        public struct ItemConf_Index_AwardItemKey
        {
            public uint Id;
            public string Name;

            public ItemConf_Index_AwardItemKey(uint id, string name)
            {
                Id = id;
                Name = name;
            }
        }

        public class Index_AwardItemMap : Dictionary<ItemConf_Index_AwardItemKey, List<Protoconf.ItemConf.Types.Item>> { }

        private Index_AwardItemMap IndexAwardItemMap = new Index_AwardItemMap();

        // Index: (ID,Type,Param,ExtType)@SpecialItem
        public struct ItemConf_Index_SpecialItemKey
        {
            public uint Id;
            public Protoconf.FruitType Type;
            public int Param;
            public Protoconf.FruitType ExtType;

            public ItemConf_Index_SpecialItemKey(uint id, Protoconf.FruitType type, int param, Protoconf.FruitType extType)
            {
                Id = id;
                Type = type;
                Param = param;
                ExtType = extType;
            }
        }

        public class Index_SpecialItemMap : Dictionary<ItemConf_Index_SpecialItemKey, List<Protoconf.ItemConf.Types.Item>> { }

        private Index_SpecialItemMap IndexSpecialItemMap = new Index_SpecialItemMap();

        // Index: PathDir@ItemPathDir
        public class Index_ItemPathDirMap : Dictionary<string, List<Protoconf.ItemConf.Types.Item>> { }

        private Index_ItemPathDirMap IndexItemPathDirMap = new Index_ItemPathDirMap();

        // Index: PathName@ItemPathName
        public class Index_ItemPathNameMap : Dictionary<string, List<Protoconf.ItemConf.Types.Item>> { }

        private Index_ItemPathNameMap IndexItemPathNameMap = new Index_ItemPathNameMap();

        // Index: PathFriendID@ItemPathFriendID
        public class Index_ItemPathFriendIDMap : Dictionary<uint, List<Protoconf.ItemConf.Types.Item>> { }

        private Index_ItemPathFriendIDMap IndexItemPathFriendIdMap = new Index_ItemPathFriendIDMap();

        // Index: UseEffectType@UseEffectType
        public class Index_UseEffectTypeMap : Dictionary<Protoconf.UseEffect.Types.Type, List<Protoconf.ItemConf.Types.Item>> { }

        private Index_UseEffectTypeMap IndexUseEffectTypeMap = new Index_UseEffectTypeMap();

        private Protoconf.ItemConf Data_ = new Protoconf.ItemConf();

        public static string Name() => Protoconf.ItemConf.Descriptor.Name;

        public override bool Load(string dir, Format fmt, in LoadOptions? options = null)
        {
            var start = DateTime.Now;
            bool loaded = LoadMessageByPath<Protoconf.ItemConf>(out var msg, dir, fmt, options);
            Data_ = msg;
            bool ok = loaded ? ProcessAfterLoad() : false;
            LoadStats.Duration = DateTime.Now - start;
            return ok;
        }

        public ref readonly Protoconf.ItemConf Data() => ref Data_;

        protected override bool ProcessAfterLoad()
        {
            // OrderedMap init.
            OrderedMap.Clear();
            foreach (var (key1, value1) in Data_.ItemMap)
            {
                OrderedMap[key1] = value1;
            }
            // Index init.
            IndexItemMap.Clear();
            IndexItemInfoMap.Clear();
            IndexItemDefaultInfoMap.Clear();
            IndexItemExtInfoMap.Clear();
            IndexAwardItemMap.Clear();
            IndexSpecialItemMap.Clear();
            IndexItemPathDirMap.Clear();
            IndexItemPathNameMap.Clear();
            IndexItemPathFriendIdMap.Clear();
            IndexUseEffectTypeMap.Clear();
            foreach (var item1 in Data_.ItemMap)
            {
                {
                    // Index: Type
                    var key = item1.Value.Type;
                    if (!IndexItemMap.ContainsKey(key))
                    {
                        IndexItemMap[key] = new List<Protoconf.ItemConf.Types.Item>();
                    }
                    IndexItemMap[key].Add(item1.Value);
                }
                {
                    // Index: Param<ID>@ItemInfo
                    foreach (var item2 in item1.Value.ParamList ?? Enumerable.Empty<int>())
                    {
                        var key = item2;
                        if (!IndexItemInfoMap.ContainsKey(key))
                        {
                            IndexItemInfoMap[key] = new List<Protoconf.ItemConf.Types.Item>();
                        }
                        IndexItemInfoMap[key].Add(item1.Value);
                    }
                }
                {
                    // Index: Default@ItemDefaultInfo
                    var key = item1.Value.Default;
                    if (!IndexItemDefaultInfoMap.ContainsKey(key))
                    {
                        IndexItemDefaultInfoMap[key] = new List<Protoconf.ItemConf.Types.Item>();
                    }
                    IndexItemDefaultInfoMap[key].Add(item1.Value);
                }
                {
                    // Index: ExtType@ItemExtInfo
                    foreach (var item2 in item1.Value.ExtTypeList ?? Enumerable.Empty<Protoconf.FruitType>())
                    {
                        var key = item2;
                        if (!IndexItemExtInfoMap.ContainsKey(key))
                        {
                            IndexItemExtInfoMap[key] = new List<Protoconf.ItemConf.Types.Item>();
                        }
                        IndexItemExtInfoMap[key].Add(item1.Value);
                    }
                }
                {
                    // Index: (ID,Name)<Type,UseEffectType>@AwardItem
                    var key = new ItemConf_Index_AwardItemKey(item1.Value.Id, item1.Value.Name);
                    if (!IndexAwardItemMap.ContainsKey(key))
                    {
                        IndexAwardItemMap[key] = new List<Protoconf.ItemConf.Types.Item>();
                    }
                    IndexAwardItemMap[key].Add(item1.Value);
                }
                {
                    // Index: (ID,Type,Param,ExtType)@SpecialItem
                    foreach (var indexItem2 in item1.Value.ParamList ?? Enumerable.Empty<int>())
                    {
                        foreach (var indexItem3 in item1.Value.ExtTypeList ?? Enumerable.Empty<Protoconf.FruitType>())
                        {
                            var key = new ItemConf_Index_SpecialItemKey(item1.Value.Id, item1.Value.Type, indexItem2, indexItem3);
                            if (!IndexSpecialItemMap.ContainsKey(key))
                            {
                                IndexSpecialItemMap[key] = new List<Protoconf.ItemConf.Types.Item>();
                            }
                            IndexSpecialItemMap[key].Add(item1.Value);
                        }
                    }
                }
                {
                    // Index: PathDir@ItemPathDir
                    var key = item1.Value.Path?.Dir ?? "";
                    if (!IndexItemPathDirMap.ContainsKey(key))
                    {
                        IndexItemPathDirMap[key] = new List<Protoconf.ItemConf.Types.Item>();
                    }
                    IndexItemPathDirMap[key].Add(item1.Value);
                }
                {
                    // Index: PathName@ItemPathName
                    foreach (var item2 in item1.Value.Path?.NameList ?? Enumerable.Empty<string>())
                    {
                        var key = item2;
                        if (!IndexItemPathNameMap.ContainsKey(key))
                        {
                            IndexItemPathNameMap[key] = new List<Protoconf.ItemConf.Types.Item>();
                        }
                        IndexItemPathNameMap[key].Add(item1.Value);
                    }
                }
                {
                    // Index: PathFriendID@ItemPathFriendID
                    var key = item1.Value.Path?.Friend?.Id ?? 0;
                    if (!IndexItemPathFriendIdMap.ContainsKey(key))
                    {
                        IndexItemPathFriendIdMap[key] = new List<Protoconf.ItemConf.Types.Item>();
                    }
                    IndexItemPathFriendIdMap[key].Add(item1.Value);
                }
                {
                    // Index: UseEffectType@UseEffectType
                    var key = item1.Value.UseEffect?.Type ?? 0;
                    if (!IndexUseEffectTypeMap.ContainsKey(key))
                    {
                        IndexUseEffectTypeMap[key] = new List<Protoconf.ItemConf.Types.Item>();
                    }
                    IndexUseEffectTypeMap[key].Add(item1.Value);
                }
            }
            // Index(sort): Param<ID>@ItemInfo
            foreach (var item in IndexItemInfoMap)
            {
                item.Value.Sort((a, b) =>
                {
                    return a.Id.CompareTo(b.Id);
                });
            }
            // Index(sort): (ID,Name)<Type,UseEffectType>@AwardItem
            foreach (var item in IndexAwardItemMap)
            {
                item.Value.Sort((a, b) =>
                {
                    if (a.Type != b.Type)
                    {
                        return a.Type.CompareTo(b.Type);
                    }
                    return (a.UseEffect?.Type ?? 0).CompareTo(b.UseEffect?.Type ?? 0);
                });
            }
            return true;
        }

        public Protoconf.ItemConf.Types.Item? Get1(uint id)
        {
            if (Data_.ItemMap.TryGetValue(id, out var val))
            {
                return val;
            }
            return null;
        }

        // OrderedMap accessors.
        public ref readonly Item_OrderedMap GetOrderedMap() => ref OrderedMap;

        // Index: Type
        public ref readonly Index_ItemMap GetItemMap() => ref IndexItemMap;

        public List<Protoconf.ItemConf.Types.Item>? GetItem(Protoconf.FruitType Type) => IndexItemMap.TryGetValue(Type, out var value) ? value : null;

        public Protoconf.ItemConf.Types.Item? GetFirstItem(Protoconf.FruitType Type) => GetItem(Type)?.FirstOrDefault();

        // Index: Param<ID>@ItemInfo
        public ref readonly Index_ItemInfoMap GetItemInfoMap() => ref IndexItemInfoMap;

        public List<Protoconf.ItemConf.Types.Item>? GetItemInfo(int Param) => IndexItemInfoMap.TryGetValue(Param, out var value) ? value : null;

        public Protoconf.ItemConf.Types.Item? GetFirstItemInfo(int Param) => GetItemInfo(Param)?.FirstOrDefault();

        // Index: Default@ItemDefaultInfo
        public ref readonly Index_ItemDefaultInfoMap GetItemDefaultInfoMap() => ref IndexItemDefaultInfoMap;

        public List<Protoconf.ItemConf.Types.Item>? GetItemDefaultInfo(string Default) => IndexItemDefaultInfoMap.TryGetValue(Default, out var value) ? value : null;

        public Protoconf.ItemConf.Types.Item? GetFirstItemDefaultInfo(string Default) => GetItemDefaultInfo(Default)?.FirstOrDefault();

        // Index: ExtType@ItemExtInfo
        public ref readonly Index_ItemExtInfoMap GetItemExtInfoMap() => ref IndexItemExtInfoMap;

        public List<Protoconf.ItemConf.Types.Item>? GetItemExtInfo(Protoconf.FruitType ExtType) => IndexItemExtInfoMap.TryGetValue(ExtType, out var value) ? value : null;

        public Protoconf.ItemConf.Types.Item? GetFirstItemExtInfo(Protoconf.FruitType ExtType) => GetItemExtInfo(ExtType)?.FirstOrDefault();

        // Index: (ID,Name)<Type,UseEffectType>@AwardItem
        public ref readonly Index_AwardItemMap GetAwardItemMap() => ref IndexAwardItemMap;

        public List<Protoconf.ItemConf.Types.Item>? GetAwardItem(ItemConf_Index_AwardItemKey key) => IndexAwardItemMap.TryGetValue(key, out var value) ? value : null;

        public Protoconf.ItemConf.Types.Item? GetFirstAwardItem(ItemConf_Index_AwardItemKey key) => GetAwardItem(key)?.FirstOrDefault();

        // Index: (ID,Type,Param,ExtType)@SpecialItem
        public ref readonly Index_SpecialItemMap GetSpecialItemMap() => ref IndexSpecialItemMap;

        public List<Protoconf.ItemConf.Types.Item>? GetSpecialItem(ItemConf_Index_SpecialItemKey key) => IndexSpecialItemMap.TryGetValue(key, out var value) ? value : null;

        public Protoconf.ItemConf.Types.Item? GetFirstSpecialItem(ItemConf_Index_SpecialItemKey key) => GetSpecialItem(key)?.FirstOrDefault();

        // Index: PathDir@ItemPathDir
        public ref readonly Index_ItemPathDirMap GetItemPathDirMap() => ref IndexItemPathDirMap;

        public List<Protoconf.ItemConf.Types.Item>? GetItemPathDir(string Dir) => IndexItemPathDirMap.TryGetValue(Dir, out var value) ? value : null;

        public Protoconf.ItemConf.Types.Item? GetFirstItemPathDir(string Dir) => GetItemPathDir(Dir)?.FirstOrDefault();

        // Index: PathName@ItemPathName
        public ref readonly Index_ItemPathNameMap GetItemPathNameMap() => ref IndexItemPathNameMap;

        public List<Protoconf.ItemConf.Types.Item>? GetItemPathName(string Name) => IndexItemPathNameMap.TryGetValue(Name, out var value) ? value : null;

        public Protoconf.ItemConf.Types.Item? GetFirstItemPathName(string Name) => GetItemPathName(Name)?.FirstOrDefault();

        // Index: PathFriendID@ItemPathFriendID
        public ref readonly Index_ItemPathFriendIDMap GetItemPathFriendIDMap() => ref IndexItemPathFriendIdMap;

        public List<Protoconf.ItemConf.Types.Item>? GetItemPathFriendID(uint Id) => IndexItemPathFriendIdMap.TryGetValue(Id, out var value) ? value : null;

        public Protoconf.ItemConf.Types.Item? GetFirstItemPathFriendID(uint Id) => GetItemPathFriendID(Id)?.FirstOrDefault();

        // Index: UseEffectType@UseEffectType
        public ref readonly Index_UseEffectTypeMap GetUseEffectTypeMap() => ref IndexUseEffectTypeMap;

        public List<Protoconf.ItemConf.Types.Item>? GetUseEffectType(Protoconf.UseEffect.Types.Type Type) => IndexUseEffectTypeMap.TryGetValue(Type, out var value) ? value : null;

        public Protoconf.ItemConf.Types.Item? GetFirstUseEffectType(Protoconf.UseEffect.Types.Type Type) => GetUseEffectType(Type)?.FirstOrDefault();
    }
}
