// Code generated by protoc-gen-csharp-tableau-loader. DO NOT EDIT.
// versions:
// - protoc-gen-csharp-tableau-loader v0.1.0
// - protoc                       v3.19.3
// source: hero_conf.proto
using System;
using System.Collections.Generic;
using Google.Protobuf;
using Google.Protobuf.Collections;

namespace Tableau
{
    public class HeroConf : Messager, IMessagerName
    {
        private Protoconf.HeroConf Data_ = new Protoconf.HeroConf();

        public static string Name() => Protoconf.HeroConf.Descriptor.Name;

        public override bool Load(string dir, Format fmt, LoadOptions? options = null)
        {
            var start = DateTime.Now;
            bool loaded = LoadMessageByPath<Protoconf.HeroConf>(out var msg, dir, fmt, options);
            Data_ = msg;
            bool ok = loaded ? ProcessAfterLoad() : false;
            LoadStats.Duration = DateTime.Now - start;
            return ok;
        }

        public ref readonly Protoconf.HeroConf Data() => ref Data_;

        public Protoconf.HeroConf.Types.Hero? Get1(string name)
        {
            if (Data_.HeroMap.TryGetValue(name, out var val))
            {
                return val;
            }
            return null;
        }

        public Protoconf.HeroConf.Types.Hero.Types.Attr? Get2(string name, string title)
        {
            var conf = Get1(name);
            if (conf?.AttrMap != null && conf.AttrMap.TryGetValue(title, out var val))
            {
                return val;
            }
            return null;
        }
    }

    public class HeroBaseConf : Messager, IMessagerName
    {
        private Protoconf.HeroBaseConf Data_ = new Protoconf.HeroBaseConf();

        public static string Name() => Protoconf.HeroBaseConf.Descriptor.Name;

        public override bool Load(string dir, Format fmt, LoadOptions? options = null)
        {
            var start = DateTime.Now;
            bool loaded = LoadMessageByPath<Protoconf.HeroBaseConf>(out var msg, dir, fmt, options);
            Data_ = msg;
            bool ok = loaded ? ProcessAfterLoad() : false;
            LoadStats.Duration = DateTime.Now - start;
            return ok;
        }

        public ref readonly Protoconf.HeroBaseConf Data() => ref Data_;

        public Base.Hero? Get1(string name)
        {
            if (Data_.HeroMap.TryGetValue(name, out var val))
            {
                return val;
            }
            return null;
        }

        public Base.Item? Get2(string name, string id)
        {
            var conf = Get1(name);
            if (conf?.ItemMap != null && conf.ItemMap.TryGetValue(id, out var val))
            {
                return val;
            }
            return null;
        }
    }
}
